/* tslint:disable */
/* eslint-disable */
/**
 * Abandoned Carts
 * Use `/abandoned-carts/{token}` on headless storefronts to retrieve the `cart_id` via the abandoned cart `token` passed in to headless storefront via an abandoned cart email link clicked on by a shopper. Once the `cart_id` has been retrieved, it can be used to fetch and display information about the cart to the shopper via the storefront cart and/or server-to-server cart APIs.  - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication)  ## OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Carts                                        | modify     | `store_cart`                                  | | Carts                                        | read-only  | `store_cart_read_only`                        |  For more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorDetailedFull,
    ErrorDetailedFullFromJSON,
    ErrorDetailedFullToJSON,
    ErrorFull,
    ErrorFullFromJSON,
    ErrorFullToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
} from '../models';

export interface GetAbandonedCartsRequest {
    token: string;
}

/**
 * 
 */
export class AbandonedCartsApi extends runtime.BaseAPI {

    /**
     * Returns the `cart_id` corresponding to the abandoned cart `{token}` passed in.  **Usage Notes**: * `{token}` is the token in the query string of the abandoned cart link found in abandoned cart email notifications to shoppers
     * Get an Abandoned Cart
     */
    async getAbandonedCartsRaw(requestParameters: GetAbandonedCartsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling getAbandonedCarts.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/abandoned-carts/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns the `cart_id` corresponding to the abandoned cart `{token}` passed in.  **Usage Notes**: * `{token}` is the token in the query string of the abandoned cart link found in abandoned cart email notifications to shoppers
     * Get an Abandoned Cart
     */
    async getAbandonedCarts(requestParameters: GetAbandonedCartsRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.getAbandonedCartsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

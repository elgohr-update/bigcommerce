/* tslint:disable */
/* eslint-disable */
/**
 * Themes
 * Backup, restore, download, and activate themes; and, get the status of theme jobs and read theme configurations.  - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header.  ```http GET /stores/{$$.env.store_hash}/v3/themes host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  ### OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Themes                                       | modify     | `store_themes_manage`                         | For more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Error payload for the BigCommerce API.
 * @export
 * @interface NotFound
 */
export interface NotFound {
    /**
     * 404 HTTP status code.
     * @type {number}
     * @memberof NotFound
     */
    status?: number;
    /**
     * The error title describing the particular error.
     * @type {string}
     * @memberof NotFound
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof NotFound
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof NotFound
     */
    instance?: string;
}

export function NotFoundFromJSON(json: any): NotFound {
    return NotFoundFromJSONTyped(json, false);
}

export function NotFoundFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotFound {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': !exists(json, 'status') ? undefined : json['status'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
    };
}

export function NotFoundToJSON(value?: NotFound | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': value.status,
        'title': value.title,
        'type': value.type,
        'instance': value.instance,
    };
}



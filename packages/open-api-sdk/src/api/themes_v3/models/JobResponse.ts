/* tslint:disable */
/* eslint-disable */
/**
 * Themes
 * Backup, restore, download, and activate themes; and, get the status of theme jobs and read theme configurations.  - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header.  ```http GET /stores/{$$.env.store_hash}/v3/themes host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  ### OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Themes                                       | modify     | `store_themes_manage`                         | For more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Job1,
    Job1FromJSON,
    Job1FromJSONTyped,
    Job1ToJSON,
} from './';

/**
 * Response for /GET Jobs by Id.
 * @export
 * @interface JobResponse
 */
export interface JobResponse {
    /**
     * 
     * @type {Job1}
     * @memberof JobResponse
     */
    data?: Job1;
    /**
     * Empty meta object; may be used later.
     * @type {object}
     * @memberof JobResponse
     */
    meta?: object;
}

export function JobResponseFromJSON(json: any): JobResponse {
    return JobResponseFromJSONTyped(json, false);
}

export function JobResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): JobResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : Job1FromJSON(json['data']),
        'meta': !exists(json, 'meta') ? undefined : json['meta'],
    };
}

export function JobResponseToJSON(value?: JobResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': Job1ToJSON(value.data),
        'meta': value.meta,
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Themes
 * Backup, restore, download, and activate themes; and, get the status of theme jobs and read theme configurations.  - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header.  ```http GET /stores/{$$.env.store_hash}/v3/themes host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  ### OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Themes                                       | modify     | `store_themes_manage`                         | For more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Activate,
    ActivateFromJSON,
    ActivateToJSON,
    JobId,
    JobIdFromJSON,
    JobIdToJSON,
    NoContent,
    NoContentFromJSON,
    NoContentToJSON,
    WhichThemeToDownload,
    WhichThemeToDownloadFromJSON,
    WhichThemeToDownloadToJSON,
} from '../models';

export interface ActivateStoreThemeRequest {
    accept: string;
    contentType: string;
    activate: Activate;
}

export interface DownloadThemeRequest {
    uuid: string;
    accept: string;
    contentType: string;
    whichThemeToDownload: WhichThemeToDownload;
}

/**
 * 
 */
export class ThemeActionsApi extends runtime.BaseAPI {

    /**
     * Actives a store *Theme*.  This returns a 204 response upon success.
     * Activate a Theme
     */
    async activateStoreThemeRaw(requestParameters: ActivateStoreThemeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<NoContent>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling activateStoreTheme.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling activateStoreTheme.');
        }

        if (requestParameters.activate === null || requestParameters.activate === undefined) {
            throw new runtime.RequiredError('activate','Required parameter requestParameters.activate was null or undefined when calling activateStoreTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/themes/actions/activate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActivateToJSON(requestParameters.activate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoContentFromJSON(jsonValue));
    }

    /**
     * Actives a store *Theme*.  This returns a 204 response upon success.
     * Activate a Theme
     */
    async activateStoreTheme(requestParameters: ActivateStoreThemeRequest, initOverrides?: RequestInit): Promise<NoContent> {
        const response = await this.activateStoreThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads a stores *Theme*.
     * Download a Theme
     */
    async downloadThemeRaw(requestParameters: DownloadThemeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<JobId>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling downloadTheme.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling downloadTheme.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling downloadTheme.');
        }

        if (requestParameters.whichThemeToDownload === null || requestParameters.whichThemeToDownload === undefined) {
            throw new runtime.RequiredError('whichThemeToDownload','Required parameter requestParameters.whichThemeToDownload was null or undefined when calling downloadTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/themes/{uuid}/actions/download`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WhichThemeToDownloadToJSON(requestParameters.whichThemeToDownload),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobIdFromJSON(jsonValue));
    }

    /**
     * Downloads a stores *Theme*.
     * Download a Theme
     */
    async downloadTheme(requestParameters: DownloadThemeRequest, initOverrides?: RequestInit): Promise<JobId> {
        const response = await this.downloadThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

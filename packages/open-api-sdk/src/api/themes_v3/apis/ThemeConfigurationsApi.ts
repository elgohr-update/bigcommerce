/* tslint:disable */
/* eslint-disable */
/**
 * Themes
 * Backup, restore, download, and activate themes; and, get the status of theme jobs and read theme configurations.  - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header.  ```http GET /stores/{$$.env.store_hash}/v3/themes host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  ### OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Themes                                       | modify     | `store_themes_manage`                         | For more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    ThemeConfigurationWrite,
    ThemeConfigurationWriteFromJSON,
    ThemeConfigurationWriteToJSON,
} from '../models';

export interface ThemesUuidConfigurationsGetRequest {
    siteIdin: Array<number>;
    uuid: string;
    page?: number;
    limit?: number;
    uuidin?: Array<string>;
    channelIdin?: Array<number>;
    variationUuid?: string;
}

export interface ThemesUuidConfigurationsValidatePostRequest {
    uuid: string;
    themeConfigurationWrite?: ThemeConfigurationWrite;
}

/**
 * 
 */
export class ThemeConfigurationsApi extends runtime.BaseAPI {

    /**
     * Returns a list of theme\'s configurations.  **Usage Notes**: * At least one filter must be provided.
     * Get Theme Configuration
     */
    async themesUuidConfigurationsGetRaw(requestParameters: ThemesUuidConfigurationsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.siteIdin === null || requestParameters.siteIdin === undefined) {
            throw new runtime.RequiredError('siteIdin','Required parameter requestParameters.siteIdin was null or undefined when calling themesUuidConfigurationsGet.');
        }

        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling themesUuidConfigurationsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.siteIdin) {
            queryParameters['site_id:in'] = requestParameters.siteIdin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.uuidin) {
            queryParameters['uuid:in'] = requestParameters.uuidin;
        }

        if (requestParameters.channelIdin) {
            queryParameters['channel_id:in'] = requestParameters.channelIdin;
        }

        if (requestParameters.variationUuid !== undefined) {
            queryParameters['variation_uuid'] = requestParameters.variationUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/themes/{uuid}/configurations`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns a list of theme\'s configurations.  **Usage Notes**: * At least one filter must be provided.
     * Get Theme Configuration
     */
    async themesUuidConfigurationsGet(requestParameters: ThemesUuidConfigurationsGetRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.themesUuidConfigurationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validates a theme configuration against the theme\'s schema without creating it. Useful for testing schemas before creation.
     * Validate Theme Configuration
     */
    async themesUuidConfigurationsValidatePostRaw(requestParameters: ThemesUuidConfigurationsValidatePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling themesUuidConfigurationsValidatePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/themes/{uuid}/configurations/validate`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThemeConfigurationWriteToJSON(requestParameters.themeConfigurationWrite),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Validates a theme configuration against the theme\'s schema without creating it. Useful for testing schemas before creation.
     * Validate Theme Configuration
     */
    async themesUuidConfigurationsValidatePost(requestParameters: ThemesUuidConfigurationsValidatePostRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.themesUuidConfigurationsValidatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

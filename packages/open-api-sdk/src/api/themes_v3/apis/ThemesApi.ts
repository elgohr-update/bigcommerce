/* tslint:disable */
/* eslint-disable */
/**
 * Themes
 * Backup, restore, download, and activate themes; and, get the status of theme jobs and read theme configurations.  - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header.  ```http GET /stores/{$$.env.store_hash}/v3/themes host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  ### OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Themes                                       | modify     | `store_themes_manage`                         | For more information on OAuth Scopes, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    JobId,
    JobIdFromJSON,
    JobIdToJSON,
    ThemeResponse,
    ThemeResponseFromJSON,
    ThemeResponseToJSON,
    ThemesCollectionResponse,
    ThemesCollectionResponseFromJSON,
    ThemesCollectionResponseToJSON,
} from '../models';

export interface DeleteStoreThemeRequest {
    uuid: string;
    accept: string;
    contentType: string;
}

export interface GetStoreThemeRequest {
    uuid: string;
    accept: string;
    contentType: string;
}

export interface GetStoreThemesRequest {
    accept: string;
    contentType: string;
}

export interface UploadThemeRequest {
    accept: string;
    contentType: string;
    file: Blob;
}

/**
 * 
 */
export class ThemesApi extends runtime.BaseAPI {

    /**
     * Deletes a store *Theme*. Theme variations can not be deleted using this endpoint. This will delete the theme and all variations.
     * Delete a Theme
     */
    async deleteStoreThemeRaw(requestParameters: DeleteStoreThemeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteStoreTheme.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteStoreTheme.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteStoreTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/themes/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a store *Theme*. Theme variations can not be deleted using this endpoint. This will delete the theme and all variations.
     * Delete a Theme
     */
    async deleteStoreTheme(requestParameters: DeleteStoreThemeRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteStoreThemeRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a store *Theme*. The theme variation is not available at this endpoint.
     * Get a Theme
     */
    async getStoreThemeRaw(requestParameters: GetStoreThemeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ThemeResponse>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getStoreTheme.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getStoreTheme.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getStoreTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/themes/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeResponseFromJSON(jsonValue));
    }

    /**
     * Returns a store *Theme*. The theme variation is not available at this endpoint.
     * Get a Theme
     */
    async getStoreTheme(requestParameters: GetStoreThemeRequest, initOverrides?: RequestInit): Promise<ThemeResponse> {
        const response = await this.getStoreThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of store *Themes*.
     * Get all Themes
     */
    async getStoreThemesRaw(requestParameters: GetStoreThemesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ThemesCollectionResponse>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getStoreThemes.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getStoreThemes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/themes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemesCollectionResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of store *Themes*.
     * Get all Themes
     */
    async getStoreThemes(requestParameters: GetStoreThemesRequest, initOverrides?: RequestInit): Promise<ThemesCollectionResponse> {
        const response = await this.getStoreThemesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads a new *Theme* to your BigCommerce store.  **Required Fields** * file
     * Upload a Theme
     */
    async uploadThemeRaw(requestParameters: UploadThemeRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<JobId>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling uploadTheme.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling uploadTheme.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling uploadTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/themes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobIdFromJSON(jsonValue));
    }

    /**
     * Uploads a new *Theme* to your BigCommerce store.  **Required Fields** * file
     * Upload a Theme
     */
    async uploadTheme(requestParameters: UploadThemeRequest, initOverrides?: RequestInit): Promise<JobId> {
        const response = await this.uploadThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

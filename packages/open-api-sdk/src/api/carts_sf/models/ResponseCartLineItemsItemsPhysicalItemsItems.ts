/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Carts
 * Manage cart operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: Storefront
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ResponseCartBaseItem,
    ResponseCartBaseItemFromJSON,
    ResponseCartBaseItemFromJSONTyped,
    ResponseCartBaseItemToJSON,
    ResponseCartLineItemsItemsPhysicalItemsItemsAllOf0OptionsItems,
    ResponseCartLineItemsItemsPhysicalItemsItemsAllOf0OptionsItemsFromJSON,
    ResponseCartLineItemsItemsPhysicalItemsItemsAllOf0OptionsItemsFromJSONTyped,
    ResponseCartLineItemsItemsPhysicalItemsItemsAllOf0OptionsItemsToJSON,
    ResponseCartLineItemsItemsPhysicalItemsItemsAllOf1,
    ResponseCartLineItemsItemsPhysicalItemsItemsAllOf1FromJSON,
    ResponseCartLineItemsItemsPhysicalItemsItemsAllOf1FromJSONTyped,
    ResponseCartLineItemsItemsPhysicalItemsItemsAllOf1ToJSON,
    ResponseCartLineItemsPhysicalItemGiftWrapping,
    ResponseCartLineItemsPhysicalItemGiftWrappingFromJSON,
    ResponseCartLineItemsPhysicalItemGiftWrappingFromJSONTyped,
    ResponseCartLineItemsPhysicalItemGiftWrappingToJSON,
} from './';

/**
 * 
 * @export
 * @interface ResponseCartLineItemsItemsPhysicalItemsItems
 */
export interface ResponseCartLineItemsItemsPhysicalItemsItems {
    /**
     * The list of selected options for this product.
     * @type {Array<ResponseCartLineItemsItemsPhysicalItemsItemsAllOf0OptionsItems>}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    options?: Array<ResponseCartLineItemsItemsPhysicalItemsItemsAllOf0OptionsItems>;
    /**
     * The products brand
     * @type {string}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    brand?: string;
    /**
     * The total value of all coupons applied to this item.
     * @type {number}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    couponAmount?: number;
    /**
     * The total value of all discounts applied to this item (excluding coupon).
     * @type {number}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    discountAmount?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    discounts?: Array<object>;
    /**
     * Item's list price multiplied by the quantity.
     * @type {number}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    extendedListPrice?: number;
    /**
     * Item's sale price multiplied by the quantity.
     * @type {number}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    extendedSalePrice?: number;
    /**
     * The line-item ID.
     * @type {string}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    id?: string;
    /**
     * URL of an image of this item, accessible on the internet.
     * @type {string}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    imageUrl?: string;
    /**
     * Whether the item is taxable.
     * @type {boolean}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    isTaxable?: boolean;
    /**
     * The net item price before discounts and coupons. It is based on the product default price or sale price (if set) configured in BigCommerce Admin.
     * @type {number}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    listPrice?: number;
    /**
     * The item's product name.
     * @type {string}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    name?: string;
    /**
     * The product is part of a bundle such as a product pick list, then the parentId or the main product id will populate.
     * @type {number}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    parentId?: number;
    /**
     * ID of the product.
     * @type {number}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    productId?: number;
    /**
     * Quantity of this item.
     * @type {number}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    quantity: number;
    /**
     * Item's price after all discounts are applied. (The final price before tax calculation.)
     * @type {number}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    salePrice?: number;
    /**
     * SKU of the variant.
     * @type {string}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    sku?: string;
    /**
     * The product URL.
     * @type {string}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    url?: string;
    /**
     * ID of the variant.
     * @type {number}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    variantId?: number;
    /**
     * 
     * @type {ResponseCartLineItemsPhysicalItemGiftWrapping}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    giftWrapping?: ResponseCartLineItemsPhysicalItemGiftWrapping | null;
    /**
     * Whether this item requires shipping to a physical address.
     * @type {boolean}
     * @memberof ResponseCartLineItemsItemsPhysicalItemsItems
     */
    isShippingRequired?: boolean;
}

export function ResponseCartLineItemsItemsPhysicalItemsItemsFromJSON(json: any): ResponseCartLineItemsItemsPhysicalItemsItems {
    return ResponseCartLineItemsItemsPhysicalItemsItemsFromJSONTyped(json, false);
}

export function ResponseCartLineItemsItemsPhysicalItemsItemsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseCartLineItemsItemsPhysicalItemsItems {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'options': !exists(json, 'options') ? undefined : ((json['options'] as Array<any>).map(ResponseCartLineItemsItemsPhysicalItemsItemsAllOf0OptionsItemsFromJSON)),
        'brand': !exists(json, 'brand') ? undefined : json['brand'],
        'couponAmount': !exists(json, 'couponAmount') ? undefined : json['couponAmount'],
        'discountAmount': !exists(json, 'discountAmount') ? undefined : json['discountAmount'],
        'discounts': !exists(json, 'discounts') ? undefined : json['discounts'],
        'extendedListPrice': !exists(json, 'extendedListPrice') ? undefined : json['extendedListPrice'],
        'extendedSalePrice': !exists(json, 'extendedSalePrice') ? undefined : json['extendedSalePrice'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'isTaxable': !exists(json, 'isTaxable') ? undefined : json['isTaxable'],
        'listPrice': !exists(json, 'listPrice') ? undefined : json['listPrice'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'parentId': !exists(json, 'parentId') ? undefined : json['parentId'],
        'productId': !exists(json, 'productId') ? undefined : json['productId'],
        'quantity': json['quantity'],
        'salePrice': !exists(json, 'salePrice') ? undefined : json['salePrice'],
        'sku': !exists(json, 'sku') ? undefined : json['sku'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'variantId': !exists(json, 'variantId') ? undefined : json['variantId'],
        'giftWrapping': !exists(json, 'giftWrapping') ? undefined : ResponseCartLineItemsPhysicalItemGiftWrappingFromJSON(json['giftWrapping']),
        'isShippingRequired': !exists(json, 'isShippingRequired') ? undefined : json['isShippingRequired'],
    };
}

export function ResponseCartLineItemsItemsPhysicalItemsItemsToJSON(value?: ResponseCartLineItemsItemsPhysicalItemsItems | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'options': value.options === undefined ? undefined : ((value.options as Array<any>).map(ResponseCartLineItemsItemsPhysicalItemsItemsAllOf0OptionsItemsToJSON)),
        'brand': value.brand,
        'couponAmount': value.couponAmount,
        'discountAmount': value.discountAmount,
        'discounts': value.discounts,
        'extendedListPrice': value.extendedListPrice,
        'extendedSalePrice': value.extendedSalePrice,
        'id': value.id,
        'imageUrl': value.imageUrl,
        'isTaxable': value.isTaxable,
        'listPrice': value.listPrice,
        'name': value.name,
        'parentId': value.parentId,
        'productId': value.productId,
        'quantity': value.quantity,
        'salePrice': value.salePrice,
        'sku': value.sku,
        'url': value.url,
        'variantId': value.variantId,
        'giftWrapping': ResponseCartLineItemsPhysicalItemGiftWrappingToJSON(value.giftWrapping),
        'isShippingRequired': value.isShippingRequired,
    };
}



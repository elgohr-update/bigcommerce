/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Carts
 * Manage cart operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: Storefront
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ResponseCartCurrency,
    ResponseCartCurrencyFromJSON,
    ResponseCartCurrencyFromJSONTyped,
    ResponseCartCurrencyToJSON,
    ResponseCartLineItems,
    ResponseCartLineItemsFromJSON,
    ResponseCartLineItemsFromJSONTyped,
    ResponseCartLineItemsToJSON,
} from './';

/**
 * Cart object used in storefront cart responses.
 * @export
 * @interface ResponseCart
 */
export interface ResponseCart {
    /**
     * Cart ID, provided after creating a cart with a POST.
     * @type {string}
     * @memberof ResponseCart
     */
    id?: string;
    /**
     * ID of the customer to which the cart belongs.
     * @type {number}
     * @memberof ResponseCart
     */
    customerId?: number;
    /**
     * The cart's email. This is the same email that is used in the billing address
     * @type {string}
     * @memberof ResponseCart
     */
    email?: string;
    /**
     * 
     * @type {ResponseCartCurrency}
     * @memberof ResponseCart
     */
    currency?: ResponseCartCurrency;
    /**
     * Whether this item is taxable.
     * @type {boolean}
     * @memberof ResponseCart
     */
    isTaxIncluded?: boolean;
    /**
     * Cost of cart's contents, before applying discounts.
     * @type {number}
     * @memberof ResponseCart
     */
    baseAmount?: number;
    /**
     * Discounted amount.
     * @type {number}
     * @memberof ResponseCart
     */
    discountAmount?: number;
    /**
     * Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes (where applicable).
     * @type {number}
     * @memberof ResponseCart
     */
    cartAmount?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof ResponseCart
     */
    coupons?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof ResponseCart
     */
    discounts?: Array<object>;
    /**
     * 
     * @type {ResponseCartLineItems}
     * @memberof ResponseCart
     */
    lineItems?: ResponseCartLineItems;
    /**
     * Time when the cart was created.
     * @type {string}
     * @memberof ResponseCart
     */
    createdTime?: string;
    /**
     * Time when the cart was last updated.
     * @type {string}
     * @memberof ResponseCart
     */
    updatedTime?: string;
    /**
     * Locale of the cart.
     * @type {string}
     * @memberof ResponseCart
     */
    locale?: string;
}

export function ResponseCartFromJSON(json: any): ResponseCart {
    return ResponseCartFromJSONTyped(json, false);
}

export function ResponseCartFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseCart {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'customerId': !exists(json, 'customerId') ? undefined : json['customerId'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'currency': !exists(json, 'currency') ? undefined : ResponseCartCurrencyFromJSON(json['currency']),
        'isTaxIncluded': !exists(json, 'isTaxIncluded') ? undefined : json['isTaxIncluded'],
        'baseAmount': !exists(json, 'baseAmount') ? undefined : json['baseAmount'],
        'discountAmount': !exists(json, 'discountAmount') ? undefined : json['discountAmount'],
        'cartAmount': !exists(json, 'cartAmount') ? undefined : json['cartAmount'],
        'coupons': !exists(json, 'coupons') ? undefined : json['coupons'],
        'discounts': !exists(json, 'discounts') ? undefined : json['discounts'],
        'lineItems': !exists(json, 'lineItems') ? undefined : ResponseCartLineItemsFromJSON(json['lineItems']),
        'createdTime': !exists(json, 'createdTime') ? undefined : json['createdTime'],
        'updatedTime': !exists(json, 'updatedTime') ? undefined : json['updatedTime'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
    };
}

export function ResponseCartToJSON(value?: ResponseCart | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'customerId': value.customerId,
        'email': value.email,
        'currency': ResponseCartCurrencyToJSON(value.currency),
        'isTaxIncluded': value.isTaxIncluded,
        'baseAmount': value.baseAmount,
        'discountAmount': value.discountAmount,
        'cartAmount': value.cartAmount,
        'coupons': value.coupons,
        'discounts': value.discounts,
        'lineItems': ResponseCartLineItemsToJSON(value.lineItems),
        'createdTime': value.createdTime,
        'updatedTime': value.updatedTime,
        'locale': value.locale,
    };
}



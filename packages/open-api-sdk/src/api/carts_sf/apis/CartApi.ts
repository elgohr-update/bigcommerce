/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Carts
 * Manage cart operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: Storefront
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RequestCart,
    RequestCartFromJSON,
    RequestCartToJSON,
    ResponseCart,
    ResponseCartFromJSON,
    ResponseCartToJSON,
} from '../models';

export interface CreateACartRequest {
    cartData: RequestCart;
    include?: CreateACartIncludeEnum;
}

export interface DeleteACartRequest {
    cartId: string;
}

export interface GetACartRequest {
    include?: GetACartIncludeEnum;
}

/**
 * 
 */
export class CartApi extends runtime.BaseAPI {

    /**
     * Creates a *Cart*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Create a Cart
     */
    async createACartRaw(requestParameters: CreateACartRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResponseCart>> {
        if (requestParameters.cartData === null || requestParameters.cartData === undefined) {
            throw new runtime.RequiredError('cartData','Required parameter requestParameters.cartData was null or undefined when calling createACart.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/carts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RequestCartToJSON(requestParameters.cartData),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCartFromJSON(jsonValue));
    }

    /**
     * Creates a *Cart*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Create a Cart
     */
    async createACart(requestParameters: CreateACartRequest, initOverrides?: RequestInit): Promise<ResponseCart> {
        const response = await this.createACartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a *Cart*. Once a *Cart* has been deleted it can not be recovered.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Delete a Cart
     */
    async deleteACartRaw(requestParameters: DeleteACartRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResponseCart>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling deleteACart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCartFromJSON(jsonValue));
    }

    /**
     * Deletes a *Cart*. Once a *Cart* has been deleted it can not be recovered.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Delete a Cart
     */
    async deleteACart(requestParameters: DeleteACartRequest, initOverrides?: RequestInit): Promise<ResponseCart> {
        const response = await this.deleteACartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a *Cart*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Get a Cart
     */
    async getACartRaw(requestParameters: GetACartRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ResponseCart>>> {
        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResponseCartFromJSON));
    }

    /**
     * Returns a *Cart*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Get a Cart
     */
    async getACart(requestParameters: GetACartRequest, initOverrides?: RequestInit): Promise<Array<ResponseCart>> {
        const response = await this.getACartRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CreateACartIncludeEnum {
    PhysicalItemsOptions = 'lineItems.physicalItems.options',
    DigitalItemsOptions = 'lineItems.digitalItems.options',
    DigitalItemsOptionslineItemsPhysicalItemsOptions = 'lineItems.digitalItems.options,lineItems.physicalItems.options'
}
/**
    * @export
    * @enum {string}
    */
export enum GetACartIncludeEnum {
    PhysicalItemsOptions = 'lineItems.physicalItems.options',
    DigitalItemsOptions = 'lineItems.digitalItems.options',
    DigitalItemsOptionslineItemsPhysicalItemsOptions = 'lineItems.digitalItems.options,lineItems.physicalItems.options'
}

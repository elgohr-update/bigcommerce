/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Carts
 * Manage cart operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: Storefront
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Decimal,
    DecimalFromJSON,
    DecimalToJSON,
    LineItemsRequest,
    LineItemsRequestFromJSON,
    LineItemsRequestToJSON,
    RequestLineItemPut,
    RequestLineItemPutFromJSON,
    RequestLineItemPutToJSON,
    ResponseCart,
    ResponseCartFromJSON,
    ResponseCartToJSON,
} from '../models';

export interface AddCartLineItemRequest {
    cartId: string;
    include?: AddCartLineItemIncludeEnum;
    lineItemsRequest?: LineItemsRequest;
}

export interface DeleteCartLineItemRequest {
    cartId: string;
    itemId: Decimal;
    include?: DeleteCartLineItemIncludeEnum;
}

export interface UpdateCartLineItemRequest {
    cartId: string;
    itemId: Decimal;
    lineItem: RequestLineItemPut;
    include?: UpdateCartLineItemIncludeEnum;
}

/**
 * 
 */
export class CartItemsApi extends runtime.BaseAPI {

    /**
     * Adds a line items to the *Cart*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Add Cart Line Items
     */
    async addCartLineItemRaw(requestParameters: AddCartLineItemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResponseCart>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling addCartLineItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/carts/{cartId}/items`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LineItemsRequestToJSON(requestParameters.lineItemsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCartFromJSON(jsonValue));
    }

    /**
     * Adds a line items to the *Cart*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Add Cart Line Items
     */
    async addCartLineItem(requestParameters: AddCartLineItemRequest, initOverrides?: RequestInit): Promise<ResponseCart> {
        const response = await this.addCartLineItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a *Cart* line item.  Removing the last `line_item` in the *Cart* deletes the *Cart*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Delete Cart Line Item
     */
    async deleteCartLineItemRaw(requestParameters: DeleteCartLineItemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResponseCart>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling deleteCartLineItem.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling deleteCartLineItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carts/{cartId}/items/{itemId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCartFromJSON(jsonValue));
    }

    /**
     * Deletes a *Cart* line item.  Removing the last `line_item` in the *Cart* deletes the *Cart*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Delete Cart Line Item
     */
    async deleteCartLineItem(requestParameters: DeleteCartLineItemRequest, initOverrides?: RequestInit): Promise<ResponseCart> {
        const response = await this.deleteCartLineItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a *Cart* line item. Updates an existing, single line item quantity and the price of custom items in a cart.  If a modified product or variant needs to be changed or updated, you can remove and re-add the product to the cart with the correct variants using the [Delete Cart Line Item](https://developer.bigcommerce.com/api-reference/storefront/carts/cart-items/deletecartlineitem) and the [Add Cart Line Items](https://developer.bigcommerce.com/api-reference/storefront/carts/cart-items/addcartlineitem) endpoints.   <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Update Cart Line Item
     */
    async updateCartLineItemRaw(requestParameters: UpdateCartLineItemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResponseCart>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling updateCartLineItem.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateCartLineItem.');
        }

        if (requestParameters.lineItem === null || requestParameters.lineItem === undefined) {
            throw new runtime.RequiredError('lineItem','Required parameter requestParameters.lineItem was null or undefined when calling updateCartLineItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/carts/{cartId}/items/{itemId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RequestLineItemPutToJSON(requestParameters.lineItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseCartFromJSON(jsonValue));
    }

    /**
     * Updates a *Cart* line item. Updates an existing, single line item quantity and the price of custom items in a cart.  If a modified product or variant needs to be changed or updated, you can remove and re-add the product to the cart with the correct variants using the [Delete Cart Line Item](https://developer.bigcommerce.com/api-reference/storefront/carts/cart-items/deletecartlineitem) and the [Add Cart Line Items](https://developer.bigcommerce.com/api-reference/storefront/carts/cart-items/addcartlineitem) endpoints.   <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Update Cart Line Item
     */
    async updateCartLineItem(requestParameters: UpdateCartLineItemRequest, initOverrides?: RequestInit): Promise<ResponseCart> {
        const response = await this.updateCartLineItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum AddCartLineItemIncludeEnum {
    PhysicalItemsOptions = 'lineItems.physicalItems.options',
    DigitalItemsOptions = 'lineItems.digitalItems.options',
    DigitalItemsOptionslineItemsPhysicalItemsOptions = 'lineItems.digitalItems.options,lineItems.physicalItems.options'
}
/**
    * @export
    * @enum {string}
    */
export enum DeleteCartLineItemIncludeEnum {
    PhysicalItemsOptions = 'lineItems.physicalItems.options',
    DigitalItemsOptions = 'lineItems.digitalItems.options',
    DigitalItemsOptionslineItemsPhysicalItemsOptions = 'lineItems.digitalItems.options,lineItems.physicalItems.options'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateCartLineItemIncludeEnum {
    PhysicalItemsOptions = 'lineItems.physicalItems.options',
    DigitalItemsOptions = 'lineItems.digitalItems.options',
    DigitalItemsOptionslineItemsPhysicalItemsOptions = 'lineItems.digitalItems.options,lineItems.physicalItems.options'
}

/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Orders
 * Get order data immediately after an order is placed on the storefront.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressProperties,
    AddressPropertiesFromJSON,
    AddressPropertiesFromJSONTyped,
    AddressPropertiesToJSON,
    AppliedCoupon,
    AppliedCouponFromJSON,
    AppliedCouponFromJSONTyped,
    AppliedCouponToJSON,
    Currency,
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    OrderLineItem,
    OrderLineItemFromJSON,
    OrderLineItemFromJSONTyped,
    OrderLineItemToJSON,
    OrderTaxes,
    OrderTaxesFromJSON,
    OrderTaxesFromJSONTyped,
    OrderTaxesToJSON,
    Status,
    StatusFromJSON,
    StatusFromJSONTyped,
    StatusToJSON,
} from './';

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    orderId?: number;
    /**
     * The Id of cart that was converted to order.
     * @type {string}
     * @memberof Order
     */
    cartId?: string;
    /**
     * 
     * @type {Currency}
     * @memberof Order
     */
    currency?: Currency;
    /**
     * Whether this item is taxable.
     * @type {boolean}
     * @memberof Order
     */
    isTaxIncluded?: boolean;
    /**
     * Cost of cart's contents, before applying discounts.
     * @type {number}
     * @memberof Order
     */
    baseAmount?: number;
    /**
     * Discounted amount.
     * @type {number}
     * @memberof Order
     */
    discountAmount?: number;
    /**
     * Gift wrapping for all items, including or excluding tax.
     * @type {number}
     * @memberof Order
     */
    giftWrappingCostTotal?: number;
    /**
     * Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes (where applicable).
     * @type {number}
     * @memberof Order
     */
    orderAmount?: number;
    /**
     * Order amount represented in integer. Eg. 1234 for $12.34
     * @type {number}
     * @memberof Order
     */
    orderAmountAsInteger?: number;
    /**
     * Array of `AppliedCoupon` objects applied to this cart.
     * @type {Array<AppliedCoupon>}
     * @memberof Order
     */
    coupons?: Array<AppliedCoupon>;
    /**
     * Array of `LineItem` objects.
     * @type {Array<OrderLineItem>}
     * @memberof Order
     */
    lineItems?: Array<OrderLineItem>;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    customerId?: string;
    /**
     * 
     * @type {AddressProperties}
     * @memberof Order
     */
    billingAddress?: AddressProperties;
    /**
     * 
     * @type {Status}
     * @memberof Order
     */
    status?: Status;
    /**
     * Specifies whether this order has at least one digital item.
     * @type {boolean}
     * @memberof Order
     */
    hasDigitalItems?: boolean;
    /**
     * Specifies whether this order is fully paid, so that digital items can be downloaded.
     * @type {boolean}
     * @memberof Order
     */
    isDownloadable?: boolean;
    /**
     * Specifies whether this order is complete and ready to be taken to the order confirmation page.
     * @type {boolean}
     * @memberof Order
     */
    isComplete?: boolean;
    /**
     * Shopper's provided message for the order
     * @type {string}
     * @memberof Order
     */
    customerMessage?: string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    shippingCostTotal?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    shippingCostBeforeDiscount?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    handlingCostTotal?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    customerCanBeCreated?: boolean;
    /**
     * 
     * @type {Array<OrderTaxes>}
     * @memberof Order
     */
    taxes?: Array<OrderTaxes>;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    taxTotal?: number;
    /**
     * Id of the channel which the order belongs to.
     * @type {number}
     * @memberof Order
     */
    channelId?: number;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'orderId': !exists(json, 'orderId') ? undefined : json['orderId'],
        'cartId': !exists(json, 'cartId') ? undefined : json['cartId'],
        'currency': !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
        'isTaxIncluded': !exists(json, 'isTaxIncluded') ? undefined : json['isTaxIncluded'],
        'baseAmount': !exists(json, 'baseAmount') ? undefined : json['baseAmount'],
        'discountAmount': !exists(json, 'discountAmount') ? undefined : json['discountAmount'],
        'giftWrappingCostTotal': !exists(json, 'giftWrappingCostTotal') ? undefined : json['giftWrappingCostTotal'],
        'orderAmount': !exists(json, 'orderAmount') ? undefined : json['orderAmount'],
        'orderAmountAsInteger': !exists(json, 'orderAmountAsInteger') ? undefined : json['orderAmountAsInteger'],
        'coupons': !exists(json, 'coupons') ? undefined : ((json['coupons'] as Array<any>).map(AppliedCouponFromJSON)),
        'lineItems': !exists(json, 'lineItems') ? undefined : ((json['lineItems'] as Array<any>).map(OrderLineItemFromJSON)),
        'customerId': !exists(json, 'customerId') ? undefined : json['customerId'],
        'billingAddress': !exists(json, 'billingAddress') ? undefined : AddressPropertiesFromJSON(json['billingAddress']),
        'status': !exists(json, 'status') ? undefined : StatusFromJSON(json['status']),
        'hasDigitalItems': !exists(json, 'hasDigitalItems') ? undefined : json['hasDigitalItems'],
        'isDownloadable': !exists(json, 'isDownloadable') ? undefined : json['isDownloadable'],
        'isComplete': !exists(json, 'isComplete') ? undefined : json['isComplete'],
        'customerMessage': !exists(json, 'customerMessage') ? undefined : json['customerMessage'],
        'shippingCostTotal': !exists(json, 'shippingCostTotal') ? undefined : json['shippingCostTotal'],
        'shippingCostBeforeDiscount': !exists(json, 'shippingCostBeforeDiscount') ? undefined : json['shippingCostBeforeDiscount'],
        'handlingCostTotal': !exists(json, 'handlingCostTotal') ? undefined : json['handlingCostTotal'],
        'customerCanBeCreated': !exists(json, 'customerCanBeCreated') ? undefined : json['customerCanBeCreated'],
        'taxes': !exists(json, 'taxes') ? undefined : ((json['taxes'] as Array<any>).map(OrderTaxesFromJSON)),
        'taxTotal': !exists(json, 'taxTotal') ? undefined : json['taxTotal'],
        'channelId': !exists(json, 'channelId') ? undefined : json['channelId'],
    };
}

export function OrderToJSON(value?: Order | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'orderId': value.orderId,
        'cartId': value.cartId,
        'currency': CurrencyToJSON(value.currency),
        'isTaxIncluded': value.isTaxIncluded,
        'baseAmount': value.baseAmount,
        'discountAmount': value.discountAmount,
        'giftWrappingCostTotal': value.giftWrappingCostTotal,
        'orderAmount': value.orderAmount,
        'orderAmountAsInteger': value.orderAmountAsInteger,
        'coupons': value.coupons === undefined ? undefined : ((value.coupons as Array<any>).map(AppliedCouponToJSON)),
        'lineItems': value.lineItems === undefined ? undefined : ((value.lineItems as Array<any>).map(OrderLineItemToJSON)),
        'customerId': value.customerId,
        'billingAddress': AddressPropertiesToJSON(value.billingAddress),
        'status': StatusToJSON(value.status),
        'hasDigitalItems': value.hasDigitalItems,
        'isDownloadable': value.isDownloadable,
        'isComplete': value.isComplete,
        'customerMessage': value.customerMessage,
        'shippingCostTotal': value.shippingCostTotal,
        'shippingCostBeforeDiscount': value.shippingCostBeforeDiscount,
        'handlingCostTotal': value.handlingCostTotal,
        'customerCanBeCreated': value.customerCanBeCreated,
        'taxes': value.taxes === undefined ? undefined : ((value.taxes as Array<any>).map(OrderTaxesToJSON)),
        'taxTotal': value.taxTotal,
        'channelId': value.channelId,
    };
}



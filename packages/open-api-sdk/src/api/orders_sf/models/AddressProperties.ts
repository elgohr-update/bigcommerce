/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Orders
 * Get order data immediately after an order is placed on the storefront.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CustomField,
    CustomFieldFromJSON,
    CustomFieldFromJSONTyped,
    CustomFieldToJSON,
} from './';

/**
 * 
 * @export
 * @interface AddressProperties
 */
export interface AddressProperties {
    /**
     * 
     * @type {string}
     * @memberof AddressProperties
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressProperties
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressProperties
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressProperties
     */
    company?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressProperties
     */
    address1?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressProperties
     */
    address2?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressProperties
     */
    city?: string;
    /**
     * Represents state or province.
     * @type {string}
     * @memberof AddressProperties
     */
    stateOrProvince?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressProperties
     */
    stateOrProvinceCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressProperties
     */
    country?: string;
    /**
     * ISO 3166-1 alpha-2 country code. (See: https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
     * @type {string}
     * @memberof AddressProperties
     */
    countryCode: string;
    /**
     * 
     * @type {string}
     * @memberof AddressProperties
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof AddressProperties
     */
    phone?: string;
    /**
     * 
     * @type {Array<CustomField>}
     * @memberof AddressProperties
     */
    customFields?: Array<CustomField>;
}

export function AddressPropertiesFromJSON(json: any): AddressProperties {
    return AddressPropertiesFromJSONTyped(json, false);
}

export function AddressPropertiesFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddressProperties {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'address1': !exists(json, 'address1') ? undefined : json['address1'],
        'address2': !exists(json, 'address2') ? undefined : json['address2'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'stateOrProvince': !exists(json, 'stateOrProvince') ? undefined : json['stateOrProvince'],
        'stateOrProvinceCode': !exists(json, 'stateOrProvinceCode') ? undefined : json['stateOrProvinceCode'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'countryCode': json['countryCode'],
        'postalCode': !exists(json, 'postalCode') ? undefined : json['postalCode'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'customFields': !exists(json, 'customFields') ? undefined : ((json['customFields'] as Array<any>).map(CustomFieldFromJSON)),
    };
}

export function AddressPropertiesToJSON(value?: AddressProperties | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'firstName': value.firstName,
        'lastName': value.lastName,
        'email': value.email,
        'company': value.company,
        'address1': value.address1,
        'address2': value.address2,
        'city': value.city,
        'stateOrProvince': value.stateOrProvince,
        'stateOrProvinceCode': value.stateOrProvinceCode,
        'country': value.country,
        'countryCode': value.countryCode,
        'postalCode': value.postalCode,
        'phone': value.phone,
        'customFields': value.customFields === undefined ? undefined : ((value.customFields as Array<any>).map(CustomFieldToJSON)),
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Customers V2
 * Create and Manage Customers, Customer Addresses, and Customer Groups. Additionally, validate customer passwords. To learn more about Customers see [here](/api-docs/customers/customers-subscribers-overview).  - [Authentication](#authentication) - [Available Endpoints](#available-endpoints) - [Usage Notes](#usage-notes) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Available Endpoints | Resource / Endpoint                     | Description | |-----------------------------------------|-------------------------------------------------------------------------------| | Customers                               | Identity and account details for customers shopping on BigCommerce stores     | | Customers Addresses                     | Postal address belonging to a customer.                                       | | Customers Groups                        | Groupings of customers who share the same level of access and discounts       | | Customers Validate Password             | Validate customer passwords                                                   |  ## Usage Notes  **Customer Groups** * Customer Groups are only available on specific plans.  **Customers vs. Subscribers** * A subscriber is not always a customer. Someone can sign up for the newsletter only and not create an account. * A customer is not always a subscriber. Signing up for the newsletter is a separate action from creating an account and purchasing an item. * A customer and a subscriber can be the same. If a shopper checks out on the storefront, creates an account and opts into the newsletter, they are a customer and a subscriber.  ## Resources  ### Related APIs / Endpoints   [Customer Login API](https://developer.bigcommerce.com/api-docs/customers/customer-login-api) - [Current Customer API](https://developer.bigcommerce.com/api-docs/customers/current-customer-api) - [Customers API (v3)](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api) - [Subscribers API](https://developer.bigcommerce.com/api-reference/customer-subscribers/subscribers-api)  ### Webhooks - [Customers](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events#webhook-events_customer)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CountFull,
    CountFullFromJSON,
    CountFullToJSON,
    CustomerGroupFull,
    CustomerGroupFullFromJSON,
    CustomerGroupFullToJSON,
    CustomerGroupPost,
    CustomerGroupPostFromJSON,
    CustomerGroupPostToJSON,
} from '../models';

export interface CreateACustomerGroupRequest {
    accept: string;
    contentType: string;
    xAuthClient: string;
    xAuthToken: string;
    body: CustomerGroupPost;
}

export interface DeleteACustomerGroupRequest {
    customerGroupId: number;
    accept: string;
    contentType: string;
}

export interface DeleteAllCustomerGroupsRequest {
    accept: string;
    contentType: string;
}

export interface GetACountOfCustomerGroupsRequest {
    accept: string;
    contentType: string;
}

export interface GetACustomerGroupRequest {
    customerGroupId: number;
    accept: string;
    contentType: string;
    page?: number;
    limit?: number;
    name?: string;
    isDefault?: boolean;
}

export interface GetAllCustomerGroupsRequest {
    accept: string;
    contentType: string;
    page?: number;
    limit?: number;
    name?: string;
    isDefault?: boolean;
    isGroupForGuests?: boolean;
}

export interface UpdateACustomerGroupRequest {
    customerGroupId: number;
    accepts: string;
    contentType: string;
    body?: CustomerGroupPost;
}

/**
 * 
 */
export class CustomerGroupsApi extends runtime.BaseAPI {

    /**
     * Creates a *Customer Group*.  **Required Fields** * name
     * Create a Customer Group
     */
    async createACustomerGroupRaw(requestParameters: CreateACustomerGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerGroupFull>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling createACustomerGroup.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling createACustomerGroup.');
        }

        if (requestParameters.xAuthClient === null || requestParameters.xAuthClient === undefined) {
            throw new runtime.RequiredError('xAuthClient','Required parameter requestParameters.xAuthClient was null or undefined when calling createACustomerGroup.');
        }

        if (requestParameters.xAuthToken === null || requestParameters.xAuthToken === undefined) {
            throw new runtime.RequiredError('xAuthToken','Required parameter requestParameters.xAuthToken was null or undefined when calling createACustomerGroup.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createACustomerGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (requestParameters.xAuthClient !== undefined && requestParameters.xAuthClient !== null) {
            headerParameters['X-Auth-Client'] = String(requestParameters.xAuthClient);
        }

        if (requestParameters.xAuthToken !== undefined && requestParameters.xAuthToken !== null) {
            headerParameters['X-Auth-Token'] = String(requestParameters.xAuthToken);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customer_groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerGroupPostToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerGroupFullFromJSON(jsonValue));
    }

    /**
     * Creates a *Customer Group*.  **Required Fields** * name
     * Create a Customer Group
     */
    async createACustomerGroup(requestParameters: CreateACustomerGroupRequest, initOverrides?: RequestInit): Promise<CustomerGroupFull> {
        const response = await this.createACustomerGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a *Customer Group*.  **Notes**  All existing customers are unassigned from the group when it is deleted.
     * Delete a Customer Group
     */
    async deleteACustomerGroupRaw(requestParameters: DeleteACustomerGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customerGroupId === null || requestParameters.customerGroupId === undefined) {
            throw new runtime.RequiredError('customerGroupId','Required parameter requestParameters.customerGroupId was null or undefined when calling deleteACustomerGroup.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteACustomerGroup.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteACustomerGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customer_groups/{customer_group_id}`.replace(`{${"customer_group_id"}}`, encodeURIComponent(String(requestParameters.customerGroupId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a *Customer Group*.  **Notes**  All existing customers are unassigned from the group when it is deleted.
     * Delete a Customer Group
     */
    async deleteACustomerGroup(requestParameters: DeleteACustomerGroupRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteACustomerGroupRaw(requestParameters, initOverrides);
    }

    /**
     * By default, it deletes all *Customer Groups*.  All existing customers are unassigned from the group when it is deleted.
     * Delete Customer Groups
     */
    async deleteAllCustomerGroupsRaw(requestParameters: DeleteAllCustomerGroupsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteAllCustomerGroups.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteAllCustomerGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customer_groups`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * By default, it deletes all *Customer Groups*.  All existing customers are unassigned from the group when it is deleted.
     * Delete Customer Groups
     */
    async deleteAllCustomerGroups(requestParameters: DeleteAllCustomerGroupsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAllCustomerGroupsRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a count of all *Customer Groups*. 
     * Get a Count of Customer Groups
     */
    async getACountOfCustomerGroupsRaw(requestParameters: GetACountOfCustomerGroupsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CountFull>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getACountOfCustomerGroups.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getACountOfCustomerGroups.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customer_groups/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountFullFromJSON(jsonValue));
    }

    /**
     * Returns a count of all *Customer Groups*. 
     * Get a Count of Customer Groups
     */
    async getACountOfCustomerGroups(requestParameters: GetACountOfCustomerGroupsRequest, initOverrides?: RequestInit): Promise<CountFull> {
        const response = await this.getACountOfCustomerGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a *Customer Group*.
     * Get a Customer Group
     */
    async getACustomerGroupRaw(requestParameters: GetACustomerGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerGroupFull>> {
        if (requestParameters.customerGroupId === null || requestParameters.customerGroupId === undefined) {
            throw new runtime.RequiredError('customerGroupId','Required parameter requestParameters.customerGroupId was null or undefined when calling getACustomerGroup.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getACustomerGroup.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getACustomerGroup.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.isDefault !== undefined) {
            queryParameters['is_default'] = requestParameters.isDefault;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customer_groups/{customer_group_id}`.replace(`{${"customer_group_id"}}`, encodeURIComponent(String(requestParameters.customerGroupId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerGroupFullFromJSON(jsonValue));
    }

    /**
     * Returns a *Customer Group*.
     * Get a Customer Group
     */
    async getACustomerGroup(requestParameters: GetACustomerGroupRequest, initOverrides?: RequestInit): Promise<CustomerGroupFull> {
        const response = await this.getACustomerGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of *Customer Groups*. Default sorting is by customer-group id, from lowest to highest.
     * Get All Customer Groups
     */
    async getAllCustomerGroupsRaw(requestParameters: GetAllCustomerGroupsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CustomerGroupFull>>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getAllCustomerGroups.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getAllCustomerGroups.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.isDefault !== undefined) {
            queryParameters['is_default'] = requestParameters.isDefault;
        }

        if (requestParameters.isGroupForGuests !== undefined) {
            queryParameters['is_group_for_guests'] = requestParameters.isGroupForGuests;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customer_groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerGroupFullFromJSON));
    }

    /**
     * Returns a list of *Customer Groups*. Default sorting is by customer-group id, from lowest to highest.
     * Get All Customer Groups
     */
    async getAllCustomerGroups(requestParameters: GetAllCustomerGroupsRequest, initOverrides?: RequestInit): Promise<Array<CustomerGroupFull>> {
        const response = await this.getAllCustomerGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a *Customer Group*.  **Notes**  Any combination of fields can be updated at once. Discount rules are treated in bulk. The entire set of rules is overwritten when a request is sent.
     * Update a Customer Group
     */
    async updateACustomerGroupRaw(requestParameters: UpdateACustomerGroupRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerGroupFull>> {
        if (requestParameters.customerGroupId === null || requestParameters.customerGroupId === undefined) {
            throw new runtime.RequiredError('customerGroupId','Required parameter requestParameters.customerGroupId was null or undefined when calling updateACustomerGroup.');
        }

        if (requestParameters.accepts === null || requestParameters.accepts === undefined) {
            throw new runtime.RequiredError('accepts','Required parameter requestParameters.accepts was null or undefined when calling updateACustomerGroup.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling updateACustomerGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accepts !== undefined && requestParameters.accepts !== null) {
            headerParameters['Accepts'] = String(requestParameters.accepts);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customer_groups/{customer_group_id}`.replace(`{${"customer_group_id"}}`, encodeURIComponent(String(requestParameters.customerGroupId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerGroupPostToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerGroupFullFromJSON(jsonValue));
    }

    /**
     * Updates a *Customer Group*.  **Notes**  Any combination of fields can be updated at once. Discount rules are treated in bulk. The entire set of rules is overwritten when a request is sent.
     * Update a Customer Group
     */
    async updateACustomerGroup(requestParameters: UpdateACustomerGroupRequest, initOverrides?: RequestInit): Promise<CustomerGroupFull> {
        const response = await this.updateACustomerGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Customers V2
 * Create and Manage Customers, Customer Addresses, and Customer Groups. Additionally, validate customer passwords. To learn more about Customers see [here](/api-docs/customers/customers-subscribers-overview).  - [Authentication](#authentication) - [Available Endpoints](#available-endpoints) - [Usage Notes](#usage-notes) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Available Endpoints | Resource / Endpoint                     | Description | |-----------------------------------------|-------------------------------------------------------------------------------| | Customers                               | Identity and account details for customers shopping on BigCommerce stores     | | Customers Addresses                     | Postal address belonging to a customer.                                       | | Customers Groups                        | Groupings of customers who share the same level of access and discounts       | | Customers Validate Password             | Validate customer passwords                                                   |  ## Usage Notes  **Customer Groups** * Customer Groups are only available on specific plans.  **Customers vs. Subscribers** * A subscriber is not always a customer. Someone can sign up for the newsletter only and not create an account. * A customer is not always a subscriber. Signing up for the newsletter is a separate action from creating an account and purchasing an item. * A customer and a subscriber can be the same. If a shopper checks out on the storefront, creates an account and opts into the newsletter, they are a customer and a subscriber.  ## Resources  ### Related APIs / Endpoints   [Customer Login API](https://developer.bigcommerce.com/api-docs/customers/customer-login-api) - [Current Customer API](https://developer.bigcommerce.com/api-docs/customers/current-customer-api) - [Customers API (v3)](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api) - [Subscribers API](https://developer.bigcommerce.com/api-reference/customer-subscribers/subscribers-api)  ### Webhooks - [Customers](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events#webhook-events_customer)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CountFull,
    CountFullFromJSON,
    CountFullToJSON,
    CustomerAddress,
    CustomerAddressFromJSON,
    CustomerAddressToJSON,
    CustomerAddressBase,
    CustomerAddressBaseFromJSON,
    CustomerAddressBaseToJSON,
    CustomerAddressFull,
    CustomerAddressFullFromJSON,
    CustomerAddressFullToJSON,
} from '../models';

export interface CreateACustomerAddressRequest {
    customerId: number;
    accept: string;
    contentType: string;
    body: CustomerAddressBase;
}

export interface DeleteAllCustomerAddressesRequest {
    customerId: number;
    accept: string;
    contentType: string;
    page?: number;
    limit?: number;
}

export interface DeletesACustomerAddressRequest {
    customerId: number;
    accept: string;
    contentType: string;
    customerAddressId: number;
}

export interface GetACountofCustomerAddressesRequest {
    customerId: number;
    accept: string;
    contentType: string;
    page?: number;
    limit?: number;
}

export interface GetACustomerAddressRequest {
    customerAddressId: number;
    customerId: number;
    accept: string;
    contentType: string;
    page?: number;
    limit?: number;
}

export interface GetAllCustomerAddressesRequest {
    customerId: number;
    accept: string;
    contentType: string;
    page?: number;
    limit?: number;
}

export interface UpdateACustomerAddressRequest {
    customerId: number;
    accept: string;
    contentType: string;
    customerAddressId: number;
    body: CustomerAddress;
}

/**
 * 
 */
export class CustomerAddressesApi extends runtime.BaseAPI {

    /**
     * Creates a new *Customer Address*. (Note: The “state” property cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)  **Required Fields** *   first_name *   last_name *   phone *   street_1 *   city *   state *   zip *   country  **Read Only Fields** *   id *   country_iso2
     * Create a Customer Address
     */
    async createACustomerAddressRaw(requestParameters: CreateACustomerAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerAddressFull>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling createACustomerAddress.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling createACustomerAddress.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling createACustomerAddress.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createACustomerAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customer_id}/addresses`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerAddressBaseToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAddressFullFromJSON(jsonValue));
    }

    /**
     * Creates a new *Customer Address*. (Note: The “state” property cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)  **Required Fields** *   first_name *   last_name *   phone *   street_1 *   city *   state *   zip *   country  **Read Only Fields** *   id *   country_iso2
     * Create a Customer Address
     */
    async createACustomerAddress(requestParameters: CreateACustomerAddressRequest, initOverrides?: RequestInit): Promise<CustomerAddressFull> {
        const response = await this.createACustomerAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * By default, it deletes all *Customer Addresses*.
     * Delete Customer Address
     */
    async deleteAllCustomerAddressesRaw(requestParameters: DeleteAllCustomerAddressesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling deleteAllCustomerAddresses.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteAllCustomerAddresses.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteAllCustomerAddresses.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customer_id}/addresses`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * By default, it deletes all *Customer Addresses*.
     * Delete Customer Address
     */
    async deleteAllCustomerAddresses(requestParameters: DeleteAllCustomerAddressesRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAllCustomerAddressesRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a *Customer Address*.
     * Delete a Customer Address
     */
    async deletesACustomerAddressRaw(requestParameters: DeletesACustomerAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling deletesACustomerAddress.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deletesACustomerAddress.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deletesACustomerAddress.');
        }

        if (requestParameters.customerAddressId === null || requestParameters.customerAddressId === undefined) {
            throw new runtime.RequiredError('customerAddressId','Required parameter requestParameters.customerAddressId was null or undefined when calling deletesACustomerAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customer_id}/addresses/{customer_address_id}`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"customer_address_id"}}`, encodeURIComponent(String(requestParameters.customerAddressId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a *Customer Address*.
     * Delete a Customer Address
     */
    async deletesACustomerAddress(requestParameters: DeletesACustomerAddressRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deletesACustomerAddressRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a count of addresses for a customer.
     * Get a Count of Customer Addresses
     */
    async getACountofCustomerAddressesRaw(requestParameters: GetACountofCustomerAddressesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CountFull>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getACountofCustomerAddresses.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getACountofCustomerAddresses.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getACountofCustomerAddresses.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customer_id}/addresses/count`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountFullFromJSON(jsonValue));
    }

    /**
     * Returns a count of addresses for a customer.
     * Get a Count of Customer Addresses
     */
    async getACountofCustomerAddresses(requestParameters: GetACountofCustomerAddressesRequest, initOverrides?: RequestInit): Promise<CountFull> {
        const response = await this.getACountofCustomerAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a *Customer Address*.
     * Get a Customer Address
     */
    async getACustomerAddressRaw(requestParameters: GetACustomerAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerAddressFull>> {
        if (requestParameters.customerAddressId === null || requestParameters.customerAddressId === undefined) {
            throw new runtime.RequiredError('customerAddressId','Required parameter requestParameters.customerAddressId was null or undefined when calling getACustomerAddress.');
        }

        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getACustomerAddress.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getACustomerAddress.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getACustomerAddress.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customer_id}/addresses/{customer_address_id}`.replace(`{${"customer_address_id"}}`, encodeURIComponent(String(requestParameters.customerAddressId))).replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAddressFullFromJSON(jsonValue));
    }

    /**
     * Returns a *Customer Address*.
     * Get a Customer Address
     */
    async getACustomerAddress(requestParameters: GetACustomerAddressRequest, initOverrides?: RequestInit): Promise<CustomerAddressFull> {
        const response = await this.getACustomerAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of *Customer Addresses*. Returns the addresses belonging to a customer. Default sorting is by address id, from lowest to highest.  The maximum limit is 250. If a limit isn’t provided, up to 50 `customer_addresses` are returned by default.
     * Get All Customer Addresses
     */
    async getAllCustomerAddressesRaw(requestParameters: GetAllCustomerAddressesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CustomerAddressFull>>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getAllCustomerAddresses.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getAllCustomerAddresses.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getAllCustomerAddresses.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customer_id}/addresses`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerAddressFullFromJSON));
    }

    /**
     * Returns a list of *Customer Addresses*. Returns the addresses belonging to a customer. Default sorting is by address id, from lowest to highest.  The maximum limit is 250. If a limit isn’t provided, up to 50 `customer_addresses` are returned by default.
     * Get All Customer Addresses
     */
    async getAllCustomerAddresses(requestParameters: GetAllCustomerAddressesRequest, initOverrides?: RequestInit): Promise<Array<CustomerAddressFull>> {
        const response = await this.getAllCustomerAddressesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a *Customer Address*.  **Read Only Fields** *   id *   country_iso2
     * Update a Customer Address
     */
    async updateACustomerAddressRaw(requestParameters: UpdateACustomerAddressRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerAddressFull>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling updateACustomerAddress.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling updateACustomerAddress.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling updateACustomerAddress.');
        }

        if (requestParameters.customerAddressId === null || requestParameters.customerAddressId === undefined) {
            throw new runtime.RequiredError('customerAddressId','Required parameter requestParameters.customerAddressId was null or undefined when calling updateACustomerAddress.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateACustomerAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customer_id}/addresses/{customer_address_id}`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"customer_address_id"}}`, encodeURIComponent(String(requestParameters.customerAddressId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerAddressToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAddressFullFromJSON(jsonValue));
    }

    /**
     * Updates a *Customer Address*.  **Read Only Fields** *   id *   country_iso2
     * Update a Customer Address
     */
    async updateACustomerAddress(requestParameters: UpdateACustomerAddressRequest, initOverrides?: RequestInit): Promise<CustomerAddressFull> {
        const response = await this.updateACustomerAddressRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Customers V2
 * Create and Manage Customers, Customer Addresses, and Customer Groups. Additionally, validate customer passwords. To learn more about Customers see [here](/api-docs/customers/customers-subscribers-overview).  - [Authentication](#authentication) - [Available Endpoints](#available-endpoints) - [Usage Notes](#usage-notes) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Available Endpoints | Resource / Endpoint                     | Description | |-----------------------------------------|-------------------------------------------------------------------------------| | Customers                               | Identity and account details for customers shopping on BigCommerce stores     | | Customers Addresses                     | Postal address belonging to a customer.                                       | | Customers Groups                        | Groupings of customers who share the same level of access and discounts       | | Customers Validate Password             | Validate customer passwords                                                   |  ## Usage Notes  **Customer Groups** * Customer Groups are only available on specific plans.  **Customers vs. Subscribers** * A subscriber is not always a customer. Someone can sign up for the newsletter only and not create an account. * A customer is not always a subscriber. Signing up for the newsletter is a separate action from creating an account and purchasing an item. * A customer and a subscriber can be the same. If a shopper checks out on the storefront, creates an account and opts into the newsletter, they are a customer and a subscriber.  ## Resources  ### Related APIs / Endpoints   [Customer Login API](https://developer.bigcommerce.com/api-docs/customers/customer-login-api) - [Current Customer API](https://developer.bigcommerce.com/api-docs/customers/current-customer-api) - [Customers API (v3)](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api) - [Subscribers API](https://developer.bigcommerce.com/api-reference/customer-subscribers/subscribers-api)  ### Webhooks - [Customers](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events#webhook-events_customer)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CountFull,
    CountFullFromJSON,
    CountFullToJSON,
    CustomerBase,
    CustomerBaseFromJSON,
    CustomerBaseToJSON,
    CustomerFull,
    CustomerFullFromJSON,
    CustomerFullToJSON,
    Customers,
    CustomersFromJSON,
    CustomersToJSON,
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
} from '../models';

export interface CreateANewCustomerRequest {
    accept: string;
    contentType: string;
    body: InlineObject;
}

export interface DeleteACustomerRequest {
    customerId: number;
    accept: string;
    contentType: string;
}

export interface DeleteAllCustomersRequest {
    accept: string;
    contentType: string;
}

export interface GetACountOfCustomersRequest {
    accept: string;
    contentType: string;
}

export interface GetACustomerRequest {
    customerId: number;
    accept: string;
    contentType: string;
}

export interface GetAllCustomersRequest {
    accept: string;
    contentType: string;
    firstName?: string;
    lastName?: string;
    company?: string;
    email?: string;
    phone?: string;
    storeCredit?: string;
    customerGroupId?: number;
    minId?: number;
    maxId?: number;
    minDateCreated?: Date;
    maxDateCreated?: Date;
    minDateModified?: Date;
    maxDateModified?: Date;
    taxExemptCategory?: string;
}

export interface UpdateACustomerRequest {
    customerId: number;
    accept?: string;
    contentType?: string;
    body?: Customers;
}

/**
 * 
 */
export class CustomersApi extends runtime.BaseAPI {

    /**
     * Creates a *Customer*.  **Required Fields** *   `first_name` *   `last_name` *   `email`  **Read Only Fields** *   `id` *   `date_created` *   `date_modified` *   `accepts_marketing` *   `addresses` *   `form_fields`  ## Notes  The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.  When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.  ## Updating Passwords  To manually update a customer password in the same way as the control panel, supply a value for the password field:  ```json {     \"_authentication\": {         \"password\": \"12w69Y217PYR96J\"     } } ```  ## Confirming Passwords  An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:  ```json {     \"_authentication\": {        \"password\": \"12w69Y217PYR96J\",        \"password_confirmation\": \"12w69Y217PYR96J\"     } } ```  ## Forcing Password Resets  To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:  ```json {     \"_authentication\": {         \"force_reset\": true     } }
     * Create a New Customer
     */
    async createANewCustomerRaw(requestParameters: CreateANewCustomerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerFull>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling createANewCustomer.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling createANewCustomer.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createANewCustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerFullFromJSON(jsonValue));
    }

    /**
     * Creates a *Customer*.  **Required Fields** *   `first_name` *   `last_name` *   `email`  **Read Only Fields** *   `id` *   `date_created` *   `date_modified` *   `accepts_marketing` *   `addresses` *   `form_fields`  ## Notes  The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.  When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.  ## Updating Passwords  To manually update a customer password in the same way as the control panel, supply a value for the password field:  ```json {     \"_authentication\": {         \"password\": \"12w69Y217PYR96J\"     } } ```  ## Confirming Passwords  An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:  ```json {     \"_authentication\": {        \"password\": \"12w69Y217PYR96J\",        \"password_confirmation\": \"12w69Y217PYR96J\"     } } ```  ## Forcing Password Resets  To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:  ```json {     \"_authentication\": {         \"force_reset\": true     } }
     * Create a New Customer
     */
    async createANewCustomer(requestParameters: CreateANewCustomerRequest, initOverrides?: RequestInit): Promise<CustomerFull> {
        const response = await this.createANewCustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a *Customer*.
     * Delete a Customer
     */
    async deleteACustomerRaw(requestParameters: DeleteACustomerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling deleteACustomer.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteACustomer.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteACustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customer_id}`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a *Customer*.
     * Delete a Customer
     */
    async deleteACustomer(requestParameters: DeleteACustomerRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteACustomerRaw(requestParameters, initOverrides);
    }

    /**
     * By default, it deletes all *Customers*. Up to 100 customers per batch can be deleted.
     * Delete Customers
     */
    async deleteAllCustomersRaw(requestParameters: DeleteAllCustomersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteAllCustomers.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteAllCustomers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * By default, it deletes all *Customers*. Up to 100 customers per batch can be deleted.
     * Delete Customers
     */
    async deleteAllCustomers(requestParameters: DeleteAllCustomersRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAllCustomersRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a count of all *Customers*. 
     * Get a Count of Customers
     */
    async getACountOfCustomersRaw(requestParameters: GetACountOfCustomersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CountFull>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getACountOfCustomers.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getACountOfCustomers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountFullFromJSON(jsonValue));
    }

    /**
     * Returns a count of all *Customers*. 
     * Get a Count of Customers
     */
    async getACountOfCustomers(requestParameters: GetACountOfCustomersRequest, initOverrides?: RequestInit): Promise<CountFull> {
        const response = await this.getACountOfCustomersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a single *Customer*.
     * Get a Customer
     */
    async getACustomerRaw(requestParameters: GetACustomerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerFull>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getACustomer.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getACustomer.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getACustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customer_id}`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerFullFromJSON(jsonValue));
    }

    /**
     * Returns a single *Customer*.
     * Get a Customer
     */
    async getACustomer(requestParameters: GetACustomerRequest, initOverrides?: RequestInit): Promise<CustomerFull> {
        const response = await this.getACustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all *Customers*. Default sorting is by customer id, from lowest to highest. Optional parameters can be passed in.
     * Get All Customers
     */
    async getAllCustomersRaw(requestParameters: GetAllCustomersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CustomerFull>>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getAllCustomers.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getAllCustomers.');
        }

        const queryParameters: any = {};

        if (requestParameters.firstName !== undefined) {
            queryParameters['first_name'] = requestParameters.firstName;
        }

        if (requestParameters.lastName !== undefined) {
            queryParameters['last_name'] = requestParameters.lastName;
        }

        if (requestParameters.company !== undefined) {
            queryParameters['company'] = requestParameters.company;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.phone !== undefined) {
            queryParameters['phone'] = requestParameters.phone;
        }

        if (requestParameters.storeCredit !== undefined) {
            queryParameters['store_credit'] = requestParameters.storeCredit;
        }

        if (requestParameters.customerGroupId !== undefined) {
            queryParameters['customer_group_id'] = requestParameters.customerGroupId;
        }

        if (requestParameters.minId !== undefined) {
            queryParameters['min_id'] = requestParameters.minId;
        }

        if (requestParameters.maxId !== undefined) {
            queryParameters['max_id'] = requestParameters.maxId;
        }

        if (requestParameters.minDateCreated !== undefined) {
            queryParameters['min_date_created'] = (requestParameters.minDateCreated as any).toISOString();
        }

        if (requestParameters.maxDateCreated !== undefined) {
            queryParameters['max_date_created	'] = (requestParameters.maxDateCreated as any).toISOString();
        }

        if (requestParameters.minDateModified !== undefined) {
            queryParameters['min_date_modified'] = (requestParameters.minDateModified as any).toISOString();
        }

        if (requestParameters.maxDateModified !== undefined) {
            queryParameters['max_date_modified'] = (requestParameters.maxDateModified as any).toISOString();
        }

        if (requestParameters.taxExemptCategory !== undefined) {
            queryParameters['tax_exempt_category'] = requestParameters.taxExemptCategory;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerFullFromJSON));
    }

    /**
     * Returns a list of all *Customers*. Default sorting is by customer id, from lowest to highest. Optional parameters can be passed in.
     * Get All Customers
     */
    async getAllCustomers(requestParameters: GetAllCustomersRequest, initOverrides?: RequestInit): Promise<Array<CustomerFull>> {
        const response = await this.getAllCustomersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a *Customer*.  **Read Only Fields** *   id *   date_created *   date_modified *   accepts_marketing *   addresses *   form_fields  ## Notes  The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.  When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.  ## Updating Passwords  To manually update a customer password in the same way as the control panel, supply a value for the `password` field:  ``` {     \"_authentication\": {         \"password\": \"12w69Y217PYR96J\"     } } ```  #### Confirming Passwords  An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:  ``` {     \"_authentication\": {        \"password\": \"12w69Y217PYR96J\"        \"password_confirmation\": \"12w69Y217PYR96J\"     } } ```  #### Forcing Password Resets  To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:  ``` {     \"_authentication\": {         \"force_reset\": true     } } ```
     * Update a Customer
     */
    async updateACustomerRaw(requestParameters: UpdateACustomerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerBase>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling updateACustomer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customer_id}`.replace(`{${"customer_id"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomersToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerBaseFromJSON(jsonValue));
    }

    /**
     * Updates a *Customer*.  **Read Only Fields** *   id *   date_created *   date_modified *   accepts_marketing *   addresses *   form_fields  ## Notes  The `_authentication` object exposes functionality associated with the customer’s ability to log in to the store. All properties of the `_authentication` object are optional.  When the `_authentication` object is not supplied with an update request, then the existing customer password remains the same.  ## Updating Passwords  To manually update a customer password in the same way as the control panel, supply a value for the `password` field:  ``` {     \"_authentication\": {         \"password\": \"12w69Y217PYR96J\"     } } ```  #### Confirming Passwords  An additional optional `password_confirmation` field can also be sent, providing password confirmation as a service:  ``` {     \"_authentication\": {        \"password\": \"12w69Y217PYR96J\"        \"password_confirmation\": \"12w69Y217PYR96J\"     } } ```  #### Forcing Password Resets  To force a customer to reset their password upon their next login attempt, give the `force_reset` field a value of true, as shown here:  ``` {     \"_authentication\": {         \"force_reset\": true     } } ```
     * Update a Customer
     */
    async updateACustomer(requestParameters: UpdateACustomerRequest, initOverrides?: RequestInit): Promise<CustomerBase> {
        const response = await this.updateACustomerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

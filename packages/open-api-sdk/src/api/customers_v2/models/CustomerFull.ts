/* tslint:disable */
/* eslint-disable */
/**
 * Customers V2
 * Create and Manage Customers, Customer Addresses, and Customer Groups. Additionally, validate customer passwords. To learn more about Customers see [here](/api-docs/customers/customers-subscribers-overview).  - [Authentication](#authentication) - [Available Endpoints](#available-endpoints) - [Usage Notes](#usage-notes) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Available Endpoints | Resource / Endpoint                     | Description | |-----------------------------------------|-------------------------------------------------------------------------------| | Customers                               | Identity and account details for customers shopping on BigCommerce stores     | | Customers Addresses                     | Postal address belonging to a customer.                                       | | Customers Groups                        | Groupings of customers who share the same level of access and discounts       | | Customers Validate Password             | Validate customer passwords                                                   |  ## Usage Notes  **Customer Groups** * Customer Groups are only available on specific plans.  **Customers vs. Subscribers** * A subscriber is not always a customer. Someone can sign up for the newsletter only and not create an account. * A customer is not always a subscriber. Signing up for the newsletter is a separate action from creating an account and purchasing an item. * A customer and a subscriber can be the same. If a shopper checks out on the storefront, creates an account and opts into the newsletter, they are a customer and a subscriber.  ## Resources  ### Related APIs / Endpoints   [Customer Login API](https://developer.bigcommerce.com/api-docs/customers/customer-login-api) - [Current Customer API](https://developer.bigcommerce.com/api-docs/customers/current-customer-api) - [Customers API (v3)](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api) - [Subscribers API](https://developer.bigcommerce.com/api-reference/customer-subscribers/subscribers-api)  ### Webhooks - [Customers](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events#webhook-events_customer)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressFieldResource,
    AddressFieldResourceFromJSON,
    AddressFieldResourceFromJSONTyped,
    AddressFieldResourceToJSON,
    CustomerBase,
    CustomerBaseFromJSON,
    CustomerBaseFromJSONTyped,
    CustomerBaseToJSON,
    CustomerFullAllOf,
    CustomerFullAllOfFromJSON,
    CustomerFullAllOfFromJSONTyped,
    CustomerFullAllOfToJSON,
    CustomersCustomerIdAuthentication,
    CustomersCustomerIdAuthenticationFromJSON,
    CustomersCustomerIdAuthenticationFromJSONTyped,
    CustomersCustomerIdAuthenticationToJSON,
    FormFields,
    FormFieldsFromJSON,
    FormFieldsFromJSONTyped,
    FormFieldsToJSON,
} from './';

/**
 * 
 * @export
 * @interface CustomerFull
 */
export interface CustomerFull {
    /**
     * Unique numeric ID of this customer. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     * @type {number}
     * @memberof CustomerFull
     */
    id?: number;
    /**
     * Date on which the customer registered from the storefront or was created in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     * @type {Date}
     * @memberof CustomerFull
     */
    dateCreated?: Date;
    /**
     * Date on which the customer updated their details in the storefront or was updated in the control panel. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     * @type {Date}
     * @memberof CustomerFull
     */
    dateModified?: Date;
    /**
     * 
     * @type {CustomersCustomerIdAuthentication}
     * @memberof CustomerFull
     */
    authentication?: CustomersCustomerIdAuthentication;
    /**
     * The name of the company for which the customer works.
     * @type {string}
     * @memberof CustomerFull
     */
    company?: string;
    /**
     * First name of the customer.
     * @type {string}
     * @memberof CustomerFull
     */
    firstName: string;
    /**
     * Last name of the customer.
     * @type {string}
     * @memberof CustomerFull
     */
    lastName: string;
    /**
     * Email address of the customer.
     * @type {string}
     * @memberof CustomerFull
     */
    email: string;
    /**
     * Phone number of the customer.
     * @type {string}
     * @memberof CustomerFull
     */
    phone?: string;
    /**
     * The amount of credit the customer has. (Float, Float as String, Integer)
     * @type {string}
     * @memberof CustomerFull
     */
    storeCredit?: string;
    /**
     * The customerâ€™s IP address when they signed up.
     * @type {string}
     * @memberof CustomerFull
     */
    registrationIpAddress?: string;
    /**
     * The group to which the customer belongs.
     * @type {number}
     * @memberof CustomerFull
     */
    customerGroupId?: number;
    /**
     * Store-owner notes on the customer.
     * @type {string}
     * @memberof CustomerFull
     */
    notes?: string;
    /**
     * If applicable, the tax-exempt category of the shopper's customer account. You can apply a tax-exempt category to multiple customers. This code should match the exemption codes provided by the third-party integration.
     * @type {string}
     * @memberof CustomerFull
     */
    taxExemptCategory?: string;
    /**
     * If the customer accepts product review emails or abandon cart emails. Read-Only.
     * @type {boolean}
     * @memberof CustomerFull
     */
    readonly acceptsMarketing?: boolean;
    /**
     * 
     * @type {AddressFieldResource}
     * @memberof CustomerFull
     */
    addresses?: AddressFieldResource;
    /**
     * Array of custom fields. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     * @type {Array<FormFields>}
     * @memberof CustomerFull
     */
    formFields?: Array<FormFields>;
    /**
     * Force a password change on next login.
     * @type {boolean}
     * @memberof CustomerFull
     */
    resetPassOnLogin?: boolean;
}

export function CustomerFullFromJSON(json: any): CustomerFull {
    return CustomerFullFromJSONTyped(json, false);
}

export function CustomerFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'dateCreated': !exists(json, 'date_created') ? undefined : (new Date(json['date_created'])),
        'dateModified': !exists(json, 'date_modified') ? undefined : (new Date(json['date_modified'])),
        'authentication': !exists(json, '_authentication') ? undefined : CustomersCustomerIdAuthenticationFromJSON(json['_authentication']),
        'company': !exists(json, 'company') ? undefined : json['company'],
        'firstName': json['first_name'],
        'lastName': json['last_name'],
        'email': json['email'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'storeCredit': !exists(json, 'store_credit') ? undefined : json['store_credit'],
        'registrationIpAddress': !exists(json, 'registration_ip_address') ? undefined : json['registration_ip_address'],
        'customerGroupId': !exists(json, 'customer_group_id') ? undefined : json['customer_group_id'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'taxExemptCategory': !exists(json, 'tax_exempt_category') ? undefined : json['tax_exempt_category'],
        'acceptsMarketing': !exists(json, 'accepts_marketing') ? undefined : json['accepts_marketing'],
        'addresses': !exists(json, 'addresses') ? undefined : AddressFieldResourceFromJSON(json['addresses']),
        'formFields': !exists(json, 'form_fields') ? undefined : ((json['form_fields'] as Array<any>).map(FormFieldsFromJSON)),
        'resetPassOnLogin': !exists(json, 'reset_pass_on_login') ? undefined : json['reset_pass_on_login'],
    };
}

export function CustomerFullToJSON(value?: CustomerFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'date_created': value.dateCreated === undefined ? undefined : (value.dateCreated.toISOString()),
        'date_modified': value.dateModified === undefined ? undefined : (value.dateModified.toISOString()),
        '_authentication': CustomersCustomerIdAuthenticationToJSON(value.authentication),
        'company': value.company,
        'first_name': value.firstName,
        'last_name': value.lastName,
        'email': value.email,
        'phone': value.phone,
        'store_credit': value.storeCredit,
        'registration_ip_address': value.registrationIpAddress,
        'customer_group_id': value.customerGroupId,
        'notes': value.notes,
        'tax_exempt_category': value.taxExemptCategory,
        'addresses': AddressFieldResourceToJSON(value.addresses),
        'form_fields': value.formFields === undefined ? undefined : ((value.formFields as Array<any>).map(FormFieldsToJSON)),
        'reset_pass_on_login': value.resetPassOnLogin,
    };
}



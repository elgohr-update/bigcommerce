/* tslint:disable */
/* eslint-disable */
/**
 * Customers V2
 * Create and Manage Customers, Customer Addresses, and Customer Groups. Additionally, validate customer passwords. To learn more about Customers see [here](/api-docs/customers/customers-subscribers-overview).  - [Authentication](#authentication) - [Available Endpoints](#available-endpoints) - [Usage Notes](#usage-notes) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Available Endpoints | Resource / Endpoint                     | Description | |-----------------------------------------|-------------------------------------------------------------------------------| | Customers                               | Identity and account details for customers shopping on BigCommerce stores     | | Customers Addresses                     | Postal address belonging to a customer.                                       | | Customers Groups                        | Groupings of customers who share the same level of access and discounts       | | Customers Validate Password             | Validate customer passwords                                                   |  ## Usage Notes  **Customer Groups** * Customer Groups are only available on specific plans.  **Customers vs. Subscribers** * A subscriber is not always a customer. Someone can sign up for the newsletter only and not create an account. * A customer is not always a subscriber. Signing up for the newsletter is a separate action from creating an account and purchasing an item. * A customer and a subscriber can be the same. If a shopper checks out on the storefront, creates an account and opts into the newsletter, they are a customer and a subscriber.  ## Resources  ### Related APIs / Endpoints   [Customer Login API](https://developer.bigcommerce.com/api-docs/customers/customer-login-api) - [Current Customer API](https://developer.bigcommerce.com/api-docs/customers/current-customer-api) - [Customers API (v3)](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api) - [Subscribers API](https://developer.bigcommerce.com/api-reference/customer-subscribers/subscribers-api)  ### Webhooks - [Customers](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events#webhook-events_customer)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CustomerAddress
 */
export interface CustomerAddress {
    /**
     * ID of this customer address. READ-ONLY
     * @type {number}
     * @memberof CustomerAddress
     */
    id?: number;
    /**
     * ID of the associated customer.
     * @type {number}
     * @memberof CustomerAddress
     */
    customerId?: number;
    /**
     * The customer’s first name.
     * @type {string}
     * @memberof CustomerAddress
     */
    firstName: string;
    /**
     * The customer’s last name.
     * @type {string}
     * @memberof CustomerAddress
     */
    lastName: string;
    /**
     * The customer’s company name.
     * @type {string}
     * @memberof CustomerAddress
     */
    company?: string;
    /**
     * The customer’s street address, line 1.
     * @type {string}
     * @memberof CustomerAddress
     */
    street1: string;
    /**
     * The customer’s street address, line 2.
     * @type {string}
     * @memberof CustomerAddress
     */
    street2?: string;
    /**
     * The customer’s city/town/suburb.
     * @type {string}
     * @memberof CustomerAddress
     */
    city: string;
    /**
     * The customer’s state/province. Do not abbreviate the state; spell out the entire word, e.g.: California. (Cannot be null. As a workaround for addresses that include no state/province string, pass a space as the “state” value.)
     * @type {string}
     * @memberof CustomerAddress
     */
    state: string;
    /**
     * The customer’s ZIP or postal code.
     * @type {string}
     * @memberof CustomerAddress
     */
    zip: string;
    /**
     * The customer’s country. Must be the full country name.
     * @type {string}
     * @memberof CustomerAddress
     */
    country: string;
    /**
     * 2-letter ISO Alpha-2 code for the customer’s country. READ-ONLY
     * @type {string}
     * @memberof CustomerAddress
     */
    countryIso2?: string;
    /**
     * The customer’s phone number.
     * @type {string}
     * @memberof CustomerAddress
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof CustomerAddress
     */
    addressType?: CustomerAddressAddressTypeEnum;
}

/**
* @export
* @enum {string}
*/
export enum CustomerAddressAddressTypeEnum {
    Residential = 'residential',
    Commercial = 'commercial'
}

export function CustomerAddressFromJSON(json: any): CustomerAddress {
    return CustomerAddressFromJSONTyped(json, false);
}

export function CustomerAddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerAddress {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'customerId': !exists(json, 'customer_id') ? undefined : json['customer_id'],
        'firstName': json['first_name'],
        'lastName': json['last_name'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'street1': json['street_1'],
        'street2': !exists(json, 'street_2') ? undefined : json['street_2'],
        'city': json['city'],
        'state': json['state'],
        'zip': json['zip'],
        'country': json['country'],
        'countryIso2': !exists(json, 'country_iso2') ? undefined : json['country_iso2'],
        'phone': json['phone'],
        'addressType': !exists(json, 'address_type') ? undefined : json['address_type'],
    };
}

export function CustomerAddressToJSON(value?: CustomerAddress | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'customer_id': value.customerId,
        'first_name': value.firstName,
        'last_name': value.lastName,
        'company': value.company,
        'street_1': value.street1,
        'street_2': value.street2,
        'city': value.city,
        'state': value.state,
        'zip': value.zip,
        'country': value.country,
        'country_iso2': value.countryIso2,
        'phone': value.phone,
        'address_type': value.addressType,
    };
}



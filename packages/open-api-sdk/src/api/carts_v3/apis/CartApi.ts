/* tslint:disable */
/* eslint-disable */
/**
 * Carts
 * Create a cart using BigCommerce cart logic.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CartCreatePostData,
    CartCreatePostDataFromJSON,
    CartCreatePostDataToJSON,
    CartFull,
    CartFullFromJSON,
    CartFullToJSON,
    CartUpdatePutRequestData,
    CartUpdatePutRequestDataFromJSON,
    CartUpdatePutRequestDataToJSON,
} from '../models';

export interface CreateACartRequest {
    accept: string;
    contentType: string;
    cartData: CartCreatePostData;
    include?: CreateACartIncludeEnum;
}

export interface DeleteACartRequest {
    cartId: string;
    accept: string;
    contentType: string;
}

export interface GetACartRequest {
    cartId: string;
    accept: string;
    contentType: string;
    include?: GetACartIncludeEnum;
}

export interface UpdateACartRequest {
    cartId: string;
    accept: string;
    contentType: string;
    cartUpdateData: CartUpdatePutRequestData;
    include?: UpdateACartIncludeEnum;
}

/**
 * 
 */
export class CartApi extends runtime.BaseAPI {

    /**
     * Creates a **Cart**.   **Required Fields**  |Field|Details| |-|-| |`line_items`||  |`custom_items`|Only required if adding a custom item to the cart.| |`gift_certificates`|Only required if adding a gift certificate to the cart.|  **Usage Notes**  * A **cart** `id` (UUID) is returned in the response. * A **cart** `id` is the same as a **checkout** `id`. * A cart can be created by adding an existing **catalog item** or a **custom item**. * Carts are valid for **30 days** from the **last modification** (this includes creating the cart or editing the cart). * If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections. * The format and data type of a cart\'s `option_value` is defined by the `value_data` object of a product\'s [variant option value](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-variant-option-values/getoptionvaluebyid), [modifier value](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-modifier-values/getmodifiervaluebyid), or a combination of both. * Redirect URLs can only be generated from carts created using the **Server-to-Server Carts API**.  * To get cart `redirect_urls` in the response, append the following query parameter to the request URL: `include=redirect_urls`. * To restore a cart that was created by a shopper or via the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
     * Create a Cart
     */
    async createACartRaw(requestParameters: CreateACartRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CartFull>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling createACart.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling createACart.');
        }

        if (requestParameters.cartData === null || requestParameters.cartData === undefined) {
            throw new runtime.RequiredError('cartData','Required parameter requestParameters.cartData was null or undefined when calling createACart.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/carts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartCreatePostDataToJSON(requestParameters.cartData),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFullFromJSON(jsonValue));
    }

    /**
     * Creates a **Cart**.   **Required Fields**  |Field|Details| |-|-| |`line_items`||  |`custom_items`|Only required if adding a custom item to the cart.| |`gift_certificates`|Only required if adding a gift certificate to the cart.|  **Usage Notes**  * A **cart** `id` (UUID) is returned in the response. * A **cart** `id` is the same as a **checkout** `id`. * A cart can be created by adding an existing **catalog item** or a **custom item**. * Carts are valid for **30 days** from the **last modification** (this includes creating the cart or editing the cart). * If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections. * The format and data type of a cart\'s `option_value` is defined by the `value_data` object of a product\'s [variant option value](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-variant-option-values/getoptionvaluebyid), [modifier value](https://developer.bigcommerce.com/api-reference/store-management/catalog/product-modifier-values/getmodifiervaluebyid), or a combination of both. * Redirect URLs can only be generated from carts created using the **Server-to-Server Carts API**.  * To get cart `redirect_urls` in the response, append the following query parameter to the request URL: `include=redirect_urls`. * To restore a cart that was created by a shopper or via the Storefront Cart API, first recreate the cart using the Server to Server Cart API.
     * Create a Cart
     */
    async createACart(requestParameters: CreateACartRequest, initOverrides?: RequestInit): Promise<CartFull> {
        const response = await this.createACartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a *Cart*. Once a *Cart* has been deleted it can not be recovered.
     * Delete a Cart
     */
    async deleteACartRaw(requestParameters: DeleteACartRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling deleteACart.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteACart.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteACart.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a *Cart*. Once a *Cart* has been deleted it can not be recovered.
     * Delete a Cart
     */
    async deleteACart(requestParameters: DeleteACartRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteACartRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a stores *Cart*.
     * Get a Cart
     */
    async getACartRaw(requestParameters: GetACartRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CartFull>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling getACart.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getACart.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getACart.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFullFromJSON(jsonValue));
    }

    /**
     * Returns a stores *Cart*.
     * Get a Cart
     */
    async getACart(requestParameters: GetACartRequest, initOverrides?: RequestInit): Promise<CartFull> {
        const response = await this.getACartRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a *Carts* `customer_id`.  **Notes**  Changing the *Cart* `customer_id` will remove any promotions or shipping on the *Cart*. These are tied to the customer depending on cart conditions and any customer groups. 
     * Update Customer ID
     */
    async updateACartRaw(requestParameters: UpdateACartRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CartFull>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling updateACart.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling updateACart.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling updateACart.');
        }

        if (requestParameters.cartUpdateData === null || requestParameters.cartUpdateData === undefined) {
            throw new runtime.RequiredError('cartUpdateData','Required parameter requestParameters.cartUpdateData was null or undefined when calling updateACart.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/carts/{cartId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CartUpdatePutRequestDataToJSON(requestParameters.cartUpdateData),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFullFromJSON(jsonValue));
    }

    /**
     * Updates a *Carts* `customer_id`.  **Notes**  Changing the *Cart* `customer_id` will remove any promotions or shipping on the *Cart*. These are tied to the customer depending on cart conditions and any customer groups. 
     * Update Customer ID
     */
    async updateACart(requestParameters: UpdateACartRequest, initOverrides?: RequestInit): Promise<CartFull> {
        const response = await this.updateACartRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CreateACartIncludeEnum {
    RedirectUrls = 'redirect_urls',
    LineItemsPhysicalItemsOptions = 'line_items.physical_items.options',
    LineItemsDigitalItemsOptions = 'line_items.digital_items.options'
}
/**
    * @export
    * @enum {string}
    */
export enum GetACartIncludeEnum {
    RedirectUrls = 'redirect_urls',
    LineItemsPhysicalItemsOptions = 'line_items.physical_items.options',
    LineItemsDigitalItemsOptions = 'line_items.digital_items.options'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateACartIncludeEnum {
    RedirectUrls = 'redirect_urls',
    LineItemsPhysicalItemsOptions = 'line_items.physical_items.options',
    LineItemsDigitalItemsOptions = 'line_items.digital_items.options'
}

/* tslint:disable */
/* eslint-disable */
/**
 * Carts
 * Create a cart using BigCommerce cart logic.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CartFull,
    CartFullFromJSON,
    CartFullToJSON,
    CartLineItemUpdatePost,
    CartLineItemUpdatePostFromJSON,
    CartLineItemUpdatePostToJSON,
    Decimal,
    DecimalFromJSON,
    DecimalToJSON,
} from '../models';

export interface AddCartLineItemRequest {
    cartId: string;
    accept: string;
    contentType: string;
    itemData: CartLineItemUpdatePost;
    include?: AddCartLineItemIncludeEnum;
}

export interface DeleteCartLineItemRequest {
    cartId: string;
    itemId: Decimal;
    accept: string;
    contentType: string;
    include?: DeleteCartLineItemIncludeEnum;
}

export interface UpdateCartLineItemRequest {
    cartId: string;
    itemId: Decimal;
    accept: string;
    contentType: string;
    lineItem: CartLineItemUpdatePost;
    include?: UpdateCartLineItemIncludeEnum;
}

/**
 * 
 */
export class CartItemsApi extends runtime.BaseAPI {

    /**
     * Adds line items to the *Cart*.  **Usage Notes**  To add a custom item use `custom_items`.   If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
     * Add Cart Line Items
     */
    async addCartLineItemRaw(requestParameters: AddCartLineItemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CartFull>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling addCartLineItem.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling addCartLineItem.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling addCartLineItem.');
        }

        if (requestParameters.itemData === null || requestParameters.itemData === undefined) {
            throw new runtime.RequiredError('itemData','Required parameter requestParameters.itemData was null or undefined when calling addCartLineItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/carts/{cartId}/items`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartLineItemUpdatePostToJSON(requestParameters.itemData),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFullFromJSON(jsonValue));
    }

    /**
     * Adds line items to the *Cart*.  **Usage Notes**  To add a custom item use `custom_items`.   If a product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.
     * Add Cart Line Items
     */
    async addCartLineItem(requestParameters: AddCartLineItemRequest, initOverrides?: RequestInit): Promise<CartFull> {
        const response = await this.addCartLineItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a *Cart* line item.   **Notes**  Removing the last `line_item` in the *Cart* deletes the *Cart*.
     * Delete Cart Line Item
     */
    async deleteCartLineItemRaw(requestParameters: DeleteCartLineItemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CartFull>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling deleteCartLineItem.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling deleteCartLineItem.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteCartLineItem.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteCartLineItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/carts/{cartId}/items/{itemId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFullFromJSON(jsonValue));
    }

    /**
     * Deletes a *Cart* line item.   **Notes**  Removing the last `line_item` in the *Cart* deletes the *Cart*.
     * Delete Cart Line Item
     */
    async deleteCartLineItem(requestParameters: DeleteCartLineItemRequest, initOverrides?: RequestInit): Promise<CartFull> {
        const response = await this.deleteCartLineItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing, single line item in the *Cart*.   **Notes**  Currently, only updating `list_price` and `quantity` are supported. Updating a product\'s `list_price` will make that item ineligible for V3 product level promotions.   If the product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.  If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the Add Cart Line Items endpoint.  `custom_items` cannot be updated via the API at this time. To update your cart, add a new updated custom item and delete the outdated one. If your cart contains only one line item, perform the add operation before the delete operation.  Deleting all line items from the cart will invalidate the cart. 
     * Update Cart Line Item
     */
    async updateCartLineItemRaw(requestParameters: UpdateCartLineItemRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CartFull>> {
        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling updateCartLineItem.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling updateCartLineItem.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling updateCartLineItem.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling updateCartLineItem.');
        }

        if (requestParameters.lineItem === null || requestParameters.lineItem === undefined) {
            throw new runtime.RequiredError('lineItem','Required parameter requestParameters.lineItem was null or undefined when calling updateCartLineItem.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/carts/{cartId}/items/{itemId}`.replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CartLineItemUpdatePostToJSON(requestParameters.lineItem),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CartFullFromJSON(jsonValue));
    }

    /**
     * Updates an existing, single line item in the *Cart*.   **Notes**  Currently, only updating `list_price` and `quantity` are supported. Updating a product\'s `list_price` will make that item ineligible for V3 product level promotions.   If the product has modifiers, omit the `variant_id` and instead use the `option_selections` array to describe both the **variant** and the **modifier** selections.  If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the Add Cart Line Items endpoint.  `custom_items` cannot be updated via the API at this time. To update your cart, add a new updated custom item and delete the outdated one. If your cart contains only one line item, perform the add operation before the delete operation.  Deleting all line items from the cart will invalidate the cart. 
     * Update Cart Line Item
     */
    async updateCartLineItem(requestParameters: UpdateCartLineItemRequest, initOverrides?: RequestInit): Promise<CartFull> {
        const response = await this.updateCartLineItemRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum AddCartLineItemIncludeEnum {
    RedirectUrls = 'redirect_urls',
    LineItemsPhysicalItemsOptions = 'line_items.physical_items.options',
    LineItemsDigitalItemsOptions = 'line_items.digital_items.options'
}
/**
    * @export
    * @enum {string}
    */
export enum DeleteCartLineItemIncludeEnum {
    RedirectUrls = 'redirect_urls',
    LineItemsPhysicalItemsOptions = 'line_items.physical_items.options',
    LineItemsDigitalItemsOptions = 'line_items.digital_items.options'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateCartLineItemIncludeEnum {
    RedirectUrls = 'redirect_urls',
    LineItemsPhysicalItemsOptions = 'line_items.physical_items.options',
    LineItemsDigitalItemsOptions = 'line_items.digital_items.options'
}

/* tslint:disable */
/* eslint-disable */
/**
 * Carts
 * Create a cart using BigCommerce cart logic.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CartCreatePostDataCurrency
 */
export interface CartCreatePostDataCurrency {
    /**
     * The [transactional currency](https://developer.bigcommerce.com/api-docs/multi-currency/guide/introduction#multi-currency-definitions) code for the cart as a [ISO-4217](https://www.iso.org/iso-4217-currency-codes.html) formatted string; required when multi-currency is enabled. Passing in a non-transactional display currency will result in a `400` error.
     * @type {string}
     * @memberof CartCreatePostDataCurrency
     */
    code?: string;
}

export function CartCreatePostDataCurrencyFromJSON(json: any): CartCreatePostDataCurrency {
    return CartCreatePostDataCurrencyFromJSONTyped(json, false);
}

export function CartCreatePostDataCurrencyFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartCreatePostDataCurrency {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
    };
}

export function CartCreatePostDataCurrencyToJSON(value?: CartCreatePostDataCurrency | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
    };
}



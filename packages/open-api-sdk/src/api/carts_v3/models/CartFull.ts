/* tslint:disable */
/* eslint-disable */
/**
 * Carts
 * Create a cart using BigCommerce cart logic.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AppliedCoupon,
    AppliedCouponFromJSON,
    AppliedCouponFromJSONTyped,
    AppliedCouponToJSON,
    AppliedDiscount,
    AppliedDiscountFromJSON,
    AppliedDiscountFromJSONTyped,
    AppliedDiscountToJSON,
    Currency1,
    Currency1FromJSON,
    Currency1FromJSONTyped,
    Currency1ToJSON,
} from './';

/**
 * A cart contains a collection of items, prices, discounts, etc.. It does not contain customer-related data.
 * @export
 * @interface CartFull
 */
export interface CartFull {
    /**
     * Cart ID, provided after creating a cart with a POST.
     * @type {string}
     * @memberof CartFull
     */
    id?: string;
    /**
     * Bundled items will have their parent's item Id.
     * @type {string}
     * @memberof CartFull
     */
    parentId?: string;
    /**
     * ID of the customer to which the cart belongs.
     * @type {number}
     * @memberof CartFull
     */
    customerId?: number;
    /**
     * The cart's email. This is the same email that is used in the billing address
     * @type {string}
     * @memberof CartFull
     */
    email?: string;
    /**
     * 
     * @type {Currency1}
     * @memberof CartFull
     */
    currency?: Currency1;
    /**
     * 
     * @type {boolean}
     * @memberof CartFull
     */
    taxIncluded?: boolean;
    /**
     * Sum of cart line-item amounts before cart-level discounts, coupons, or taxes.
     * @type {number}
     * @memberof CartFull
     */
    baseAmount?: number;
    /**
     * Discounted amount.
     * @type {number}
     * @memberof CartFull
     */
    discountAmount?: number;
    /**
     * Sum of cart line-item amounts minus cart-level discounts and coupons. This amount includes taxes (where applicable).
     * @type {number}
     * @memberof CartFull
     */
    cartAmount?: number;
    /**
     * 
     * @type {Array<AppliedCoupon>}
     * @memberof CartFull
     */
    coupons?: Array<AppliedCoupon>;
    /**
     * 
     * @type {Array<AppliedDiscount>}
     * @memberof CartFull
     */
    discounts?: Array<AppliedDiscount>;
    /**
     * 
     * @type {object}
     * @memberof CartFull
     */
    lineItems?: object;
    /**
     * Time when the cart was created.
     * @type {string}
     * @memberof CartFull
     */
    createdTime?: string;
    /**
     * Time when the cart was last updated.
     * @type {string}
     * @memberof CartFull
     */
    updatedTime?: string;
    /**
     * If no channel is specified, defaults to 1. 
     * @type {number}
     * @memberof CartFull
     */
    channelId?: number;
    /**
     * Locale of the cart.
     * @type {string}
     * @memberof CartFull
     */
    locale?: string;
}

export function CartFullFromJSON(json: any): CartFull {
    return CartFullFromJSONTyped(json, false);
}

export function CartFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): CartFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'parentId': !exists(json, 'parent_id') ? undefined : json['parent_id'],
        'customerId': !exists(json, 'customer_id') ? undefined : json['customer_id'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'currency': !exists(json, 'currency') ? undefined : Currency1FromJSON(json['currency']),
        'taxIncluded': !exists(json, 'tax_included') ? undefined : json['tax_included'],
        'baseAmount': !exists(json, 'base_amount') ? undefined : json['base_amount'],
        'discountAmount': !exists(json, 'discount_amount') ? undefined : json['discount_amount'],
        'cartAmount': !exists(json, 'cart_amount') ? undefined : json['cart_amount'],
        'coupons': !exists(json, 'coupons') ? undefined : ((json['coupons'] as Array<any>).map(AppliedCouponFromJSON)),
        'discounts': !exists(json, 'discounts') ? undefined : ((json['discounts'] as Array<any>).map(AppliedDiscountFromJSON)),
        'lineItems': !exists(json, 'line_items') ? undefined : json['line_items'],
        'createdTime': !exists(json, 'created_time') ? undefined : json['created_time'],
        'updatedTime': !exists(json, 'updated_time') ? undefined : json['updated_time'],
        'channelId': !exists(json, 'channel_id') ? undefined : json['channel_id'],
        'locale': !exists(json, 'locale') ? undefined : json['locale'],
    };
}

export function CartFullToJSON(value?: CartFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'parent_id': value.parentId,
        'customer_id': value.customerId,
        'email': value.email,
        'currency': Currency1ToJSON(value.currency),
        'tax_included': value.taxIncluded,
        'base_amount': value.baseAmount,
        'discount_amount': value.discountAmount,
        'cart_amount': value.cartAmount,
        'coupons': value.coupons === undefined ? undefined : ((value.coupons as Array<any>).map(AppliedCouponToJSON)),
        'discounts': value.discounts === undefined ? undefined : ((value.discounts as Array<any>).map(AppliedDiscountToJSON)),
        'line_items': value.lineItems,
        'created_time': value.createdTime,
        'updated_time': value.updatedTime,
        'channel_id': value.channelId,
        'locale': value.locale,
    };
}



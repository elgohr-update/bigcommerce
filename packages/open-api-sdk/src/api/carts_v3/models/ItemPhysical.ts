/* tslint:disable */
/* eslint-disable */
/**
 * Carts
 * Create a cart using BigCommerce cart logic.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AppliedCoupon,
    AppliedCouponFromJSON,
    AppliedCouponFromJSONTyped,
    AppliedCouponToJSON,
    AppliedDiscount1,
    AppliedDiscount1FromJSON,
    AppliedDiscount1FromJSONTyped,
    AppliedDiscount1ToJSON,
    BaseItem,
    BaseItemFromJSON,
    BaseItemFromJSONTyped,
    BaseItemToJSON,
    GiftWrapping,
    GiftWrappingFromJSON,
    GiftWrappingFromJSONTyped,
    GiftWrappingToJSON,
    ItemPhysicalAllOf,
    ItemPhysicalAllOfFromJSON,
    ItemPhysicalAllOfFromJSONTyped,
    ItemPhysicalAllOfToJSON,
    ProductOption,
    ProductOptionFromJSON,
    ProductOptionFromJSONTyped,
    ProductOptionToJSON,
} from './';

/**
 * 
 * @export
 * @interface ItemPhysical
 */
export interface ItemPhysical {
    /**
     * The line-item ID.
     * @type {string}
     * @memberof ItemPhysical
     */
    id?: string;
    /**
     * The id of the variant. Required in the /PUT or /POST if the product has variants.
     * @type {number}
     * @memberof ItemPhysical
     */
    variantId: number;
    /**
     * The id of the product. Required in a /POST request.
     * @type {number}
     * @memberof ItemPhysical
     */
    productId: number;
    /**
     * SKU of the variant.
     * @type {string}
     * @memberof ItemPhysical
     */
    sku?: string;
    /**
     * The item's product name.
     * @type {string}
     * @memberof ItemPhysical
     */
    name?: string;
    /**
     * The product URL.
     * @type {string}
     * @memberof ItemPhysical
     */
    url?: string;
    /**
     * Quantity of this item in the cart.
     * @type {number}
     * @memberof ItemPhysical
     */
    quantity: number;
    /**
     * Whether the item is taxable.
     * @type {boolean}
     * @memberof ItemPhysical
     */
    isTaxable?: boolean;
    /**
     * Image of the product or variant.
     * @type {string}
     * @memberof ItemPhysical
     */
    imageUrl?: string;
    /**
     * 
     * @type {Array<AppliedDiscount1>}
     * @memberof ItemPhysical
     */
    discounts?: Array<AppliedDiscount1>;
    /**
     * 
     * @type {Array<AppliedCoupon>}
     * @memberof ItemPhysical
     */
    coupons?: Array<AppliedCoupon>;
    /**
     * The total value of all discounts applied to this item. This includes coupons and cart level discounts
     * @type {number}
     * @memberof ItemPhysical
     */
    discountAmount?: number;
    /**
     * The total value of all coupons applied to this item.
     * @type {number}
     * @memberof ItemPhysical
     */
    couponAmount?: number;
    /**
     * Item's list price, as quoted by the manufacturer/distributor. Optional price override.
     * @type {number}
     * @memberof ItemPhysical
     */
    listPrice?: number;
    /**
     * Item's price after all discounts are applied. (The final price before tax calculation.)
     * @type {number}
     * @memberof ItemPhysical
     */
    salePrice?: number;
    /**
     * Item's list price multiplied by the quantity.
     * @type {number}
     * @memberof ItemPhysical
     */
    extendedListPrice?: number;
    /**
     * Item's sale price multiplied by the quantity.
     * @type {number}
     * @memberof ItemPhysical
     */
    extendedSalePrice?: number;
    /**
     * The list of selected options for this product.
     * @type {Array<ProductOption>}
     * @memberof ItemPhysical
     */
    options?: Array<ProductOption>;
    /**
     * 
     * @type {boolean}
     * @memberof ItemPhysical
     */
    isRequireShipping?: boolean;
    /**
     * 
     * @type {GiftWrapping}
     * @memberof ItemPhysical
     */
    giftWrapping?: GiftWrapping;
}

export function ItemPhysicalFromJSON(json: any): ItemPhysical {
    return ItemPhysicalFromJSONTyped(json, false);
}

export function ItemPhysicalFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemPhysical {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'variantId': json['variant_id'],
        'productId': json['product_id'],
        'sku': !exists(json, 'sku') ? undefined : json['sku'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'quantity': json['quantity'],
        'isTaxable': !exists(json, 'is_taxable') ? undefined : json['is_taxable'],
        'imageUrl': !exists(json, 'image_url') ? undefined : json['image_url'],
        'discounts': !exists(json, 'discounts') ? undefined : ((json['discounts'] as Array<any>).map(AppliedDiscount1FromJSON)),
        'coupons': !exists(json, 'coupons') ? undefined : ((json['coupons'] as Array<any>).map(AppliedCouponFromJSON)),
        'discountAmount': !exists(json, 'discount_amount') ? undefined : json['discount_amount'],
        'couponAmount': !exists(json, 'coupon_amount') ? undefined : json['coupon_amount'],
        'listPrice': !exists(json, 'list_price') ? undefined : json['list_price'],
        'salePrice': !exists(json, 'sale_price') ? undefined : json['sale_price'],
        'extendedListPrice': !exists(json, 'extended_list_price') ? undefined : json['extended_list_price'],
        'extendedSalePrice': !exists(json, 'extended_sale_price') ? undefined : json['extended_sale_price'],
        'options': !exists(json, 'options') ? undefined : ((json['options'] as Array<any>).map(ProductOptionFromJSON)),
        'isRequireShipping': !exists(json, 'is_require_shipping') ? undefined : json['is_require_shipping'],
        'giftWrapping': !exists(json, 'gift_wrapping') ? undefined : GiftWrappingFromJSON(json['gift_wrapping']),
    };
}

export function ItemPhysicalToJSON(value?: ItemPhysical | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'variant_id': value.variantId,
        'product_id': value.productId,
        'sku': value.sku,
        'name': value.name,
        'url': value.url,
        'quantity': value.quantity,
        'is_taxable': value.isTaxable,
        'image_url': value.imageUrl,
        'discounts': value.discounts === undefined ? undefined : ((value.discounts as Array<any>).map(AppliedDiscount1ToJSON)),
        'coupons': value.coupons === undefined ? undefined : ((value.coupons as Array<any>).map(AppliedCouponToJSON)),
        'discount_amount': value.discountAmount,
        'coupon_amount': value.couponAmount,
        'list_price': value.listPrice,
        'sale_price': value.salePrice,
        'extended_list_price': value.extendedListPrice,
        'extended_sale_price': value.extendedSalePrice,
        'options': value.options === undefined ? undefined : ((value.options as Array<any>).map(ProductOptionToJSON)),
        'is_require_shipping': value.isRequireShipping,
        'gift_wrapping': GiftWrappingToJSON(value.giftWrapping),
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Webhooks v3
 * Get notified when specific events occur on a BigCommerce store. For more information, see [Webhooks Overview](https://developer.bigcommerce.com/api-docs/store-management/webhooks/overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse422,
    InlineResponse422FromJSON,
    InlineResponse422ToJSON,
    WebhookBase,
    WebhookBaseFromJSON,
    WebhookBaseToJSON,
} from '../models';

export interface CreateWebhooksRequest {
    accept?: string;
    contentType?: string;
    webhookBase?: WebhookBase;
}

export interface DeleteAWebhookRequest {
    id: string;
    accept?: string;
    contentType?: string;
}

export interface GetAllWebhooksRequest {
    accept?: string;
    contentType?: string;
    page?: number;
    limit?: number;
    isActive?: boolean;
    scope?: string;
    destination?: string;
}

export interface GetWebhookRequest {
    id: string;
    accept?: string;
    contentType?: string;
}

export interface UpdateAWebhookRequest {
    id: string;
    accept?: string;
    contentType?: string;
    webhookBase?: WebhookBase;
}

/**
 * 
 */
export class WebhooksApi extends runtime.BaseAPI {

    /**
     * Creates a webhook. Only one webhook at a time can be created. Custom headers can be added. Destination URL must be served on port 443 (custom ports are not currently supported).
     * Create a Webhook
     */
    async createWebhooksRaw(requestParameters: CreateWebhooksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/hooks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookBaseToJSON(requestParameters.webhookBase),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Creates a webhook. Only one webhook at a time can be created. Custom headers can be added. Destination URL must be served on port 443 (custom ports are not currently supported).
     * Create a Webhook
     */
    async createWebhooks(requestParameters: CreateWebhooksRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.createWebhooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a webhook. Only one webhook at a time can be deleted. When a webhook is deleted, it is returned in the response as a 200 OK.
     * Delete a Webhook
     */
    async deleteAWebhookRaw(requestParameters: DeleteAWebhookRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/hooks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Deletes a webhook. Only one webhook at a time can be deleted. When a webhook is deleted, it is returned in the response as a 200 OK.
     * Delete a Webhook
     */
    async deleteAWebhook(requestParameters: DeleteAWebhookRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.deleteAWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all webhooks on a store associated to the `client_id` used to authenticate the request.  *Note: BigCommerce determines the `client_id` from the `access_token`.*
     * Get Webhooks
     */
    async getAllWebhooksRaw(requestParameters: GetAllWebhooksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.isActive !== undefined) {
            queryParameters['is_active'] = requestParameters.isActive;
        }

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.destination !== undefined) {
            queryParameters['destination'] = requestParameters.destination;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/hooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns a list of all webhooks on a store associated to the `client_id` used to authenticate the request.  *Note: BigCommerce determines the `client_id` from the `access_token`.*
     * Get Webhooks
     */
    async getAllWebhooks(requestParameters: GetAllWebhooksRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.getAllWebhooksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a webhook by ID.
     * Get a Webhook
     */
    async getWebhookRaw(requestParameters: GetWebhookRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/hooks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Return a webhook by ID.
     * Get a Webhook
     */
    async getWebhook(requestParameters: GetWebhookRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.getWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a webhook. Custom headers can be added.
     * Update a Webhook
     */
    async updateAWebhookRaw(requestParameters: UpdateAWebhookRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAWebhook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/hooks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookBaseToJSON(requestParameters.webhookBase),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Updates a webhook. Custom headers can be added.
     * Update a Webhook
     */
    async updateAWebhook(requestParameters: UpdateAWebhookRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.updateAWebhookRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

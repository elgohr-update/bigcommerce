/* tslint:disable */
/* eslint-disable */
/**
 * Webhooks v3
 * Get notified when specific events occur on a BigCommerce store. For more information, see [Webhooks Overview](https://developer.bigcommerce.com/api-docs/store-management/webhooks/overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StoreProductInventoryUpdatedAllOfDataInventory
 */
export interface StoreProductInventoryUpdatedAllOfDataInventory {
    /**
     * ID of the product
     * @type {number}
     * @memberof StoreProductInventoryUpdatedAllOfDataInventory
     */
    productId?: number;
    /**
     * How the inventory was adjusted. Value will be one of the following:
     * - `absolute` - inventory updated by an order
     * - `relative` - inventory updated using the API or the control panel
     * @type {string}
     * @memberof StoreProductInventoryUpdatedAllOfDataInventory
     */
    method?: StoreProductInventoryUpdatedAllOfDataInventoryMethodEnum;
    /**
     * the number of items that the inventory changed by. This can be negative if the inventory is decreased `-3` or positive if an item is returned to the inventory from an order, `2`
     * @type {number}
     * @memberof StoreProductInventoryUpdatedAllOfDataInventory
     */
    value?: number;
}

/**
* @export
* @enum {string}
*/
export enum StoreProductInventoryUpdatedAllOfDataInventoryMethodEnum {
    Absolute = 'absolute',
    Relative = 'relative'
}

export function StoreProductInventoryUpdatedAllOfDataInventoryFromJSON(json: any): StoreProductInventoryUpdatedAllOfDataInventory {
    return StoreProductInventoryUpdatedAllOfDataInventoryFromJSONTyped(json, false);
}

export function StoreProductInventoryUpdatedAllOfDataInventoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreProductInventoryUpdatedAllOfDataInventory {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'productId': !exists(json, 'product_id') ? undefined : json['product_id'],
        'method': !exists(json, 'method') ? undefined : json['method'],
        'value': !exists(json, 'value') ? undefined : json['value'],
    };
}

export function StoreProductInventoryUpdatedAllOfDataInventoryToJSON(value?: StoreProductInventoryUpdatedAllOfDataInventory | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'product_id': value.productId,
        'method': value.method,
        'value': value.value,
    };
}



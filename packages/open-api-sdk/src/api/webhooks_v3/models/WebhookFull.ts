/* tslint:disable */
/* eslint-disable */
/**
 * Webhooks v3
 * Get notified when specific events occur on a BigCommerce store. For more information, see [Webhooks Overview](https://developer.bigcommerce.com/api-docs/store-management/webhooks/overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    WebhookBase,
    WebhookBaseFromJSON,
    WebhookBaseFromJSONTyped,
    WebhookBaseToJSON,
    WebhookBaseHeaders,
    WebhookBaseHeadersFromJSON,
    WebhookBaseHeadersFromJSONTyped,
    WebhookBaseHeadersToJSON,
    WebhookFullAllOf,
    WebhookFullAllOfFromJSON,
    WebhookFullAllOfFromJSONTyped,
    WebhookFullAllOfToJSON,
} from './';

/**
 * 
 * @export
 * @interface WebhookFull
 */
export interface WebhookFull {
    /**
     * Id of the webhook
     * @type {number}
     * @memberof WebhookFull
     */
    id?: number;
    /**
     * Client ID, unique to the store
     * @type {string}
     * @memberof WebhookFull
     */
    clientId?: string;
    /**
     * Store permanent ID. 
     * @type {string}
     * @memberof WebhookFull
     */
    storeHash?: string;
    /**
     * Created time
     * @type {number}
     * @memberof WebhookFull
     */
    createdAt?: number;
    /**
     * Updated time
     * @type {number}
     * @memberof WebhookFull
     */
    updatedAt?: number;
    /**
     * Event you subscribe to
     * @type {string}
     * @memberof WebhookFull
     */
    scope: string;
    /**
     * URL must be active, return a 200 response, and be served on port 443 (custom ports not currently supported).
     * @type {string}
     * @memberof WebhookFull
     */
    destination: string;
    /**
     * If webhook is active or not
     * @type {boolean}
     * @memberof WebhookFull
     */
    isActive: boolean;
    /**
     * 
     * @type {WebhookBaseHeaders}
     * @memberof WebhookFull
     */
    headers: WebhookBaseHeaders;
}

export function WebhookFullFromJSON(json: any): WebhookFull {
    return WebhookFullFromJSONTyped(json, false);
}

export function WebhookFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): WebhookFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'clientId': !exists(json, 'client_id') ? undefined : json['client_id'],
        'storeHash': !exists(json, 'store_hash') ? undefined : json['store_hash'],
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'updatedAt': !exists(json, 'updated_at') ? undefined : json['updated_at'],
        'scope': json['scope'],
        'destination': json['destination'],
        'isActive': json['is_active'],
        'headers': WebhookBaseHeadersFromJSON(json['headers']),
    };
}

export function WebhookFullToJSON(value?: WebhookFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'client_id': value.clientId,
        'store_hash': value.storeHash,
        'created_at': value.createdAt,
        'updated_at': value.updatedAt,
        'scope': value.scope,
        'destination': value.destination,
        'is_active': value.isActive,
        'headers': WebhookBaseHeadersToJSON(value.headers),
    };
}



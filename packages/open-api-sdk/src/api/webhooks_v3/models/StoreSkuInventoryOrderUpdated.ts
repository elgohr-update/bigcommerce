/* tslint:disable */
/* eslint-disable */
/**
 * Webhooks v3
 * Get notified when specific events occur on a BigCommerce store. For more information, see [Webhooks Overview](https://developer.bigcommerce.com/api-docs/store-management/webhooks/overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    StoreSkuInventoryUpdatedAllOf,
    StoreSkuInventoryUpdatedAllOfFromJSON,
    StoreSkuInventoryUpdatedAllOfFromJSONTyped,
    StoreSkuInventoryUpdatedAllOfToJSON,
    StoreSkuInventoryUpdatedAllOfData,
    StoreSkuInventoryUpdatedAllOfDataFromJSON,
    StoreSkuInventoryUpdatedAllOfDataFromJSONTyped,
    StoreSkuInventoryUpdatedAllOfDataToJSON,
    WebhookCallbackBase,
    WebhookCallbackBaseFromJSON,
    WebhookCallbackBaseFromJSONTyped,
    WebhookCallbackBaseToJSON,
} from './';

/**
 * This will fire when the inventory is updated via API, the control panel, when an order is placed and when an order is refunded and the inventory is returned to stock. This hook will fire based on a store's Inventory settings. <br><br>Fields that trigger event:<ul><li>Quantity</li></ul>
 * 
 * ### Example callback:
 * 
 * ```json
 * {
 *   "created_at": 1561482670,
 *   "store_id": "1025646",
 *   "producer": "stores/{store_hash}",
 *   "scope": "store/sku/inventory/order/updated",
 *   "hash": "352e4afc6dd3fc85ea26bfdf3f91852604d57528",
 *   "data": {
 *     "type": "sku",
 *     "id": 461,
 *     "inventory": {
 *       "product_id": 167,
 *       "method": "absolute",
 *       "value": 2,
 *       "variant_id": 509
 *     }
 *   }
 * }
 * ```
 * 
 * ### Callback schema:
 * @export
 * @interface StoreSkuInventoryOrderUpdated
 */
export interface StoreSkuInventoryOrderUpdated {
    /**
     * Hook creation date as a Unix timestamp.
     * @type {number}
     * @memberof StoreSkuInventoryOrderUpdated
     */
    readonly createdAt?: number;
    /**
     * A numerical identifier that is unique to each store.
     * @type {string}
     * @memberof StoreSkuInventoryOrderUpdated
     */
    storeId?: string;
    /**
     * Will always follow the pattern `stores/store_hash`. This is the store that created the webhook.
     * @type {string}
     * @memberof StoreSkuInventoryOrderUpdated
     */
    producer?: string;
    /**
     * The event registered when the webhook was created.
     * @type {string}
     * @memberof StoreSkuInventoryOrderUpdated
     */
    scope?: string;
    /**
     * The payload data JSON encoded then passed through SH1 encryption.
     * @type {string}
     * @memberof StoreSkuInventoryOrderUpdated
     */
    hash?: string;
    /**
     * 
     * @type {StoreSkuInventoryUpdatedAllOfData}
     * @memberof StoreSkuInventoryOrderUpdated
     */
    data?: StoreSkuInventoryUpdatedAllOfData;
}

export function StoreSkuInventoryOrderUpdatedFromJSON(json: any): StoreSkuInventoryOrderUpdated {
    return StoreSkuInventoryOrderUpdatedFromJSONTyped(json, false);
}

export function StoreSkuInventoryOrderUpdatedFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreSkuInventoryOrderUpdated {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': !exists(json, 'created_at') ? undefined : json['created_at'],
        'storeId': !exists(json, 'store_id') ? undefined : json['store_id'],
        'producer': !exists(json, 'producer') ? undefined : json['producer'],
        'scope': !exists(json, 'scope') ? undefined : json['scope'],
        'hash': !exists(json, 'hash') ? undefined : json['hash'],
        'data': !exists(json, 'data') ? undefined : StoreSkuInventoryUpdatedAllOfDataFromJSON(json['data']),
    };
}

export function StoreSkuInventoryOrderUpdatedToJSON(value?: StoreSkuInventoryOrderUpdated | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'store_id': value.storeId,
        'producer': value.producer,
        'scope': value.scope,
        'hash': value.hash,
        'data': StoreSkuInventoryUpdatedAllOfDataToJSON(value.data),
    };
}



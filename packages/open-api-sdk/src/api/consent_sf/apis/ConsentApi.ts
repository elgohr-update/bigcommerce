/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Cookie Consent
 * Specify shopper cookie consent preferences
 *
 * The version of the OpenAPI document: Storefront
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConsentPreferences,
    ConsentPreferencesFromJSON,
    ConsentPreferencesToJSON,
} from '../models';

export interface PostConsentRequest {
    consentPreferences: ConsentPreferences;
}

/**
 * 
 */
export class ConsentApi extends runtime.BaseAPI {

    /**
     * Sets the status of a customer\'s consent to allow data collection by cookies and scripts according to the following consent categories:     2. Analytics — These cookies provide statistical information on site usage so the store owner can improve the website over time.     3. Functional — These cookies enable enhanced functionality, such as videos and live chat. If a shopper does not allow these, then some or all of these functions may not work properly.    4. Targeting; Advertising — These cookies allow merchants to create profiles or personalize content to enhance users\' shopping experience.       This endpoint only works if the cookie consent feature is enabled. It is assumed the shopper has not consented to anything until a value is explicitly set. The request body must be populated with a complete set of allowed and denied categories.  Once set, consent preferences will be saved as a cookie for guest shoppers. Consent preferences will be persisted to a shopper\'s account to be used for future sessions once they have logged in. Consent preferences can also be managed using the [Customer Consent](https://developer.bigcommerce.com/api-reference/store-management/customers-v3/customer-consent/) V3 endpoint.   
     * Set Cookie Consent Preferences
     */
    async postConsentRaw(requestParameters: PostConsentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.consentPreferences === null || requestParameters.consentPreferences === undefined) {
            throw new runtime.RequiredError('consentPreferences','Required parameter requestParameters.consentPreferences was null or undefined when calling postConsent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/consent`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsentPreferencesToJSON(requestParameters.consentPreferences),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets the status of a customer\'s consent to allow data collection by cookies and scripts according to the following consent categories:     2. Analytics — These cookies provide statistical information on site usage so the store owner can improve the website over time.     3. Functional — These cookies enable enhanced functionality, such as videos and live chat. If a shopper does not allow these, then some or all of these functions may not work properly.    4. Targeting; Advertising — These cookies allow merchants to create profiles or personalize content to enhance users\' shopping experience.       This endpoint only works if the cookie consent feature is enabled. It is assumed the shopper has not consented to anything until a value is explicitly set. The request body must be populated with a complete set of allowed and denied categories.  Once set, consent preferences will be saved as a cookie for guest shoppers. Consent preferences will be persisted to a shopper\'s account to be used for future sessions once they have logged in. Consent preferences can also be managed using the [Customer Consent](https://developer.bigcommerce.com/api-reference/store-management/customers-v3/customer-consent/) V3 endpoint.   
     * Set Cookie Consent Preferences
     */
    async postConsent(requestParameters: PostConsentRequest, initOverrides?: RequestInit): Promise<void> {
        await this.postConsentRaw(requestParameters, initOverrides);
    }

}

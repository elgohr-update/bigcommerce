/* tslint:disable */
/* eslint-disable */
/**
 * Widgets
 * Create and manage widget templates, widgets, regions, and placements.  - [Authentication](#authentication) - [Subresources](#subresources) - [Additional Information](#additional-information)  ## Authentication  [Authenticate](https://developer.bigcommerce.com/api-docs/getting-started/authentication) requests by including an OAuth `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Content | modify | `store_v2_content` | |  Content | read-only | `store_v2_content_read_only` |  For more information on OAuth scopes, see [Authenticating BigCommerce\'s REST APIs](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes).  ## Subresources  ### Widget templates [Widget templates](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget-template/getwidgettemplates) are reusable Handlebars-enabled HTML templates that define the structure of the widget on a page.  ### Widgets [Widgets](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget/getwidgets) are units of content placed on specific pages in a Stencil theme. Widgets consist of a widget configuration and a widget template UUID and render as part of the storefrontâ€™s HTML.  ### Regions [Regions](https://developer.bigcommerce.com/api-reference/store-management/widgets/regions/getcontentregions) are specific locations in the Stencil theme template files where you can place a widget.  ### Placements [Placements](https://developer.bigcommerce.com/api-reference/store-management/widgets/placement/getplacements) determine the region where you place widgets and in what order.  ## Additional Information  * [Widgets API Overview](https://developer.bigcommerce.com/api-docs/store-management/widgets/overview) * [Widget UI Schema](https://developer.bigcommerce.com/stencil-docs/page-builder/widget-ui-schema) * [Widget UI Input Types](https://developer.bigcommerce.com/stencil-docs/page-builder/schema-settings)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    WidgetSchemaConditional1,
    WidgetSchemaConditional1FromJSON,
    WidgetSchemaConditional1FromJSONTyped,
    WidgetSchemaConditional1ToJSON,
    WidgetSchemaTabTypeMeta,
    WidgetSchemaTabTypeMetaFromJSON,
    WidgetSchemaTabTypeMetaFromJSONTyped,
    WidgetSchemaTabTypeMetaToJSON,
} from './';

/**
 * For examples of each type of setting, see [Page Builder > Schema Settings](https://developer.bigcommerce.com/stencil-docs/page-builder/schema-settings/alignment) in Theme Docs.
 * @export
 * @interface WidgetSchemaSettingBase1
 */
export interface WidgetSchemaSettingBase1 {
    /**
     * The type of setting component to display. You can view the list of elements below to discover which are available to use.
     * 
     * For examples of each type of setting, see [Page Builder > Schema Settings](https://developer.bigcommerce.com/stencil-docs/page-builder/schema-settings/alignment) in Theme Docs.
     * @type {string}
     * @memberof WidgetSchemaSettingBase1
     */
    type?: WidgetSchemaSettingBase1TypeEnum;
    /**
     * The user friendly message to inform the user how this setting will be used.
     * @type {string}
     * @memberof WidgetSchemaSettingBase1
     */
    label?: string;
    /**
     * The variable name where the setting value will be available in the widget template.
     * @type {string}
     * @memberof WidgetSchemaSettingBase1
     */
    id?: string;
    /**
     * The default value to use when rendering the widget for the first time. Make sure to set sensible defaults to make your widget easier to use.
     * @type {string}
     * @memberof WidgetSchemaSettingBase1
     */
    _default?: string;
    /**
     * 
     * @type {WidgetSchemaTabTypeMeta}
     * @memberof WidgetSchemaSettingBase1
     */
    typeMeta?: WidgetSchemaTabTypeMeta;
    /**
     * 
     * @type {WidgetSchemaConditional1}
     * @memberof WidgetSchemaSettingBase1
     */
    conditional?: WidgetSchemaConditional1;
}

/**
* @export
* @enum {string}
*/
export enum WidgetSchemaSettingBase1TypeEnum {
    Alignment = 'alignment',
    Boolean = 'boolean',
    BoxModel = 'boxModel',
    Code = 'code',
    Color = 'color',
    ImageManager = 'imageManager',
    Input = 'input',
    Number = 'number',
    ProductId = 'productId',
    ProductImage = 'productImage',
    Range = 'range',
    RegexInput = 'regexInput',
    Select = 'select',
    Text = 'text',
    Toggle = 'toggle'
}

export function WidgetSchemaSettingBase1FromJSON(json: any): WidgetSchemaSettingBase1 {
    return WidgetSchemaSettingBase1FromJSONTyped(json, false);
}

export function WidgetSchemaSettingBase1FromJSONTyped(json: any, ignoreDiscriminator: boolean): WidgetSchemaSettingBase1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        '_default': !exists(json, 'default') ? undefined : json['default'],
        'typeMeta': !exists(json, 'typeMeta') ? undefined : WidgetSchemaTabTypeMetaFromJSON(json['typeMeta']),
        'conditional': !exists(json, 'conditional') ? undefined : WidgetSchemaConditional1FromJSON(json['conditional']),
    };
}

export function WidgetSchemaSettingBase1ToJSON(value?: WidgetSchemaSettingBase1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'label': value.label,
        'id': value.id,
        'default': value._default,
        'typeMeta': WidgetSchemaTabTypeMetaToJSON(value.typeMeta),
        'conditional': WidgetSchemaConditional1ToJSON(value.conditional),
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Widgets
 * Create and manage widget templates, widgets, regions, and placements.  - [Authentication](#authentication) - [Subresources](#subresources) - [Additional Information](#additional-information)  ## Authentication  [Authenticate](https://developer.bigcommerce.com/api-docs/getting-started/authentication) requests by including an OAuth `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Content | modify | `store_v2_content` | |  Content | read-only | `store_v2_content_read_only` |  For more information on OAuth scopes, see [Authenticating BigCommerce\'s REST APIs](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes).  ## Subresources  ### Widget templates [Widget templates](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget-template/getwidgettemplates) are reusable Handlebars-enabled HTML templates that define the structure of the widget on a page.  ### Widgets [Widgets](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget/getwidgets) are units of content placed on specific pages in a Stencil theme. Widgets consist of a widget configuration and a widget template UUID and render as part of the storefrontâ€™s HTML.  ### Regions [Regions](https://developer.bigcommerce.com/api-reference/store-management/widgets/regions/getcontentregions) are specific locations in the Stencil theme template files where you can place a widget.  ### Placements [Placements](https://developer.bigcommerce.com/api-reference/store-management/widgets/placement/getplacements) determine the region where you place widgets and in what order.  ## Additional Information  * [Widgets API Overview](https://developer.bigcommerce.com/api-docs/store-management/widgets/overview) * [Widget UI Schema](https://developer.bigcommerce.com/stencil-docs/page-builder/widget-ui-schema) * [Widget UI Input Types](https://developer.bigcommerce.com/stencil-docs/page-builder/schema-settings)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    WidgetSchemaArrayThumbnail,
    WidgetSchemaArrayThumbnailFromJSON,
    WidgetSchemaArrayThumbnailFromJSONTyped,
    WidgetSchemaArrayThumbnailToJSON,
} from './';

/**
 * **Array.** Use the **array** settings type to build collections of elements within the widget. Each element in the array can contain tabs, sections, and an entire schema.
 * @export
 * @interface WidgetSchemaArray
 */
export interface WidgetSchemaArray {
    /**
     * 
     * @type {string}
     * @memberof WidgetSchemaArray
     */
    type?: WidgetSchemaArrayTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof WidgetSchemaArray
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof WidgetSchemaArray
     */
    id?: string;
    /**
     * number of elements in the list to display by default.
     * @type {number}
     * @memberof WidgetSchemaArray
     */
    defaultCount?: number;
    /**
     * name for each element in the list
     * @type {string}
     * @memberof WidgetSchemaArray
     */
    entryLabel?: string;
    /**
     * 
     * @type {WidgetSchemaArrayThumbnail}
     * @memberof WidgetSchemaArray
     */
    thumbnail?: WidgetSchemaArrayThumbnail;
    /**
     * The schema used for each element in the array.
     * @type {Array<object>}
     * @memberof WidgetSchemaArray
     */
    schema?: Array<object>;
}

/**
* @export
* @enum {string}
*/
export enum WidgetSchemaArrayTypeEnum {
    Array = 'array'
}

export function WidgetSchemaArrayFromJSON(json: any): WidgetSchemaArray {
    return WidgetSchemaArrayFromJSONTyped(json, false);
}

export function WidgetSchemaArrayFromJSONTyped(json: any, ignoreDiscriminator: boolean): WidgetSchemaArray {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'defaultCount': !exists(json, 'defaultCount') ? undefined : json['defaultCount'],
        'entryLabel': !exists(json, 'entryLabel') ? undefined : json['entryLabel'],
        'thumbnail': !exists(json, 'thumbnail') ? undefined : WidgetSchemaArrayThumbnailFromJSON(json['thumbnail']),
        'schema': !exists(json, 'schema') ? undefined : json['schema'],
    };
}

export function WidgetSchemaArrayToJSON(value?: WidgetSchemaArray | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'label': value.label,
        'id': value.id,
        'defaultCount': value.defaultCount,
        'entryLabel': value.entryLabel,
        'thumbnail': WidgetSchemaArrayThumbnailToJSON(value.thumbnail),
        'schema': value.schema,
    };
}



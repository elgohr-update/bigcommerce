/* tslint:disable */
/* eslint-disable */
/**
 * Widgets
 * Create and manage widget templates, widgets, regions, and placements.  - [Authentication](#authentication) - [Subresources](#subresources) - [Additional Information](#additional-information)  ## Authentication  [Authenticate](https://developer.bigcommerce.com/api-docs/getting-started/authentication) requests by including an OAuth `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Content | modify | `store_v2_content` | |  Content | read-only | `store_v2_content_read_only` |  For more information on OAuth scopes, see [Authenticating BigCommerce\'s REST APIs](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes).  ## Subresources  ### Widget templates [Widget templates](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget-template/getwidgettemplates) are reusable Handlebars-enabled HTML templates that define the structure of the widget on a page.  ### Widgets [Widgets](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget/getwidgets) are units of content placed on specific pages in a Stencil theme. Widgets consist of a widget configuration and a widget template UUID and render as part of the storefrontâ€™s HTML.  ### Regions [Regions](https://developer.bigcommerce.com/api-reference/store-management/widgets/regions/getcontentregions) are specific locations in the Stencil theme template files where you can place a widget.  ### Placements [Placements](https://developer.bigcommerce.com/api-reference/store-management/widgets/placement/getplacements) determine the region where you place widgets and in what order.  ## Additional Information  * [Widgets API Overview](https://developer.bigcommerce.com/api-docs/store-management/widgets/overview) * [Widget UI Schema](https://developer.bigcommerce.com/stencil-docs/page-builder/widget-ui-schema) * [Widget UI Input Types](https://developer.bigcommerce.com/stencil-docs/page-builder/schema-settings)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PlacementBase,
    PlacementBaseFromJSON,
    PlacementBaseFromJSONTyped,
    PlacementBaseToJSON,
    PlacementPutAllOf,
    PlacementPutAllOfFromJSON,
    PlacementPutAllOfFromJSONTyped,
    PlacementPutAllOfToJSON,
} from './';

/**
 * 
 * @export
 * @interface PlacementPut
 */
export interface PlacementPut {
    /**
     * The template file that you would like to target.
     * @type {string}
     * @memberof PlacementPut
     */
    templateFile?: string;
    /**
     * A widget identifier.
     * @type {string}
     * @memberof PlacementPut
     */
    widgetUuid?: string;
    /**
     * The identifier of a page you would like to target. For product pages, choose product ID. For category pages, choose category ID. Home page does not support `entity_id`.
     * @type {string}
     * @memberof PlacementPut
     */
    entityId?: string;
    /**
     * The sort order to control the position of a content widget in a region.
     * @type {number}
     * @memberof PlacementPut
     */
    sortOrder?: number;
    /**
     * The name of the region in which to insert content widgets.
     * @type {string}
     * @memberof PlacementPut
     */
    region?: string;
    /**
     * Sets the placement as either inactive or active.
     * @type {string}
     * @memberof PlacementPut
     */
    status?: PlacementPutStatusEnum;
}

/**
* @export
* @enum {string}
*/
export enum PlacementPutStatusEnum {
    Inactive = 'inactive',
    Active = 'active'
}

export function PlacementPutFromJSON(json: any): PlacementPut {
    return PlacementPutFromJSONTyped(json, false);
}

export function PlacementPutFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlacementPut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'templateFile': !exists(json, 'template_file') ? undefined : json['template_file'],
        'widgetUuid': !exists(json, 'widget_uuid') ? undefined : json['widget_uuid'],
        'entityId': !exists(json, 'entity_id') ? undefined : json['entity_id'],
        'sortOrder': !exists(json, 'sort_order') ? undefined : json['sort_order'],
        'region': !exists(json, 'region') ? undefined : json['region'],
        'status': !exists(json, 'status') ? undefined : json['status'],
    };
}

export function PlacementPutToJSON(value?: PlacementPut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'template_file': value.templateFile,
        'widget_uuid': value.widgetUuid,
        'entity_id': value.entityId,
        'sort_order': value.sortOrder,
        'region': value.region,
        'status': value.status,
    };
}



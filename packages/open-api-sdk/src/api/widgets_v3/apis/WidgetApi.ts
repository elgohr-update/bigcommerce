/* tslint:disable */
/* eslint-disable */
/**
 * Widgets
 * Create and manage widget templates, widgets, regions, and placements.  - [Authentication](#authentication) - [Subresources](#subresources) - [Additional Information](#additional-information)  ## Authentication  [Authenticate](https://developer.bigcommerce.com/api-docs/getting-started/authentication) requests by including an OAuth `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Content | modify | `store_v2_content` | |  Content | read-only | `store_v2_content_read_only` |  For more information on OAuth scopes, see [Authenticating BigCommerce\'s REST APIs](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes).  ## Subresources  ### Widget templates [Widget templates](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget-template/getwidgettemplates) are reusable Handlebars-enabled HTML templates that define the structure of the widget on a page.  ### Widgets [Widgets](https://developer.bigcommerce.com/api-reference/store-management/widgets/widget/getwidgets) are units of content placed on specific pages in a Stencil theme. Widgets consist of a widget configuration and a widget template UUID and render as part of the storefrontâ€™s HTML.  ### Regions [Regions](https://developer.bigcommerce.com/api-reference/store-management/widgets/regions/getcontentregions) are specific locations in the Stencil theme template files where you can place a widget.  ### Placements [Placements](https://developer.bigcommerce.com/api-reference/store-management/widgets/placement/getplacements) determine the region where you place widgets and in what order.  ## Additional Information  * [Widgets API Overview](https://developer.bigcommerce.com/api-docs/store-management/widgets/overview) * [Widget UI Schema](https://developer.bigcommerce.com/stencil-docs/page-builder/widget-ui-schema) * [Widget UI Input Types](https://developer.bigcommerce.com/stencil-docs/page-builder/schema-settings)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorBase,
    ErrorBaseFromJSON,
    ErrorBaseToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
    WidgetPost,
    WidgetPostFromJSON,
    WidgetPostToJSON,
    WidgetPut,
    WidgetPutFromJSON,
    WidgetPutToJSON,
} from '../models';

export interface CreateWidgetRequest {
    widgetBody: WidgetPost;
    accept?: string;
    contentType?: string;
}

export interface DeleteWidgetRequest {
    uuid: string;
    accept?: string;
    contentType?: string;
}

export interface GetWidgetRequest {
    uuid: string;
    accept?: string;
    contentType?: string;
}

export interface GetWidgetsRequest {
    page?: number;
    limit?: number;
    widgetTemplateKind?: string;
    widgetTemplateUuid?: string;
    accept?: string;
    contentType?: string;
    name?: string;
    namein?: Array<string>;
    channelId?: number;
}

export interface UpdateWidgetRequest {
    uuid: string;
    widgetBody: WidgetPut;
    accept?: string;
    contentType?: string;
}

/**
 * 
 */
export class WidgetApi extends runtime.BaseAPI {

    /**
     * Creates a **Widget**.  **Note:** There is a limit of 10,000 widgets per store and 75 widgets per page. For more information, see [Store Limits](https://support.bigcommerce.com/s/article/Platform-Limits#storelimits).  **Required Fields** * name * widget_template_uuid
     * Create a Widget
     */
    async createWidgetRaw(requestParameters: CreateWidgetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2002>> {
        if (requestParameters.widgetBody === null || requestParameters.widgetBody === undefined) {
            throw new runtime.RequiredError('widgetBody','Required parameter requestParameters.widgetBody was null or undefined when calling createWidget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/content/widgets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WidgetPostToJSON(requestParameters.widgetBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Creates a **Widget**.  **Note:** There is a limit of 10,000 widgets per store and 75 widgets per page. For more information, see [Store Limits](https://support.bigcommerce.com/s/article/Platform-Limits#storelimits).  **Required Fields** * name * widget_template_uuid
     * Create a Widget
     */
    async createWidget(requestParameters: CreateWidgetRequest, initOverrides?: RequestInit): Promise<InlineResponse2002> {
        const response = await this.createWidgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a **Widget**.
     * Delete a Widget
     */
    async deleteWidgetRaw(requestParameters: DeleteWidgetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling deleteWidget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/content/widgets/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a **Widget**.
     * Delete a Widget
     */
    async deleteWidget(requestParameters: DeleteWidgetRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteWidgetRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a single **Widget**.
     * Get a Widget
     */
    async getWidgetRaw(requestParameters: GetWidgetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2002>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling getWidget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/content/widgets/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Returns a single **Widget**.
     * Get a Widget
     */
    async getWidget(requestParameters: GetWidgetRequest, initOverrides?: RequestInit): Promise<InlineResponse2002> {
        const response = await this.getWidgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of **Widgets**. Optional parameters can be passed in.
     * Get All Widgets
     */
    async getWidgetsRaw(requestParameters: GetWidgetsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.widgetTemplateKind !== undefined) {
            queryParameters['widget_template_kind'] = requestParameters.widgetTemplateKind;
        }

        if (requestParameters.widgetTemplateUuid !== undefined) {
            queryParameters['widget_template_uuid'] = requestParameters.widgetTemplateUuid;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.namein) {
            queryParameters['name:in'] = requestParameters.namein.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.channelId !== undefined) {
            queryParameters['channel_id'] = requestParameters.channelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/content/widgets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Returns a list of **Widgets**. Optional parameters can be passed in.
     * Get All Widgets
     */
    async getWidgets(requestParameters: GetWidgetsRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.getWidgetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a **Widget**.
     * Update a Widget
     */
    async updateWidgetRaw(requestParameters: UpdateWidgetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2002>> {
        if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
            throw new runtime.RequiredError('uuid','Required parameter requestParameters.uuid was null or undefined when calling updateWidget.');
        }

        if (requestParameters.widgetBody === null || requestParameters.widgetBody === undefined) {
            throw new runtime.RequiredError('widgetBody','Required parameter requestParameters.widgetBody was null or undefined when calling updateWidget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/content/widgets/{uuid}`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WidgetPutToJSON(requestParameters.widgetBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Updates a **Widget**.
     * Update a Widget
     */
    async updateWidget(requestParameters: UpdateWidgetRequest, initOverrides?: RequestInit): Promise<InlineResponse2002> {
        const response = await this.updateWidgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Subscribers
 * Manage subscribers.  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Customers | modify | `store_v2_customers` | |  Customers | read-only | `store_v2_customers_read_only` |  ### Headers  |Header|Parameter|Description| |-|-|-| |`X-Auth-Client`|`client_id`|Obtained by creating an API account or installing an app in a BigCommerce control panel.| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### Example  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Content-Type: application/json X-Auth-Client: {client_id} X-Auth-Token: {access_token} ```  * For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication). 
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SubscriberBase,
    SubscriberBaseFromJSON,
    SubscriberBaseFromJSONTyped,
    SubscriberBaseToJSON,
    SubscriberFullAllOf,
    SubscriberFullAllOfFromJSON,
    SubscriberFullAllOfFromJSONTyped,
    SubscriberFullAllOfToJSON,
} from './';

/**
 * Full subscriber object returned in responses.
 * @export
 * @interface SubscriberFull
 */
export interface SubscriberFull {
    /**
     * The email of the subscriber. Must be unique.
     * @type {string}
     * @memberof SubscriberFull
     */
    email?: string;
    /**
     * The first name of the subscriber.
     * @type {string}
     * @memberof SubscriberFull
     */
    firstName?: string;
    /**
     * The last name of the subscriber.
     * @type {string}
     * @memberof SubscriberFull
     */
    lastName?: string;
    /**
     * The source of the subscriber. Values are: `storefront`, `order`, or `custom`.
     * @type {string}
     * @memberof SubscriberFull
     */
    source?: string;
    /**
     * The ID of the source order, if source was an order.
     * @type {number}
     * @memberof SubscriberFull
     */
    orderId?: number | null;
    /**
     * The channel ID where the subscriber was created.
     * @type {number}
     * @memberof SubscriberFull
     */
    channelId?: number;
    /**
     * The unique numeric ID of the subscriber; increments sequentially.
     * @type {number}
     * @memberof SubscriberFull
     */
    id?: number;
    /**
     * The date on which the subscriber was modified.
     * @type {Date}
     * @memberof SubscriberFull
     */
    dateModified?: Date;
    /**
     * The date of which the subscriber was created.
     * @type {Date}
     * @memberof SubscriberFull
     */
    dateCreated?: Date;
}

export function SubscriberFullFromJSON(json: any): SubscriberFull {
    return SubscriberFullFromJSONTyped(json, false);
}

export function SubscriberFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubscriberFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'email': !exists(json, 'email') ? undefined : json['email'],
        'firstName': !exists(json, 'first_name') ? undefined : json['first_name'],
        'lastName': !exists(json, 'last_name') ? undefined : json['last_name'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'orderId': !exists(json, 'order_id') ? undefined : json['order_id'],
        'channelId': !exists(json, 'channel_id') ? undefined : json['channel_id'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'dateModified': !exists(json, 'date_modified') ? undefined : (new Date(json['date_modified'])),
        'dateCreated': !exists(json, 'date_created') ? undefined : (new Date(json['date_created'])),
    };
}

export function SubscriberFullToJSON(value?: SubscriberFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'email': value.email,
        'first_name': value.firstName,
        'last_name': value.lastName,
        'source': value.source,
        'order_id': value.orderId,
        'channel_id': value.channelId,
        'id': value.id,
        'date_modified': value.dateModified === undefined ? undefined : (value.dateModified.toISOString()),
        'date_created': value.dateCreated === undefined ? undefined : (value.dateCreated.toISOString()),
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Tax Provider Connection
 * Manage the connection between a merchant\'s BigCommerce store and a third party tax provider. For more information, see [Tax Provider API Overview](https://developer.bigcommerce.com/api-docs/providers/tax).
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    ResponseConnection,
    ResponseConnectionFromJSON,
    ResponseConnectionToJSON,
} from '../models';

export interface ProviderConnectionDeleteRequest {
    providerId: string;
}

export interface ProviderConnectionGetRequest {
    providerId: string;
}

export interface ProviderConnectionPutRequest {
    providerId: string;
    inlineObject?: InlineObject;
}

/**
 * 
 */
export class TaxProviderConnectionApi extends runtime.BaseAPI {

    /**
     * Remove any previously set basic connection credentials for the specified provider. If the specified provider is the active tax provider on the store, the store\'s active tax provider will be reset to BigCommerce Manual Tax. It is suggested to call this endpoint during a single-click app [uninstall callback](https://developer.bigcommerce.com/api-docs/apps/guide/callbacks#uninstall-callback).  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > * This operation will be logged in [Store Logs](https://support.bigcommerce.com/s/article/Using-Store-Logs) under **Staff Actions**. > * Requires **write** permissions on the **Information and Settings** [scope](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes).  </div> </div> </div> 
     * Delete a Connection
     */
    async providerConnectionDeleteRaw(requestParameters: ProviderConnectionDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResponseConnection>> {
        if (requestParameters.providerId === null || requestParameters.providerId === undefined) {
            throw new runtime.RequiredError('providerId','Required parameter requestParameters.providerId was null or undefined when calling providerConnectionDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/tax/providers/{provider_id}/connection`.replace(`{${"provider_id"}}`, encodeURIComponent(String(requestParameters.providerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseConnectionFromJSON(jsonValue));
    }

    /**
     * Remove any previously set basic connection credentials for the specified provider. If the specified provider is the active tax provider on the store, the store\'s active tax provider will be reset to BigCommerce Manual Tax. It is suggested to call this endpoint during a single-click app [uninstall callback](https://developer.bigcommerce.com/api-docs/apps/guide/callbacks#uninstall-callback).  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > * This operation will be logged in [Store Logs](https://support.bigcommerce.com/s/article/Using-Store-Logs) under **Staff Actions**. > * Requires **write** permissions on the **Information and Settings** [scope](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes).  </div> </div> </div> 
     * Delete a Connection
     */
    async providerConnectionDelete(requestParameters: ProviderConnectionDeleteRequest, initOverrides?: RequestInit): Promise<ResponseConnection> {
        const response = await this.providerConnectionDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the connection status of the specified tax provider in the context of a store.    <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > * Requires **read** permissions on the **Information and Settings** scope.  </div> </div> </div>  
     * Get Connection Status
     */
    async providerConnectionGetRaw(requestParameters: ProviderConnectionGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResponseConnection>> {
        if (requestParameters.providerId === null || requestParameters.providerId === undefined) {
            throw new runtime.RequiredError('providerId','Required parameter requestParameters.providerId was null or undefined when calling providerConnectionGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/tax/providers/{provider_id}/connection`.replace(`{${"provider_id"}}`, encodeURIComponent(String(requestParameters.providerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseConnectionFromJSON(jsonValue));
    }

    /**
     * Retrieve the connection status of the specified tax provider in the context of a store.    <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > * Requires **read** permissions on the **Information and Settings** scope.  </div> </div> </div>  
     * Get Connection Status
     */
    async providerConnectionGet(requestParameters: ProviderConnectionGetRequest, initOverrides?: RequestInit): Promise<ResponseConnection> {
        const response = await this.providerConnectionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set the HTTP Basic Authentication credentials for the specified provider. The configured `username` and `password` will be used to authenticate each API request to the Tax Provider from the associated store.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > * This operation will be logged in [Store Logs](https://support.bigcommerce.com/s/article/Using-Store-Logs) under **Staff Actions**. > * Requires **write** permissions on the **Information and Settings** [scope](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes).  </div> </div> </div>
     * Update a Connection
     */
    async providerConnectionPutRaw(requestParameters: ProviderConnectionPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResponseConnection>> {
        if (requestParameters.providerId === null || requestParameters.providerId === undefined) {
            throw new runtime.RequiredError('providerId','Required parameter requestParameters.providerId was null or undefined when calling providerConnectionPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/tax/providers/{provider_id}/connection`.replace(`{${"provider_id"}}`, encodeURIComponent(String(requestParameters.providerId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponseConnectionFromJSON(jsonValue));
    }

    /**
     * Set the HTTP Basic Authentication credentials for the specified provider. The configured `username` and `password` will be used to authenticate each API request to the Tax Provider from the associated store.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > * This operation will be logged in [Store Logs](https://support.bigcommerce.com/s/article/Using-Store-Logs) under **Staff Actions**. > * Requires **write** permissions on the **Information and Settings** [scope](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes).  </div> </div> </div>
     * Update a Connection
     */
    async providerConnectionPut(requestParameters: ProviderConnectionPutRequest, initOverrides?: RequestInit): Promise<ResponseConnection> {
        const response = await this.providerConnectionPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

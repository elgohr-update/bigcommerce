/* tslint:disable */
/* eslint-disable */
/**
 * Content
 * Manage blog posts, blog tags, content pages, and redirects.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### Note * Redirects V2 are deprecated; use [V3 Redirects](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/getredirects) instead. * Pages V2 are deprecated; use [Pages V3](https://developer.bigcommerce.com/api-reference/store-management/pages) instead.   </div> </div> </div>
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BlogPostBase,
    BlogPostBaseFromJSON,
    BlogPostBaseFromJSONTyped,
    BlogPostBaseToJSON,
    BlogPostFullAllOf,
    BlogPostFullAllOfFromJSON,
    BlogPostFullAllOfFromJSONTyped,
    BlogPostFullAllOfToJSON,
    PublishedDate,
    PublishedDateFromJSON,
    PublishedDateFromJSONTyped,
    PublishedDateToJSON,
} from './';

/**
 * 
 * @export
 * @interface BlogPostFull
 */
export interface BlogPostFull {
    /**
     * ID of this blog post. (READ-ONLY)
     * @type {number}
     * @memberof BlogPostFull
     */
    id?: number;
    /**
     * Title of this blog post.
     * @type {string}
     * @memberof BlogPostFull
     */
    title: string;
    /**
     * URL for the public blog post.
     * @type {string}
     * @memberof BlogPostFull
     */
    url?: string;
    /**
     * URL to preview the blog post. (READ-ONLY)
     * @type {string}
     * @memberof BlogPostFull
     */
    previewUrl?: string;
    /**
     * Text body of the blog post.
     * @type {string}
     * @memberof BlogPostFull
     */
    body: string;
    /**
     * Tags to characterize the blog post.
     * @type {Array<string>}
     * @memberof BlogPostFull
     */
    tags?: Array<string>;
    /**
     * Summary of the blog post. (READ-ONLY)
     * @type {string}
     * @memberof BlogPostFull
     */
    summary?: string;
    /**
     * Whether the blog post is published.
     * @type {boolean}
     * @memberof BlogPostFull
     */
    isPublished?: boolean;
    /**
     * 
     * @type {PublishedDate}
     * @memberof BlogPostFull
     */
    publishedDate?: PublishedDate;
    /**
     * Published date in `ISO 8601` format.
     * @type {string}
     * @memberof BlogPostFull
     */
    publishedDateIso8601?: string;
    /**
     * Description text for this blog post’s `<meta/>` element.
     * @type {string}
     * @memberof BlogPostFull
     */
    metaDescription?: string;
    /**
     * Keywords for this blog post’s `<meta/>` element.
     * @type {string}
     * @memberof BlogPostFull
     */
    metaKeywords?: string;
    /**
     * Name of the blog post’s author.
     * @type {string}
     * @memberof BlogPostFull
     */
    author?: string;
    /**
     * Local path to a thumbnail uploaded to `product_images/` via [WebDav](https://support.bigcommerce.com/s/article/File-Access-WebDAV).
     * @type {string}
     * @memberof BlogPostFull
     */
    thumbnailPath?: string;
}

export function BlogPostFullFromJSON(json: any): BlogPostFull {
    return BlogPostFullFromJSONTyped(json, false);
}

export function BlogPostFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlogPostFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'title': json['title'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'previewUrl': !exists(json, 'preview_url') ? undefined : json['preview_url'],
        'body': json['body'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'summary': !exists(json, 'summary') ? undefined : json['summary'],
        'isPublished': !exists(json, 'is_published') ? undefined : json['is_published'],
        'publishedDate': !exists(json, 'published_date') ? undefined : PublishedDateFromJSON(json['published_date']),
        'publishedDateIso8601': !exists(json, 'published_date_iso8601') ? undefined : json['published_date_iso8601'],
        'metaDescription': !exists(json, 'meta_description') ? undefined : json['meta_description'],
        'metaKeywords': !exists(json, 'meta_keywords') ? undefined : json['meta_keywords'],
        'author': !exists(json, 'author') ? undefined : json['author'],
        'thumbnailPath': !exists(json, 'thumbnail_path') ? undefined : json['thumbnail_path'],
    };
}

export function BlogPostFullToJSON(value?: BlogPostFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'title': value.title,
        'url': value.url,
        'preview_url': value.previewUrl,
        'body': value.body,
        'tags': value.tags,
        'summary': value.summary,
        'is_published': value.isPublished,
        'published_date': PublishedDateToJSON(value.publishedDate),
        'published_date_iso8601': value.publishedDateIso8601,
        'meta_description': value.metaDescription,
        'meta_keywords': value.metaKeywords,
        'author': value.author,
        'thumbnail_path': value.thumbnailPath,
    };
}



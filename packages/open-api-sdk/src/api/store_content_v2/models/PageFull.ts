/* tslint:disable */
/* eslint-disable */
/**
 * Content
 * Manage blog posts, blog tags, content pages, and redirects.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### Note * Redirects V2 are deprecated; use [V3 Redirects](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/getredirects) instead. * Pages V2 are deprecated; use [Pages V3](https://developer.bigcommerce.com/api-reference/store-management/pages) instead.   </div> </div> </div>
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PageBase,
    PageBaseFromJSON,
    PageBaseFromJSONTyped,
    PageBaseToJSON,
    PageFullAllOf,
    PageFullAllOfFromJSON,
    PageFullAllOfFromJSONTyped,
    PageFullAllOfToJSON,
} from './';

/**
 * 
 * @export
 * @interface PageFull
 */
export interface PageFull {
    /**
     * ID of the page.
     * @type {number}
     * @memberof PageFull
     */
    id?: number;
    /**
     * ID of any parent Web page.
     * @type {number}
     * @memberof PageFull
     */
    parentId?: number;
    /**
     * `page`: free-text page  
     * `link`: link to another web address  
     * `rss_feed`: syndicated content from an RSS feed  
     * `contact_form`: When the store's contact form is used.
     * 
     * 	
     * @type {string}
     * @memberof PageFull
     */
    type: PageFullTypeEnum;
    /**
     * Where the page’s type is a contact form: object whose members are the fields enabled (in the control panel) for storefront display. Possible members are:`fullname`: full name of the customer submitting the form; `phone`: customer’s phone number, as submitted on the form; `companyname`: customer’s submitted company name; `orderno`: customer’s submitted order number; `rma`: customer’s submitted RMA (Return Merchandise Authorization) number.
     * @type {string}
     * @memberof PageFull
     */
    contactFields?: string;
    /**
     * Where the page’s type is a contact form: email address that receives messages sent via the form.
     * @type {string}
     * @memberof PageFull
     */
    email?: string;
    /**
     * Page name, as displayed on the storefront.
     * @type {string}
     * @memberof PageFull
     */
    name: string;
    /**
     * Relative URL on the storefront for this page.
     * @type {string}
     * @memberof PageFull
     */
    url?: string;
    /**
     * Description contained within this page’s `<meta/>` element.
     * @type {string}
     * @memberof PageFull
     */
    metaDescription?: string;
    /**
     * HTML or variable that populates this page’s `<body>` element, in default/desktop view. Required in POST if page type is `raw`.
     * @type {string}
     * @memberof PageFull
     */
    body: string;
    /**
     * HTML to use for this page's body when viewed in the mobile template (deprecated).
     * @type {string}
     * @memberof PageFull
     */
    mobileBody?: string;
    /**
     * If true, this page has a mobile version.
     * @type {boolean}
     * @memberof PageFull
     */
    hasMobileVersion?: boolean;
    /**
     * If true, this page appears in the storefront’s navigation menu.
     * @type {boolean}
     * @memberof PageFull
     */
    isVisible?: boolean;
    /**
     * If true, this page is the storefront’s home page.
     * @type {boolean}
     * @memberof PageFull
     */
    isHomepage?: boolean;
    /**
     * Text specified for this page’s `<title>` element. (If empty, the value of the name property is used.)
     * @type {string}
     * @memberof PageFull
     */
    metaTitle?: string;
    /**
     * Layout template for this page. This field is writable only for stores with a Blueprint theme applied.
     * @type {string}
     * @memberof PageFull
     */
    layoutFile?: string;
    /**
     * Order in which this page should display on the storefront. (Lower integers specify earlier display.)
     * @type {number}
     * @memberof PageFull
     */
    sortOrder?: number;
    /**
     * Comma-separated list of keywords that shoppers can use to locate this page when searching the store.
     * @type {string}
     * @memberof PageFull
     */
    searchKeywords?: string;
    /**
     * Comma-separated list of SEO-relevant keywords to include in the page’s `<meta/>` element.
     * @type {string}
     * @memberof PageFull
     */
    metaKeywords?: string;
    /**
     * If page type is `rss_feed` the n this field is visisble. Required in POST required for `rss page` type.
     * @type {string}
     * @memberof PageFull
     */
    feed: string;
    /**
     * If page type is `link` this field is returned. Required in  POST to create a `link` page.
     * @type {string}
     * @memberof PageFull
     */
    link: string;
    /**
     * 
     * @type {string}
     * @memberof PageFull
     */
    contentType?: PageFullContentTypeEnum;
}

/**
* @export
* @enum {string}
*/
export enum PageFullTypeEnum {
    Page = 'page',
    RssFeed = 'rss_feed',
    ContactForm = 'contact_form',
    Raw = 'raw',
    Link = 'link'
}/**
* @export
* @enum {string}
*/
export enum PageFullContentTypeEnum {
    ApplicationJson = 'application/json',
    TextJavascript = 'text/javascript',
    TextHtml = 'text/html'
}

export function PageFullFromJSON(json: any): PageFull {
    return PageFullFromJSONTyped(json, false);
}

export function PageFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): PageFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'parentId': !exists(json, 'parent_id') ? undefined : json['parent_id'],
        'type': json['type'],
        'contactFields': !exists(json, 'contact_fields') ? undefined : json['contact_fields'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'name': json['name'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'metaDescription': !exists(json, 'meta_description') ? undefined : json['meta_description'],
        'body': json['body'],
        'mobileBody': !exists(json, 'mobile_body') ? undefined : json['mobile_body'],
        'hasMobileVersion': !exists(json, 'has_mobile_version') ? undefined : json['has_mobile_version'],
        'isVisible': !exists(json, 'is_visible') ? undefined : json['is_visible'],
        'isHomepage': !exists(json, 'is_homepage') ? undefined : json['is_homepage'],
        'metaTitle': !exists(json, 'meta_title') ? undefined : json['meta_title'],
        'layoutFile': !exists(json, 'layout_file') ? undefined : json['layout_file'],
        'sortOrder': !exists(json, 'sort_order') ? undefined : json['sort_order'],
        'searchKeywords': !exists(json, 'search_keywords') ? undefined : json['search_keywords'],
        'metaKeywords': !exists(json, 'meta_keywords') ? undefined : json['meta_keywords'],
        'feed': json['feed'],
        'link': json['link'],
        'contentType': !exists(json, 'content_type') ? undefined : json['content_type'],
    };
}

export function PageFullToJSON(value?: PageFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'parent_id': value.parentId,
        'type': value.type,
        'contact_fields': value.contactFields,
        'email': value.email,
        'name': value.name,
        'url': value.url,
        'meta_description': value.metaDescription,
        'body': value.body,
        'mobile_body': value.mobileBody,
        'has_mobile_version': value.hasMobileVersion,
        'is_visible': value.isVisible,
        'is_homepage': value.isHomepage,
        'meta_title': value.metaTitle,
        'layout_file': value.layoutFile,
        'sort_order': value.sortOrder,
        'search_keywords': value.searchKeywords,
        'meta_keywords': value.metaKeywords,
        'feed': value.feed,
        'link': value.link,
        'content_type': value.contentType,
    };
}



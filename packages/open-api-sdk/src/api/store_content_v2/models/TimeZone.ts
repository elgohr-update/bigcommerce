/* tslint:disable */
/* eslint-disable */
/**
 * Content
 * Manage blog posts, blog tags, content pages, and redirects.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### Note * Redirects V2 are deprecated; use [V3 Redirects](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/getredirects) instead. * Pages V2 are deprecated; use [Pages V3](https://developer.bigcommerce.com/api-reference/store-management/pages) instead.   </div> </div> </div>
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DateFormat,
    DateFormatFromJSON,
    DateFormatFromJSONTyped,
    DateFormatToJSON,
} from './';

/**
 * 
 * @export
 * @interface TimeZone
 */
export interface TimeZone {
    /**
     * a string identifying the time zone, in the format: <Continent-name>/<City-name>.
     * @type {string}
     * @memberof TimeZone
     */
    name?: string;
    /**
     * a negative or positive number, identifying the offset from UTC/GMT, in seconds, during winter/standard time.
     * @type {number}
     * @memberof TimeZone
     */
    rawOffset?: number;
    /**
     * "-/+" offset from UTC/GMT, in seconds, during summer/daylight saving time.
     * @type {number}
     * @memberof TimeZone
     */
    dstOffset?: number;
    /**
     * a boolean indicating whether this time zone observes daylight saving time.
     * @type {boolean}
     * @memberof TimeZone
     */
    dstCorrection?: boolean;
    /**
     * 
     * @type {DateFormat}
     * @memberof TimeZone
     */
    dateFormat?: DateFormat;
}

export function TimeZoneFromJSON(json: any): TimeZone {
    return TimeZoneFromJSONTyped(json, false);
}

export function TimeZoneFromJSONTyped(json: any, ignoreDiscriminator: boolean): TimeZone {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'rawOffset': !exists(json, 'raw_offset') ? undefined : json['raw_offset'],
        'dstOffset': !exists(json, 'dst_offset') ? undefined : json['dst_offset'],
        'dstCorrection': !exists(json, 'dst_correction') ? undefined : json['dst_correction'],
        'dateFormat': !exists(json, 'date_format') ? undefined : DateFormatFromJSON(json['date_format']),
    };
}

export function TimeZoneToJSON(value?: TimeZone | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'raw_offset': value.rawOffset,
        'dst_offset': value.dstOffset,
        'dst_correction': value.dstCorrection,
        'date_format': DateFormatToJSON(value.dateFormat),
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Content
 * Manage blog posts, blog tags, content pages, and redirects.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### Note * Redirects V2 are deprecated; use [V3 Redirects](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/getredirects) instead. * Pages V2 are deprecated; use [Pages V3](https://developer.bigcommerce.com/api-reference/store-management/pages) instead.   </div> </div> </div>
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CategoryAccessLevel
 */
export interface CategoryAccessLevel {
    /**
     * + `all` - Customers can access all categories
     *  + `specific`  - Customers can access a specific list of categories
     * + `none` - Customers are prevented from viewing any of the categories in this group.
     * @type {string}
     * @memberof CategoryAccessLevel
     */
    type?: CategoryAccessLevelTypeEnum;
    /**
     * Is an array of category IDs and should be supplied only if `type` is specific.
     * @type {Array<string>}
     * @memberof CategoryAccessLevel
     */
    categories?: Array<string>;
}

/**
* @export
* @enum {string}
*/
export enum CategoryAccessLevelTypeEnum {
    All = 'all',
    Specific = 'specific',
    None = 'none'
}

export function CategoryAccessLevelFromJSON(json: any): CategoryAccessLevel {
    return CategoryAccessLevelFromJSONTyped(json, false);
}

export function CategoryAccessLevelFromJSONTyped(json: any, ignoreDiscriminator: boolean): CategoryAccessLevel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'categories': !exists(json, 'categories') ? undefined : json['categories'],
    };
}

export function CategoryAccessLevelToJSON(value?: CategoryAccessLevel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'categories': value.categories,
    };
}



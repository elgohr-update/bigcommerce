/* tslint:disable */
/* eslint-disable */
/**
 * Content
 * Manage blog posts, blog tags, content pages, and redirects.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### Note * Redirects V2 are deprecated; use [V3 Redirects](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/getredirects) instead. * Pages V2 are deprecated; use [Pages V3](https://developer.bigcommerce.com/api-reference/store-management/pages) instead.   </div> </div> </div>
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CountResponse,
    CountResponseFromJSON,
    CountResponseToJSON,
    Redirect,
    RedirectFromJSON,
    RedirectToJSON,
} from '../models';

export interface CreateARedirectRequest {
    accept: string;
    contentType: string;
    body: Redirect;
}

export interface DeleteARedirectRequest {
    id: number;
    accept: string;
    contentType: string;
}

export interface DeleteAllRedirectsRequest {
    accept: string;
    contentType: string;
}

export interface GetACountOfRedirectsRequest {
    accept: string;
    contentType: string;
}

export interface GetAListofRedirectsRequest {
    accept: string;
    contentType: string;
    page?: number;
    limit?: number;
}

export interface GetARedirectURLRequest {
    id: number;
    accept: string;
    contentType: string;
}

export interface UpdateARedirectURLRequest {
    id: number;
    accept: string;
    contentType: string;
    body: Redirect;
}

/**
 * 
 */
export class RedirectsApi extends runtime.BaseAPI {

    /**
     * Creates a *Redirect URL*.  **Required Fields** *   path *   forward  **Read Only** *   url  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see [Upsert Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/upsertredirects) to upsert new redirect data.  </div> </div> </div>
     * Create a Redirect
     */
    async createARedirectRaw(requestParameters: CreateARedirectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Redirect>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling createARedirect.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling createARedirect.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createARedirect.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/redirects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RedirectToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RedirectFromJSON(jsonValue));
    }

    /**
     * Creates a *Redirect URL*.  **Required Fields** *   path *   forward  **Read Only** *   url  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see [Upsert Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/upsertredirects) to upsert new redirect data.  </div> </div> </div>
     * Create a Redirect
     */
    async createARedirect(requestParameters: CreateARedirectRequest, initOverrides?: RequestInit): Promise<Redirect> {
        const response = await this.createARedirectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a *Redirect URL*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see [Delete Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/deleteredirects) to delete a redirect URL.   </div> </div> </div>
     * Delete a Redirect
     */
    async deleteARedirectRaw(requestParameters: DeleteARedirectRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteARedirect.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteARedirect.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteARedirect.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/redirects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a *Redirect URL*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see [Delete Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/deleteredirects) to delete a redirect URL.   </div> </div> </div>
     * Delete a Redirect
     */
    async deleteARedirect(requestParameters: DeleteARedirectRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteARedirectRaw(requestParameters, initOverrides);
    }

    /**
     * By default, it deletes all *Redirect URLs* in a store.   <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see [Delete Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/deleteredirects) to delete redirects URLs.   </div> </div> </div>
     * Delete All Redirects
     */
    async deleteAllRedirectsRaw(requestParameters: DeleteAllRedirectsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteAllRedirects.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteAllRedirects.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/redirects`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * By default, it deletes all *Redirect URLs* in a store.   <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see [Delete Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/deleteredirects) to delete redirects URLs.   </div> </div> </div>
     * Delete All Redirects
     */
    async deleteAllRedirects(requestParameters: DeleteAllRedirectsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAllRedirectsRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a count of *Redirect URLs* in a store.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see  [Get Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/getredirects) to get a count of redirects. </div> </div> </div>
     * Get a Count of Redirects
     */
    async getACountOfRedirectsRaw(requestParameters: GetACountOfRedirectsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CountResponse>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getACountOfRedirects.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getACountOfRedirects.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/redirects/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CountResponseFromJSON(jsonValue));
    }

    /**
     * Gets a count of *Redirect URLs* in a store.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see  [Get Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/getredirects) to get a count of redirects. </div> </div> </div>
     * Get a Count of Redirects
     */
    async getACountOfRedirects(requestParameters: GetACountOfRedirectsRequest, initOverrides?: RequestInit): Promise<CountResponse> {
        const response = await this.getACountOfRedirectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list all *Redirect URLs*.   <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see  [Get Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/getredirects) to manage redirects URLs. </div> </div> </div>
     * Get All Redirects
     */
    async getAListofRedirectsRaw(requestParameters: GetAListofRedirectsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Redirect>>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getAListofRedirects.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getAListofRedirects.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/redirects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RedirectFromJSON));
    }

    /**
     * Returns a list all *Redirect URLs*.   <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see  [Get Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/getredirects) to manage redirects URLs. </div> </div> </div>
     * Get All Redirects
     */
    async getAListofRedirects(requestParameters: GetAListofRedirectsRequest, initOverrides?: RequestInit): Promise<Array<Redirect>> {
        const response = await this.getAListofRedirectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a single *Redirect URL*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see [Get Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/getredirects) to get a redirect URL.  </div> </div> </div> 
     * Get a Redirect
     */
    async getARedirectURLRaw(requestParameters: GetARedirectURLRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Redirect>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getARedirectURL.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getARedirectURL.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getARedirectURL.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/redirects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RedirectFromJSON(jsonValue));
    }

    /**
     * Returns a single *Redirect URL*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see [Get Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/getredirects) to get a redirect URL.  </div> </div> </div> 
     * Get a Redirect
     */
    async getARedirectURL(requestParameters: GetARedirectURLRequest, initOverrides?: RequestInit): Promise<Redirect> {
        const response = await this.getARedirectURLRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a *Redirect URL*.  **Required Fields** *   path *   forward  **Read Only Fields** *   url  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see [Upsert Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/upsertredirects) to update redirect data.  </div> </div> </div> 
     * Update a Redirect
     */
    async updateARedirectURLRaw(requestParameters: UpdateARedirectURLRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Redirect>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateARedirectURL.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling updateARedirectURL.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling updateARedirectURL.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateARedirectURL.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/redirects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RedirectToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RedirectFromJSON(jsonValue));
    }

    /**
     * Updates a *Redirect URL*.  **Required Fields** *   path *   forward  **Read Only Fields** *   url  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  ### **Deprecated**  Avoid using this API operation if possible. It will be removed in a future version.  For the most up-to-date version of this API, see [Upsert Redirects v3](https://developer.bigcommerce.com/api-reference/storefront/redirects/redirects/upsertredirects) to update redirect data.  </div> </div> </div> 
     * Update a Redirect
     */
    async updateARedirectURL(requestParameters: UpdateARedirectURLRequest, initOverrides?: RequestInit): Promise<Redirect> {
        const response = await this.updateARedirectURLRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

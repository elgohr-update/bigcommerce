/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    FormFieldValueFull,
    FormFieldValueFullFromJSON,
    FormFieldValueFullToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
} from '../models';

export interface CustomerFormFieldValuePUTRequest {
    formFieldValueFull?: Array<FormFieldValueFull>;
}

export interface CustomerFormFieldsGetRequest {
    accept?: string;
    contentType?: string;
    page?: number;
    limit?: number;
    customerId?: number;
    addressId?: number;
    fieldName?: string;
    fieldType?: CustomerFormFieldsGetFieldTypeEnum;
}

/**
 * 
 */
export class CustomerFormFieldValuesApi extends runtime.BaseAPI {

    /**
     * Updates form field values on the Customer or Customer Address objects. Multiple form field values can be updated in one call.  Upsert checks for an existing record, if there is none it creates the record, if there is a matching record it updates that record.  To learn more about editing form fields, see [Adding and Editing Fields in the Account Signup Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields).  **Limits** * Limit of 10 concurrent requests.
     * Upsert Customer Form Field Values
     */
    async customerFormFieldValuePUTRaw(requestParameters: CustomerFormFieldValuePUTRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2002>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/form-field-values`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.formFieldValueFull.map(FormFieldValueFullToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Updates form field values on the Customer or Customer Address objects. Multiple form field values can be updated in one call.  Upsert checks for an existing record, if there is none it creates the record, if there is a matching record it updates that record.  To learn more about editing form fields, see [Adding and Editing Fields in the Account Signup Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields).  **Limits** * Limit of 10 concurrent requests.
     * Upsert Customer Form Field Values
     */
    async customerFormFieldValuePUT(requestParameters: CustomerFormFieldValuePUTRequest, initOverrides?: RequestInit): Promise<InlineResponse2002> {
        const response = await this.customerFormFieldValuePUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of form field values for the Customer or Customer Address object.  To learn about adding and managing form fields, see [Adding and Editing Fields in the Account Signup Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields).
     * Get Customer Form Field Values
     */
    async customerFormFieldsGetRaw(requestParameters: CustomerFormFieldsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.customerId !== undefined) {
            queryParameters['customer_id'] = requestParameters.customerId;
        }

        if (requestParameters.addressId !== undefined) {
            queryParameters['address_id'] = requestParameters.addressId;
        }

        if (requestParameters.fieldName !== undefined) {
            queryParameters['field_name'] = requestParameters.fieldName;
        }

        if (requestParameters.fieldType !== undefined) {
            queryParameters['field_type'] = requestParameters.fieldType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/form-field-values`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Returns a list of form field values for the Customer or Customer Address object.  To learn about adding and managing form fields, see [Adding and Editing Fields in the Account Signup Form](https://support.bigcommerce.com/s/article/Editing-Form-Fields).
     * Get Customer Form Field Values
     */
    async customerFormFieldsGet(requestParameters: CustomerFormFieldsGetRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.customerFormFieldsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CustomerFormFieldsGetFieldTypeEnum {
    Checkboxes = 'checkboxes',
    Date = 'date',
    Multiline = 'multiline',
    Numbers = 'numbers',
    Password = 'password',
    Radiobuttons = 'radiobuttons',
    Text = 'text',
    Picklist = 'picklist'
}

/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AttributePost,
    AttributePostFromJSON,
    AttributePostToJSON,
    AttributePut,
    AttributePutFromJSON,
    AttributePutToJSON,
    CustomerAttributesResponse,
    CustomerAttributesResponseFromJSON,
    CustomerAttributesResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface CustomersAttributesDeleteRequest {
    idin: Array<number>;
    accept?: string;
    contentType?: string;
}

export interface CustomersAttributesGetRequest {
    page?: number;
    limit?: number;
    name?: string;
    namelike?: string;
    type?: string;
    dateCreated?: Date;
    dateCreatedmax?: Date;
    dateCreatedmin?: Date;
    dateModified?: Date;
    dateModifiedmax?: Date;
    dateModifiedmin?: Date;
    accept?: string;
    contentType?: string;
}

export interface CustomersAttributesPostRequest {
    attributePost: Array<AttributePost>;
    accept?: string;
    contentType?: string;
}

export interface CustomersAttributesPutRequest {
    attributePut: Array<AttributePut>;
    accept?: string;
    contentType?: string;
}

/**
 * 
 */
export class CustomerAttributesApi extends runtime.BaseAPI {

    /**
     * Deletes Customer Attributes from the store.  **Required Query** * id:in -- ID of the *Customer Attribute*
     * Delete Customer Attributes
     */
    async customersAttributesDeleteRaw(requestParameters: CustomersAttributesDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.idin === null || requestParameters.idin === undefined) {
            throw new runtime.RequiredError('idin','Required parameter requestParameters.idin was null or undefined when calling customersAttributesDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.idin) {
            queryParameters['id:in'] = requestParameters.idin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/attributes`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes Customer Attributes from the store.  **Required Query** * id:in -- ID of the *Customer Attribute*
     * Delete Customer Attributes
     */
    async customersAttributesDelete(requestParameters: CustomersAttributesDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.customersAttributesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of Customer Attributes. You can pass in optional filter parameters.
     * Get All Customer Attributes
     */
    async customersAttributesGetRaw(requestParameters: CustomersAttributesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerAttributesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.namelike !== undefined) {
            queryParameters['name:like'] = requestParameters.namelike;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.dateCreated !== undefined) {
            queryParameters['date_created'] = (requestParameters.dateCreated as any).toISOString();
        }

        if (requestParameters.dateCreatedmax !== undefined) {
            queryParameters['date_created:max'] = (requestParameters.dateCreatedmax as any).toISOString();
        }

        if (requestParameters.dateCreatedmin !== undefined) {
            queryParameters['date_created:min'] = (requestParameters.dateCreatedmin as any).toISOString();
        }

        if (requestParameters.dateModified !== undefined) {
            queryParameters['date_modified'] = (requestParameters.dateModified as any).toISOString();
        }

        if (requestParameters.dateModifiedmax !== undefined) {
            queryParameters['date_modified:max'] = (requestParameters.dateModifiedmax as any).toISOString();
        }

        if (requestParameters.dateModifiedmin !== undefined) {
            queryParameters['date_modified:min'] = (requestParameters.dateModifiedmin as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/attributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributesResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of Customer Attributes. You can pass in optional filter parameters.
     * Get All Customer Attributes
     */
    async customersAttributesGet(requestParameters: CustomersAttributesGetRequest, initOverrides?: RequestInit): Promise<CustomerAttributesResponse> {
        const response = await this.customersAttributesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a Customer Attribute. Multiple customer attributes can be created in one call.  **Required Fields** * name * type  **Limits** * Limit of 3 concurrent requests.  **Notes**  Once the data type is set, it cannot be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.  Customer attributes are created separately from the customer. After the name and type are created, then the attributes can be added to the customer.  A store cannot have more than 50 customer attributes.
     * Create a Customer Attribute
     */
    async customersAttributesPostRaw(requestParameters: CustomersAttributesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerAttributesResponse>> {
        if (requestParameters.attributePost === null || requestParameters.attributePost === undefined) {
            throw new runtime.RequiredError('attributePost','Required parameter requestParameters.attributePost was null or undefined when calling customersAttributesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/attributes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributePost.map(AttributePostToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributesResponseFromJSON(jsonValue));
    }

    /**
     * Creates a Customer Attribute. Multiple customer attributes can be created in one call.  **Required Fields** * name * type  **Limits** * Limit of 3 concurrent requests.  **Notes**  Once the data type is set, it cannot be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.  Customer attributes are created separately from the customer. After the name and type are created, then the attributes can be added to the customer.  A store cannot have more than 50 customer attributes.
     * Create a Customer Attribute
     */
    async customersAttributesPost(requestParameters: CustomersAttributesPostRequest, initOverrides?: RequestInit): Promise<CustomerAttributesResponse> {
        const response = await this.customersAttributesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a Customer Attribute. Multiple customer attributes can be updated in one call.  **Required Fields** * id -- ID of the *Customer Attribute*  Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.  **Limits** * Limit of 3 concurrent requests.
     * Update a Customer Attribute
     */
    async customersAttributesPutRaw(requestParameters: CustomersAttributesPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerAttributesResponse>> {
        if (requestParameters.attributePut === null || requestParameters.attributePut === undefined) {
            throw new runtime.RequiredError('attributePut','Required parameter requestParameters.attributePut was null or undefined when calling customersAttributesPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/attributes`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attributePut.map(AttributePutToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributesResponseFromJSON(jsonValue));
    }

    /**
     * Updates a Customer Attribute. Multiple customer attributes can be updated in one call.  **Required Fields** * id -- ID of the *Customer Attribute*  Once the data type is set, it can not be changed. The attribute will need to be deleted then created again with the new data type. This will also delete it from the customer.  **Limits** * Limit of 3 concurrent requests.
     * Update a Customer Attribute
     */
    async customersAttributesPut(requestParameters: CustomersAttributesPutRequest, initOverrides?: RequestInit): Promise<CustomerAttributesResponse> {
        const response = await this.customersAttributesPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

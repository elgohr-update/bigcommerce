/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BankAccountInstrument,
    BankAccountInstrumentFromJSON,
    BankAccountInstrumentToJSON,
    CardInstrument,
    CardInstrumentFromJSON,
    CardInstrumentToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PayPalAccountInstrument,
    PayPalAccountInstrumentFromJSON,
    PayPalAccountInstrumentToJSON,
} from '../models';

export interface ListstoredinstrumentsRequest {
    customerId: string;
}

/**
 * 
 */
export class CustomerStoredInstrumentsApi extends runtime.BaseAPI {

    /**
     * Lists all available stored instruments for a customer. This list will include all types of stored instruments namely card, account and bank_account instruments  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > * This endpoint is in beta.  </div> </div> </div>
     * Get Stored Instruments (Beta)
     */
    async liststoredinstrumentsRaw(requestParameters: ListstoredinstrumentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CardInstrument | PayPalAccountInstrument | BankAccountInstrument>>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling liststoredinstruments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customerId}/stored-instruments`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CardInstrument | PayPalAccountInstrument | BankAccountInstrumentFromJSON));
    }

    /**
     * Lists all available stored instruments for a customer. This list will include all types of stored instruments namely card, account and bank_account instruments  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > * This endpoint is in beta.  </div> </div> </div>
     * Get Stored Instruments (Beta)
     */
    async liststoredinstruments(requestParameters: ListstoredinstrumentsRequest, initOverrides?: RequestInit): Promise<Array<CardInstrument | PayPalAccountInstrument | BankAccountInstrument>> {
        const response = await this.liststoredinstrumentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConsentFull,
    ConsentFullFromJSON,
    ConsentFullToJSON,
    DeclareCustomerConsentRequest,
    DeclareCustomerConsentRequestFromJSON,
    DeclareCustomerConsentRequestToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface CustomersConsentByCustomerIdGETRequest {
    customerId: string;
}

export interface CustomersConsentByCustomerIdPUTRequest {
    customerId: string;
    contentType?: string;
    declareCustomerConsentRequest?: DeclareCustomerConsentRequest;
}

/**
 * 
 */
export class CustomerConsentApi extends runtime.BaseAPI {

    /**
     * Gets the status of a customer\'s consent to allow data collection by cookies and scripts while shopping on a storefront.
     * Get Customer Consent
     */
    async customersConsentByCustomerIdGETRaw(requestParameters: CustomersConsentByCustomerIdGETRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ConsentFull>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling customersConsentByCustomerIdGET.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customerId}/consent`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsentFullFromJSON(jsonValue));
    }

    /**
     * Gets the status of a customer\'s consent to allow data collection by cookies and scripts while shopping on a storefront.
     * Get Customer Consent
     */
    async customersConsentByCustomerIdGET(requestParameters: CustomersConsentByCustomerIdGETRequest, initOverrides?: RequestInit): Promise<ConsentFull> {
        const response = await this.customersConsentByCustomerIdGETRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the status of a customer\'s consent to allow data collection by cookies and scripts while shopping on a storefront.
     * Update Customer Consent
     */
    async customersConsentByCustomerIdPUTRaw(requestParameters: CustomersConsentByCustomerIdPUTRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ConsentFull>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling customersConsentByCustomerIdPUT.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/{customerId}/consent`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeclareCustomerConsentRequestToJSON(requestParameters.declareCustomerConsentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsentFullFromJSON(jsonValue));
    }

    /**
     * Updates the status of a customer\'s consent to allow data collection by cookies and scripts while shopping on a storefront.
     * Update Customer Consent
     */
    async customersConsentByCustomerIdPUT(requestParameters: CustomersConsentByCustomerIdPUTRequest, initOverrides?: RequestInit): Promise<ConsentFull> {
        const response = await this.customersConsentByCustomerIdPUTRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AttribueValueBase,
    AttribueValueBaseFromJSON,
    AttribueValueBaseToJSON,
    CustomerAttributeValueCollectionResponse,
    CustomerAttributeValueCollectionResponseFromJSON,
    CustomerAttributeValueCollectionResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface CustomersAttributeValuesDeleteRequest {
    idin: Array<number>;
    accept?: string;
    contentType?: string;
}

export interface CustomersAttributeValuesGetRequest {
    accept?: string;
    contentType?: string;
    page?: number;
    limit?: number;
    customerIdin?: Array<number>;
    attributeIdin?: Array<number>;
    name?: string;
    dateCreated?: Date;
    dateCreatedmax?: string;
    dateCreatedmin?: Date;
    dateModified?: Date;
    dateModifiedmax?: Date;
    dateModifiedmin?: string;
}

export interface CustomersAttributeValuesPutRequest {
    attribueValueBase: Array<AttribueValueBase>;
    accept?: string;
    contentType?: string;
}

/**
 * 
 */
export class CustomerAttributeValuesApi extends runtime.BaseAPI {

    /**
     * Deletes Customer Attribute Values. Deletes the attribute value from the customer.  **Required Query** * id:in - ID of the *Customer Attribute Value*
     * Delete Customer Attribute Values
     */
    async customersAttributeValuesDeleteRaw(requestParameters: CustomersAttributeValuesDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.idin === null || requestParameters.idin === undefined) {
            throw new runtime.RequiredError('idin','Required parameter requestParameters.idin was null or undefined when calling customersAttributeValuesDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.idin) {
            queryParameters['id:in'] = requestParameters.idin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/attribute-values`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes Customer Attribute Values. Deletes the attribute value from the customer.  **Required Query** * id:in - ID of the *Customer Attribute Value*
     * Delete Customer Attribute Values
     */
    async customersAttributeValuesDelete(requestParameters: CustomersAttributeValuesDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.customersAttributeValuesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of Customer Attribute Values. Optional filter parameters can be passed in.
     * Get All Customer Attribute Values
     */
    async customersAttributeValuesGetRaw(requestParameters: CustomersAttributeValuesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerAttributeValueCollectionResponse>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.customerIdin) {
            queryParameters['customer_id:in'] = requestParameters.customerIdin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.attributeIdin) {
            queryParameters['attribute_id:in'] = requestParameters.attributeIdin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.dateCreated !== undefined) {
            queryParameters['date_created'] = (requestParameters.dateCreated as any).toISOString();
        }

        if (requestParameters.dateCreatedmax !== undefined) {
            queryParameters['date_created:max'] = requestParameters.dateCreatedmax;
        }

        if (requestParameters.dateCreatedmin !== undefined) {
            queryParameters['date_created:min'] = (requestParameters.dateCreatedmin as any).toISOString();
        }

        if (requestParameters.dateModified !== undefined) {
            queryParameters['date_modified'] = (requestParameters.dateModified as any).toISOString();
        }

        if (requestParameters.dateModifiedmax !== undefined) {
            queryParameters['date_modified:max'] = (requestParameters.dateModifiedmax as any).toISOString();
        }

        if (requestParameters.dateModifiedmin !== undefined) {
            queryParameters['date_modified:min'] = requestParameters.dateModifiedmin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/attribute-values`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributeValueCollectionResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of Customer Attribute Values. Optional filter parameters can be passed in.
     * Get All Customer Attribute Values
     */
    async customersAttributeValuesGet(requestParameters: CustomersAttributeValuesGetRequest, initOverrides?: RequestInit): Promise<CustomerAttributeValueCollectionResponse> {
        const response = await this.customersAttributeValuesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upserts Customer Attribute Values. Updates the attribute values on the Customer. Multiple customer attribute values can be updated in one call.  Upsert checks for an existing record. If there is none, it creates the record, if there is a matching record, it updates that record.  **Limits** * 10 per call limit.
     * Upsert Customer Attribute Values
     */
    async customersAttributeValuesPutRaw(requestParameters: CustomersAttributeValuesPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerAttributeValueCollectionResponse>> {
        if (requestParameters.attribueValueBase === null || requestParameters.attribueValueBase === undefined) {
            throw new runtime.RequiredError('attribueValueBase','Required parameter requestParameters.attribueValueBase was null or undefined when calling customersAttributeValuesPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers/attribute-values`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.attribueValueBase.map(AttribueValueBaseToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerAttributeValueCollectionResponseFromJSON(jsonValue));
    }

    /**
     * Upserts Customer Attribute Values. Updates the attribute values on the Customer. Multiple customer attribute values can be updated in one call.  Upsert checks for an existing record. If there is none, it creates the record, if there is a matching record, it updates that record.  **Limits** * 10 per call limit.
     * Upsert Customer Attribute Values
     */
    async customersAttributeValuesPut(requestParameters: CustomersAttributeValuesPutRequest, initOverrides?: RequestInit): Promise<CustomerAttributeValueCollectionResponse> {
        const response = await this.customersAttributeValuesPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

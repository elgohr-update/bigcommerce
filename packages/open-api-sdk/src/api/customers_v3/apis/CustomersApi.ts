/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomerPost,
    CustomerPostFromJSON,
    CustomerPostToJSON,
    CustomerPut,
    CustomerPutFromJSON,
    CustomerPutToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
} from '../models';

export interface CustomersDeleteRequest {
    idin: Array<number>;
}

export interface CustomersGetRequest {
    page?: number;
    limit?: number;
    idin?: Array<number>;
    companyin?: Array<string>;
    customerGroupIdin?: Array<string>;
    dateCreated?: Date;
    dateCreatedmax?: string;
    dateCreatedmin?: Date;
    dateModified?: Date;
    dateModifiedmin?: string;
    dateModifiedmax?: Date;
    emailin?: string;
    namein?: Array<string>;
    namelike?: Array<string>;
    registrationIpAddressin?: Array<number>;
    include?: CustomersGetIncludeEnum;
    sort?: CustomersGetSortEnum;
}

export interface CustomersPostRequest {
    customerPost: Array<CustomerPost>;
}

export interface CustomersPutRequest {
    customerPut?: Array<CustomerPut>;
}

/**
 * 
 */
export class CustomersApi extends runtime.BaseAPI {

    /**
     * Deletes Customers.  **Required Query** * id:in -- ID of the customer  **Notes**  A query is required to delete customers. If not provided, a 204 is returned, with no changes to the data.
     * Delete Customers
     */
    async customersDeleteRaw(requestParameters: CustomersDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.idin === null || requestParameters.idin === undefined) {
            throw new runtime.RequiredError('idin','Required parameter requestParameters.idin was null or undefined when calling customersDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.idin) {
            queryParameters['id:in'] = requestParameters.idin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes Customers.  **Required Query** * id:in -- ID of the customer  **Notes**  A query is required to delete customers. If not provided, a 204 is returned, with no changes to the data.
     * Delete Customers
     */
    async customersDelete(requestParameters: CustomersDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.customersDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of Customers. Optional filter parameters can be passed in.  **Notes**  Attribute names are not available on the customer object.
     * Get All Customers
     */
    async customersGetRaw(requestParameters: CustomersGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.idin) {
            queryParameters['id:in'] = requestParameters.idin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.companyin) {
            queryParameters['company:in'] = requestParameters.companyin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.customerGroupIdin) {
            queryParameters['customer_group_id:in'] = requestParameters.customerGroupIdin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.dateCreated !== undefined) {
            queryParameters['date_created'] = (requestParameters.dateCreated as any).toISOString();
        }

        if (requestParameters.dateCreatedmax !== undefined) {
            queryParameters['date_created:max'] = requestParameters.dateCreatedmax;
        }

        if (requestParameters.dateCreatedmin !== undefined) {
            queryParameters['date_created:min'] = (requestParameters.dateCreatedmin as any).toISOString();
        }

        if (requestParameters.dateModified !== undefined) {
            queryParameters['date_modified'] = (requestParameters.dateModified as any).toISOString();
        }

        if (requestParameters.dateModifiedmin !== undefined) {
            queryParameters['date_modified:min'] = requestParameters.dateModifiedmin;
        }

        if (requestParameters.dateModifiedmax !== undefined) {
            queryParameters['date_modified:max'] = (requestParameters.dateModifiedmax as any).toISOString();
        }

        if (requestParameters.emailin !== undefined) {
            queryParameters['email:in'] = requestParameters.emailin;
        }

        if (requestParameters.namein) {
            queryParameters['name:in'] = requestParameters.namein.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.namelike) {
            queryParameters['name:like'] = requestParameters.namelike.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.registrationIpAddressin) {
            queryParameters['registration_ip_address:in'] = requestParameters.registrationIpAddressin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns a list of Customers. Optional filter parameters can be passed in.  **Notes**  Attribute names are not available on the customer object.
     * Get All Customers
     */
    async customersGet(requestParameters: CustomersGetRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.customersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates Customers. Multiple customers can be created in one call.  **Required Fields** * last_name * first_name * email  **Required Fields Customer Address** * first_name * city * country_code * state_or_province * last_name * address1 * postal_code  **Required Fields Attributes** * Attributes must be [created](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api/customer-attributes/customersattributespost) **BEFORE** creating a customer. * attribute_id * attribute_value -- This is input as a string, regardless of the [Type](/api-reference/customer-subscribers/v3-customers-api/models/type).  **Limits** * Limit of 10 concurrent requests.  **Notes**  A customer can be created with global access or channel-specific access. * **Global access:**   * Make sure the channel has `allow_global_logins` enabled. This is on by default only for the default storefront. Find more info at [Customer Settings > Channel](https://developer.bigcommerce.com/api-reference/store-management/customers-v3/customer-settings-channel/customersettingschannelget)   * Omit `channel_ids` field, or provide `channel_ids: null`. * **Channel-specific access:**   * Provide a `channel_ids` array containing the channels accessible by the customer.
     * Create Customers
     */
    async customersPostRaw(requestParameters: CustomersPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.customerPost === null || requestParameters.customerPost === undefined) {
            throw new runtime.RequiredError('customerPost','Required parameter requestParameters.customerPost was null or undefined when calling customersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerPost.map(CustomerPostToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Creates Customers. Multiple customers can be created in one call.  **Required Fields** * last_name * first_name * email  **Required Fields Customer Address** * first_name * city * country_code * state_or_province * last_name * address1 * postal_code  **Required Fields Attributes** * Attributes must be [created](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api/customer-attributes/customersattributespost) **BEFORE** creating a customer. * attribute_id * attribute_value -- This is input as a string, regardless of the [Type](/api-reference/customer-subscribers/v3-customers-api/models/type).  **Limits** * Limit of 10 concurrent requests.  **Notes**  A customer can be created with global access or channel-specific access. * **Global access:**   * Make sure the channel has `allow_global_logins` enabled. This is on by default only for the default storefront. Find more info at [Customer Settings > Channel](https://developer.bigcommerce.com/api-reference/store-management/customers-v3/customer-settings-channel/customersettingschannelget)   * Omit `channel_ids` field, or provide `channel_ids: null`. * **Channel-specific access:**   * Provide a `channel_ids` array containing the channels accessible by the customer.
     * Create Customers
     */
    async customersPost(requestParameters: CustomersPostRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.customersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates Customers. Subresource updates are not supported. Multiple customers can be updated in one call.  **Required Fields** * id -- ID of the *Customer* This must be included in the request body  **Read Only Fields** * id * registration_ip_address * date_created * date_modified   **Notes**  * Attributes Values can not be updated using Update a Customer. Use the Update a [Customer Attribute Values](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api/customer-attribute-values/customersattributevaluesput) endpoint. * channel_ids -- Updating the list of channels a customer can access may create some side effects in a multi-storefront situation. This list determines which customer account we will use to authenticate a shopper given a channel.
     * Update Customers
     */
    async customersPutRaw(requestParameters: CustomersPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/customers`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.customerPut.map(CustomerPutToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Updates Customers. Subresource updates are not supported. Multiple customers can be updated in one call.  **Required Fields** * id -- ID of the *Customer* This must be included in the request body  **Read Only Fields** * id * registration_ip_address * date_created * date_modified   **Notes**  * Attributes Values can not be updated using Update a Customer. Use the Update a [Customer Attribute Values](https://developer.bigcommerce.com/api-reference/customer-subscribers/v3-customers-api/customer-attribute-values/customersattributevaluesput) endpoint. * channel_ids -- Updating the list of channels a customer can access may create some side effects in a multi-storefront situation. This list determines which customer account we will use to authenticate a shopper given a channel.
     * Update Customers
     */
    async customersPut(requestParameters: CustomersPutRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.customersPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CustomersGetIncludeEnum {
    Addresses = 'addresses',
    Storecredit = 'storecredit',
    Attributes = 'attributes',
    Formfields = 'formfields'
}
/**
    * @export
    * @enum {string}
    */
export enum CustomersGetSortEnum {
    DateCreatedasc = 'date_created:asc',
    DateCreateddesc = 'date_created:desc',
    LastNameasc = 'last_name:asc',
    LastNamedesc = 'last_name:desc',
    DateModifiedasc = 'date_modified:asc',
    DateModifieddesc = 'date_modified:desc'
}

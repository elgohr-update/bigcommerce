/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CustomerAttributeValue
 */
export interface CustomerAttributeValue {
    /**
     * Attribute ID.
     * @type {number}
     * @memberof CustomerAttributeValue
     */
    attributeId: number;
    /**
     * Attribute value. This will always be a string, regardless of the attributes type. 
     * 
     * Corresponds to `value` used in customer attribute values `PUT` requests.
     * @type {string}
     * @memberof CustomerAttributeValue
     */
    attributeValue: string;
    /**
     * Attribute value ID.
     * @type {number}
     * @memberof CustomerAttributeValue
     */
    id?: number;
    /**
     * Customer ID.
     * @type {number}
     * @memberof CustomerAttributeValue
     */
    customerId: number;
    /**
     * The date on which the customer attribute value was modified.
     * @type {Date}
     * @memberof CustomerAttributeValue
     */
    dateModified?: Date;
    /**
     * The date of which the customer attribute value was created.
     * @type {Date}
     * @memberof CustomerAttributeValue
     */
    dateCreated?: Date;
}

export function CustomerAttributeValueFromJSON(json: any): CustomerAttributeValue {
    return CustomerAttributeValueFromJSONTyped(json, false);
}

export function CustomerAttributeValueFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerAttributeValue {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'attributeId': json['attribute_id'],
        'attributeValue': json['attribute_value'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'customerId': json['customer_id'],
        'dateModified': !exists(json, 'date_modified') ? undefined : (new Date(json['date_modified'])),
        'dateCreated': !exists(json, 'date_created') ? undefined : (new Date(json['date_created'])),
    };
}

export function CustomerAttributeValueToJSON(value?: CustomerAttributeValue | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'attribute_id': value.attributeId,
        'attribute_value': value.attributeValue,
        'id': value.id,
        'customer_id': value.customerId,
        'date_modified': value.dateModified === undefined ? undefined : (value.dateModified.toISOString()),
        'date_created': value.dateCreated === undefined ? undefined : (value.dateCreated.toISOString()),
    };
}



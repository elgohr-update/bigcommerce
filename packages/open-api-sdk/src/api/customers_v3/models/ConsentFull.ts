/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Response payload for the BigCommerce API.
 * @export
 * @interface ConsentFull
 */
export interface ConsentFull {
    /**
     * 
     * @type {Set<string>}
     * @memberof ConsentFull
     */
    allow?: Set<ConsentFullAllowEnum>;
    /**
     * 
     * @type {Set<string>}
     * @memberof ConsentFull
     */
    deny?: Set<ConsentFullDenyEnum>;
    /**
     * The date of which the customer consent was last updated.
     * @type {Date}
     * @memberof ConsentFull
     */
    updatedAt?: Date;
}

/**
* @export
* @enum {string}
*/
export enum ConsentFullAllowEnum {
    Essential = 'essential',
    Functional = 'functional',
    Analytics = 'analytics',
    Targeting = 'targeting'
}/**
* @export
* @enum {string}
*/
export enum ConsentFullDenyEnum {
    Essential = 'essential',
    Functional = 'functional',
    Analytics = 'analytics',
    Targeting = 'targeting'
}

export function ConsentFullFromJSON(json: any): ConsentFull {
    return ConsentFullFromJSONTyped(json, false);
}

export function ConsentFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConsentFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'allow': !exists(json, 'allow') ? undefined : json['allow'],
        'deny': !exists(json, 'deny') ? undefined : json['deny'],
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
    };
}

export function ConsentFullToJSON(value?: ConsentFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'allow': value.allow,
        'deny': value.deny,
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}



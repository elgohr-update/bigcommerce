/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Address,
    AddressFromJSON,
    AddressFromJSONTyped,
    AddressToJSON,
    MetaCollection,
    MetaCollectionFromJSON,
    MetaCollectionFromJSONTyped,
    MetaCollectionToJSON,
} from './';

/**
 * Response payload for the BigCommerce API.
 * @export
 * @interface AddressCollectionResponse
 */
export interface AddressCollectionResponse {
    /**
     * 
     * @type {Array<Address>}
     * @memberof AddressCollectionResponse
     */
    data?: Array<Address>;
    /**
     * 
     * @type {MetaCollection}
     * @memberof AddressCollectionResponse
     */
    meta?: MetaCollection;
}

export function AddressCollectionResponseFromJSON(json: any): AddressCollectionResponse {
    return AddressCollectionResponseFromJSONTyped(json, false);
}

export function AddressCollectionResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AddressCollectionResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : ((json['data'] as Array<any>).map(AddressFromJSON)),
        'meta': !exists(json, 'meta') ? undefined : MetaCollectionFromJSON(json['meta']),
    };
}

export function AddressCollectionResponseToJSON(value?: AddressCollectionResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': value.data === undefined ? undefined : ((value.data as Array<any>).map(AddressToJSON)),
        'meta': MetaCollectionToJSON(value.meta),
    };
}



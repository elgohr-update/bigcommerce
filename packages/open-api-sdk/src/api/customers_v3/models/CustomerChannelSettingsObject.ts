/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CustomerChannelSettingsObjectPrivacySettings,
    CustomerChannelSettingsObjectPrivacySettingsFromJSON,
    CustomerChannelSettingsObjectPrivacySettingsFromJSONTyped,
    CustomerChannelSettingsObjectPrivacySettingsToJSON,
    CustomerSettingsObjectCustomerGroupSettings,
    CustomerSettingsObjectCustomerGroupSettingsFromJSON,
    CustomerSettingsObjectCustomerGroupSettingsFromJSONTyped,
    CustomerSettingsObjectCustomerGroupSettingsToJSON,
} from './';

/**
 * 
 * @export
 * @interface CustomerChannelSettingsObject
 */
export interface CustomerChannelSettingsObject {
    /**
     * 
     * @type {CustomerChannelSettingsObjectPrivacySettings}
     * @memberof CustomerChannelSettingsObject
     */
    privacySettings?: CustomerChannelSettingsObjectPrivacySettings;
    /**
     * 
     * @type {CustomerSettingsObjectCustomerGroupSettings}
     * @memberof CustomerChannelSettingsObject
     */
    customerGroupSettings?: CustomerSettingsObjectCustomerGroupSettings;
    /**
     * * Determines if a channel allows global customer to login
     * * Determines if customers created on this channel will get global access/login
     * @type {boolean}
     * @memberof CustomerChannelSettingsObject
     */
    allowGlobalLogins?: boolean;
}

export function CustomerChannelSettingsObjectFromJSON(json: any): CustomerChannelSettingsObject {
    return CustomerChannelSettingsObjectFromJSONTyped(json, false);
}

export function CustomerChannelSettingsObjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerChannelSettingsObject {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'privacySettings': !exists(json, 'privacy_settings') ? undefined : CustomerChannelSettingsObjectPrivacySettingsFromJSON(json['privacy_settings']),
        'customerGroupSettings': !exists(json, 'customer_group_settings') ? undefined : CustomerSettingsObjectCustomerGroupSettingsFromJSON(json['customer_group_settings']),
        'allowGlobalLogins': !exists(json, 'allow_global_logins') ? undefined : json['allow_global_logins'],
    };
}

export function CustomerChannelSettingsObjectToJSON(value?: CustomerChannelSettingsObject | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'privacy_settings': CustomerChannelSettingsObjectPrivacySettingsToJSON(value.privacySettings),
        'customer_group_settings': CustomerSettingsObjectCustomerGroupSettingsToJSON(value.customerGroupSettings),
        'allow_global_logins': value.allowGlobalLogins,
    };
}



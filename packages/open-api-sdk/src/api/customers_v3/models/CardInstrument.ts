/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BillingAddress,
    BillingAddressFromJSON,
    BillingAddressFromJSONTyped,
    BillingAddressToJSON,
} from './';

/**
 * Details about a stored card instrument which includes details around billing, last 4 digits, issuer, etc.
 * @export
 * @interface CardInstrument
 */
export interface CardInstrument {
    /**
     * Type of instrument
     * @type {string}
     * @memberof CardInstrument
     */
    type?: CardInstrumentTypeEnum;
    /**
     * An identifier representing this stored instrument
     * @type {string}
     * @memberof CardInstrument
     */
    token?: string;
    /**
     * Identifies whether this stored instrument is default for the customer
     * @type {boolean}
     * @memberof CardInstrument
     */
    isDefault?: boolean;
    /**
     * Card brand
     * @type {string}
     * @memberof CardInstrument
     */
    brand?: string;
    /**
     * Expiry month for this card
     * @type {number}
     * @memberof CardInstrument
     */
    expiryMonth?: number;
    /**
     * Expiry year for this card
     * @type {number}
     * @memberof CardInstrument
     */
    expiryYear?: number;
    /**
     * Issuer identification number for this card
     * @type {string}
     * @memberof CardInstrument
     */
    issuerIdentificationNumber?: string;
    /**
     * Last four digits of this card
     * @type {string}
     * @memberof CardInstrument
     */
    last4?: string;
    /**
     * 
     * @type {BillingAddress}
     * @memberof CardInstrument
     */
    billingAddress?: BillingAddress;
}

/**
* @export
* @enum {string}
*/
export enum CardInstrumentTypeEnum {
    StoredCard = 'stored_card'
}

export function CardInstrumentFromJSON(json: any): CardInstrument {
    return CardInstrumentFromJSONTyped(json, false);
}

export function CardInstrumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): CardInstrument {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'token': !exists(json, 'token') ? undefined : json['token'],
        'isDefault': !exists(json, 'is_default') ? undefined : json['is_default'],
        'brand': !exists(json, 'brand') ? undefined : json['brand'],
        'expiryMonth': !exists(json, 'expiry_month') ? undefined : json['expiry_month'],
        'expiryYear': !exists(json, 'expiry_year') ? undefined : json['expiry_year'],
        'issuerIdentificationNumber': !exists(json, 'issuer_identification_number') ? undefined : json['issuer_identification_number'],
        'last4': !exists(json, 'last_4') ? undefined : json['last_4'],
        'billingAddress': !exists(json, 'billing_address') ? undefined : BillingAddressFromJSON(json['billing_address']),
    };
}

export function CardInstrumentToJSON(value?: CardInstrument | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'token': value.token,
        'is_default': value.isDefault,
        'brand': value.brand,
        'expiry_month': value.expiryMonth,
        'expiry_year': value.expiryYear,
        'issuer_identification_number': value.issuerIdentificationNumber,
        'last_4': value.last4,
        'billing_address': BillingAddressToJSON(value.billingAddress),
    };
}



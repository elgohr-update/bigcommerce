/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CustomerAddressesBase,
    CustomerAddressesBaseFromJSON,
    CustomerAddressesBaseFromJSONTyped,
    CustomerAddressesBaseToJSON,
    CustomerAttributesBase,
    CustomerAttributesBaseFromJSON,
    CustomerAttributesBaseFromJSONTyped,
    CustomerAttributesBaseToJSON,
    CustomerAuthenticationPostPut,
    CustomerAuthenticationPostPutFromJSON,
    CustomerAuthenticationPostPutFromJSONTyped,
    CustomerAuthenticationPostPutToJSON,
} from './';

/**
 * 
 * @export
 * @interface CustomerPost
 */
export interface CustomerPost {
    /**
     * The email of the customer. Must be unique.
     * @type {string}
     * @memberof CustomerPost
     */
    email: string;
    /**
     * The first name of the customer.
     * @type {string}
     * @memberof CustomerPost
     */
    firstName: string;
    /**
     * The last name of the customer.
     * @type {string}
     * @memberof CustomerPost
     */
    lastName: string;
    /**
     * The company of the customer.
     * @type {string}
     * @memberof CustomerPost
     */
    company?: string;
    /**
     * The phone number of the customer.
     * @type {string}
     * @memberof CustomerPost
     */
    phone?: string;
    /**
     * The customer notes.
     * @type {string}
     * @memberof CustomerPost
     */
    notes?: string;
    /**
     * The tax exempt category code for the customer.
     * @type {string}
     * @memberof CustomerPost
     */
    taxExemptCategory?: string;
    /**
     * ID of the group which this customer belongs to.
     * @type {number}
     * @memberof CustomerPost
     */
    customerGroupId?: number;
    /**
     * Array of customer addresses. Limited to 10
     * @type {Array<CustomerAddressesBase>}
     * @memberof CustomerPost
     */
    addresses?: Array<CustomerAddressesBase>;
    /**
     * Array of customer attributes. Limited to 10.
     * @type {Array<CustomerAttributesBase>}
     * @memberof CustomerPost
     */
    attributes?: Array<CustomerAttributesBase>;
    /**
     * 
     * @type {CustomerAuthenticationPostPut}
     * @memberof CustomerPost
     */
    authentication?: CustomerAuthenticationPostPut;
    /**
     * It determines if the customer is signed up to receive either product review or abandoned cart emails or recieve both emails.
     * @type {boolean}
     * @memberof CustomerPost
     */
    acceptsProductReviewAbandonedCartEmails?: boolean;
    /**
     * Store credit. 
     * @type {Array<object>}
     * @memberof CustomerPost
     */
    storeCreditAmounts?: Array<object>;
    /**
     * Channel ID the customer has been created from
     * @type {number}
     * @memberof CustomerPost
     */
    originChannelId?: number;
    /**
     * Array of channels the customer can access
     * @type {Array<number>}
     * @memberof CustomerPost
     */
    channelIds?: Array<number>;
}

export function CustomerPostFromJSON(json: any): CustomerPost {
    return CustomerPostFromJSONTyped(json, false);
}

export function CustomerPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerPost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'email': json['email'],
        'firstName': json['first_name'],
        'lastName': json['last_name'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'taxExemptCategory': !exists(json, 'tax_exempt_category') ? undefined : json['tax_exempt_category'],
        'customerGroupId': !exists(json, 'customer_group_id') ? undefined : json['customer_group_id'],
        'addresses': !exists(json, 'addresses') ? undefined : ((json['addresses'] as Array<any>).map(CustomerAddressesBaseFromJSON)),
        'attributes': !exists(json, 'attributes') ? undefined : ((json['attributes'] as Array<any>).map(CustomerAttributesBaseFromJSON)),
        'authentication': !exists(json, 'authentication') ? undefined : CustomerAuthenticationPostPutFromJSON(json['authentication']),
        'acceptsProductReviewAbandonedCartEmails': !exists(json, 'accepts_product_review_abandoned_cart_emails') ? undefined : json['accepts_product_review_abandoned_cart_emails'],
        'storeCreditAmounts': !exists(json, 'store_credit_amounts') ? undefined : json['store_credit_amounts'],
        'originChannelId': !exists(json, 'origin_channel_id') ? undefined : json['origin_channel_id'],
        'channelIds': !exists(json, 'channel_ids') ? undefined : json['channel_ids'],
    };
}

export function CustomerPostToJSON(value?: CustomerPost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'email': value.email,
        'first_name': value.firstName,
        'last_name': value.lastName,
        'company': value.company,
        'phone': value.phone,
        'notes': value.notes,
        'tax_exempt_category': value.taxExemptCategory,
        'customer_group_id': value.customerGroupId,
        'addresses': value.addresses === undefined ? undefined : ((value.addresses as Array<any>).map(CustomerAddressesBaseToJSON)),
        'attributes': value.attributes === undefined ? undefined : ((value.attributes as Array<any>).map(CustomerAttributesBaseToJSON)),
        'authentication': CustomerAuthenticationPostPutToJSON(value.authentication),
        'accepts_product_review_abandoned_cart_emails': value.acceptsProductReviewAbandonedCartEmails,
        'store_credit_amounts': value.storeCreditAmounts,
        'origin_channel_id': value.originChannelId,
        'channel_ids': value.channelIds,
    };
}



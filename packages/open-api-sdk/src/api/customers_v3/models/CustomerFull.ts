/* tslint:disable */
/* eslint-disable */
/**
 * Customers V3
 * Create and manage customers.  - [Authentication](#authentication) - [Resources](#resources)  ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/customers host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  ### OAuth Scopes  | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Customers                                    | modify     | `store_v2_customers`                          | | Customers                                    | read-only  | `store_v2_customers_read_only`                | | Stored Payment Instruments                   | modify     | `store_stored_payment_instruments`            | | Stored Payment Instruments                   | read-only  | `store_stored_payment_instruments_read_only`  |  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Resources * [Customer and Subscribers Overview](/api-docs/customers/customers-subscribers-overview).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressFull,
    AddressFullFromJSON,
    AddressFullFromJSONTyped,
    AddressFullToJSON,
    AttributeFull,
    AttributeFullFromJSON,
    AttributeFullFromJSONTyped,
    AttributeFullToJSON,
    CustomerAuthenticationBase,
    CustomerAuthenticationBaseFromJSON,
    CustomerAuthenticationBaseFromJSONTyped,
    CustomerAuthenticationBaseToJSON,
    FormFieldValueFull,
    FormFieldValueFullFromJSON,
    FormFieldValueFullFromJSONTyped,
    FormFieldValueFullToJSON,
} from './';

/**
 * 
 * @export
 * @interface CustomerFull
 */
export interface CustomerFull {
    /**
     * The email of the customer. Must be unique.
     * @type {string}
     * @memberof CustomerFull
     */
    email?: string;
    /**
     * The first name of the customer.
     * @type {string}
     * @memberof CustomerFull
     */
    firstName?: string;
    /**
     * The last name of the customer.
     * @type {string}
     * @memberof CustomerFull
     */
    lastName?: string;
    /**
     * The company of the customer.
     * @type {string}
     * @memberof CustomerFull
     */
    company?: string;
    /**
     * The phone number of the customer.
     * @type {string}
     * @memberof CustomerFull
     */
    phone?: string;
    /**
     * The IP address from which this customer was registered.
     * @type {string}
     * @memberof CustomerFull
     */
    registrationIpAddress?: string;
    /**
     * The customer notes.
     * @type {string}
     * @memberof CustomerFull
     */
    notes?: string;
    /**
     * The tax exempt category code for the customer.
     * @type {string}
     * @memberof CustomerFull
     */
    taxExemptCategory?: string;
    /**
     * ID of the group which this customer belongs to.
     * @type {number}
     * @memberof CustomerFull
     */
    customerGroupId?: number;
    /**
     * The unique numeric ID of the customer.
     * @type {number}
     * @memberof CustomerFull
     */
    id?: number;
    /**
     * The date on which the customer was modified.
     * @type {Date}
     * @memberof CustomerFull
     */
    dateModified?: Date;
    /**
     * The date of which the customer was created.
     * @type {Date}
     * @memberof CustomerFull
     */
    dateCreated?: Date;
    /**
     * Total number of customer addresses
     * @type {number}
     * @memberof CustomerFull
     */
    addressCount?: number;
    /**
     * Total number of customer attributes
     * @type {number}
     * @memberof CustomerFull
     */
    attributeCount?: number;
    /**
     * 
     * @type {CustomerAuthenticationBase}
     * @memberof CustomerFull
     */
    authentication?: CustomerAuthenticationBase;
    /**
     * Array of customer addresses. Limited to 10
     * @type {Array<AddressFull>}
     * @memberof CustomerFull
     */
    addresses?: Array<AddressFull>;
    /**
     * Array of customer attributes. Limited to 10.
     * @type {Array<AttributeFull>}
     * @memberof CustomerFull
     */
    attributes?: Array<AttributeFull>;
    /**
     * Array of form fields. Controlled by `formfields` parameter.
     * @type {Array<FormFieldValueFull>}
     * @memberof CustomerFull
     */
    formFields?: Array<FormFieldValueFull>;
    /**
     * Store credit. 
     * @type {Array<object>}
     * @memberof CustomerFull
     */
    storeCreditAmounts?: Array<object>;
    /**
     * It determines if the customer is signed up to receive either product review or abandoned cart emails or recieve both emails.
     * @type {boolean}
     * @memberof CustomerFull
     */
    acceptsProductReviewAbandonedCartEmails?: boolean;
    /**
     * Array of channel ids the Customer has access to.
     * @type {Array<number>}
     * @memberof CustomerFull
     */
    channelIds?: Array<number>;
}

export function CustomerFullFromJSON(json: any): CustomerFull {
    return CustomerFullFromJSONTyped(json, false);
}

export function CustomerFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'email': !exists(json, 'email') ? undefined : json['email'],
        'firstName': !exists(json, 'first_name') ? undefined : json['first_name'],
        'lastName': !exists(json, 'last_name') ? undefined : json['last_name'],
        'company': !exists(json, 'company') ? undefined : json['company'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'registrationIpAddress': !exists(json, 'registration_ip_address') ? undefined : json['registration_ip_address'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'taxExemptCategory': !exists(json, 'tax_exempt_category') ? undefined : json['tax_exempt_category'],
        'customerGroupId': !exists(json, 'customer_group_id') ? undefined : json['customer_group_id'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'dateModified': !exists(json, 'date_modified') ? undefined : (new Date(json['date_modified'])),
        'dateCreated': !exists(json, 'date_created') ? undefined : (new Date(json['date_created'])),
        'addressCount': !exists(json, 'address_count') ? undefined : json['address_count'],
        'attributeCount': !exists(json, 'attribute_count') ? undefined : json['attribute_count'],
        'authentication': !exists(json, 'authentication') ? undefined : CustomerAuthenticationBaseFromJSON(json['authentication']),
        'addresses': !exists(json, 'addresses') ? undefined : ((json['addresses'] as Array<any>).map(AddressFullFromJSON)),
        'attributes': !exists(json, 'attributes') ? undefined : ((json['attributes'] as Array<any>).map(AttributeFullFromJSON)),
        'formFields': !exists(json, 'form_fields') ? undefined : ((json['form_fields'] as Array<any>).map(FormFieldValueFullFromJSON)),
        'storeCreditAmounts': !exists(json, 'store_credit_amounts') ? undefined : json['store_credit_amounts'],
        'acceptsProductReviewAbandonedCartEmails': !exists(json, 'accepts_product_review_abandoned_cart_emails') ? undefined : json['accepts_product_review_abandoned_cart_emails'],
        'channelIds': !exists(json, 'channel_ids') ? undefined : json['channel_ids'],
    };
}

export function CustomerFullToJSON(value?: CustomerFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'email': value.email,
        'first_name': value.firstName,
        'last_name': value.lastName,
        'company': value.company,
        'phone': value.phone,
        'registration_ip_address': value.registrationIpAddress,
        'notes': value.notes,
        'tax_exempt_category': value.taxExemptCategory,
        'customer_group_id': value.customerGroupId,
        'id': value.id,
        'date_modified': value.dateModified === undefined ? undefined : (value.dateModified.toISOString()),
        'date_created': value.dateCreated === undefined ? undefined : (value.dateCreated.toISOString()),
        'address_count': value.addressCount,
        'attribute_count': value.attributeCount,
        'authentication': CustomerAuthenticationBaseToJSON(value.authentication),
        'addresses': value.addresses === undefined ? undefined : ((value.addresses as Array<any>).map(AddressFullToJSON)),
        'attributes': value.attributes === undefined ? undefined : ((value.attributes as Array<any>).map(AttributeFullToJSON)),
        'form_fields': value.formFields === undefined ? undefined : ((value.formFields as Array<any>).map(FormFieldValueFullToJSON)),
        'store_credit_amounts': value.storeCreditAmounts,
        'accepts_product_review_abandoned_cart_emails': value.acceptsProductReviewAbandonedCartEmails,
        'channel_ids': value.channelIds,
    };
}



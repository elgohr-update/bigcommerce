/* tslint:disable */
/* eslint-disable */
/**
 * Payment Processing
 * Process payments using payment instrument such as credit card. See [Payments Overview](https://developer.bigcommerce.com/api-docs/store-management/payment-processing) for more information.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorPaymentResponse,
    ErrorPaymentResponseFromJSON,
    ErrorPaymentResponseToJSON,
    PaymentRequest,
    PaymentRequestFromJSON,
    PaymentRequestToJSON,
    SuccessPaymentResponse,
    SuccessPaymentResponseFromJSON,
    SuccessPaymentResponseToJSON,
} from '../models';

export interface PaymentsPostRequest {
    authorization: string;
    paymentRequest: PaymentRequest;
    accept?: PaymentsPostAcceptEnum;
    contentType?: string;
}

/**
 * 
 */
export class ProcessPaymentApi extends runtime.BaseAPI {

    /**
     * Process payments for an order. See [Payment Processing](https://developer.bigcommerce.com/api-docs/store-management/payment-processing) for more information.
     * Process Payment
     */
    async paymentsPostRaw(requestParameters: PaymentsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SuccessPaymentResponse>> {
        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling paymentsPost.');
        }

        if (requestParameters.paymentRequest === null || requestParameters.paymentRequest === undefined) {
            throw new runtime.RequiredError('paymentRequest','Required parameter requestParameters.paymentRequest was null or undefined when calling paymentsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentRequestToJSON(requestParameters.paymentRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessPaymentResponseFromJSON(jsonValue));
    }

    /**
     * Process payments for an order. See [Payment Processing](https://developer.bigcommerce.com/api-docs/store-management/payment-processing) for more information.
     * Process Payment
     */
    async paymentsPost(requestParameters: PaymentsPostRequest, initOverrides?: RequestInit): Promise<SuccessPaymentResponse> {
        const response = await this.paymentsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum PaymentsPostAcceptEnum {
    ApplicationVndBcV1json = 'application/vnd.bc.v1+json'
}

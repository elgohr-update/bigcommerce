/* tslint:disable */
/* eslint-disable */
/**
 * Payment Processing
 * Process payments using payment instrument such as credit card. See [Payments Overview](https://developer.bigcommerce.com/api-docs/store-management/payment-processing) for more information.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PaymentMethodStoredInstrument,
    PaymentMethodStoredInstrumentFromJSON,
    PaymentMethodStoredInstrumentFromJSONTyped,
    PaymentMethodStoredInstrumentToJSON,
    SupportedCardInstrument,
    SupportedCardInstrumentFromJSON,
    SupportedCardInstrumentFromJSONTyped,
    SupportedCardInstrumentToJSON,
} from './';

/**
 * 
 * @export
 * @interface PaymentMethodFull
 */
export interface PaymentMethodFull {
    /**
     * Identifier for this payment method
     * @type {string}
     * @memberof PaymentMethodFull
     */
    id: string;
    /**
     * Name of this payment method
     * @type {string}
     * @memberof PaymentMethodFull
     */
    name: string;
    /**
     * 
     * @type {Array<PaymentMethodStoredInstrument>}
     * @memberof PaymentMethodFull
     */
    storedInstruments?: Array<PaymentMethodStoredInstrument>;
    /**
     * 
     * @type {Array<SupportedCardInstrument>}
     * @memberof PaymentMethodFull
     */
    supportedInstruments: Array<SupportedCardInstrument>;
    /**
     * Whether this payment method is on test mode
     * @type {boolean}
     * @memberof PaymentMethodFull
     */
    testMode: boolean;
    /**
     * Type to classify this payment method
     * @type {string}
     * @memberof PaymentMethodFull
     */
    type: string;
}

export function PaymentMethodFullFromJSON(json: any): PaymentMethodFull {
    return PaymentMethodFullFromJSONTyped(json, false);
}

export function PaymentMethodFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentMethodFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'storedInstruments': !exists(json, 'stored_instruments') ? undefined : ((json['stored_instruments'] as Array<any>).map(PaymentMethodStoredInstrumentFromJSON)),
        'supportedInstruments': ((json['supported_instruments'] as Array<any>).map(SupportedCardInstrumentFromJSON)),
        'testMode': json['test_mode'],
        'type': json['type'],
    };
}

export function PaymentMethodFullToJSON(value?: PaymentMethodFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'stored_instruments': value.storedInstruments === undefined ? undefined : ((value.storedInstruments as Array<any>).map(PaymentMethodStoredInstrumentToJSON)),
        'supported_instruments': ((value.supportedInstruments as Array<any>).map(SupportedCardInstrumentToJSON)),
        'test_mode': value.testMode,
        'type': value.type,
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Subscriptions
 * Manage newsletter and marketing email subscriptions on the storefront.  - [Additional Information](#additional-information)  ## Additional Information  * [Collecting Newsletter Subscriptions](https://support.bigcommerce.com/s/article/Collecting-Newsletter-Subscriptions) (support.bigcommerce.com) * [Customers Overview](https://developer.bigcommerce.com/api-docs/customers/customers-subscribers-overview) * [Working with Storefront APIs](https://developer.bigcommerce.com/api-docs/cart-and-checkout/working-sf-apis)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Subscription properties.
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     * The unique numeric ID of the subscriber; increments sequentially.
     * @type {number}
     * @memberof Subscription
     */
    id?: number;
    /**
     * The email of the subscriber. Must be unique.
     * @type {string}
     * @memberof Subscription
     */
    email?: string;
    /**
     * The first name of the subscriber.
     * @type {string}
     * @memberof Subscription
     */
    firstName?: string;
    /**
     * The last name of the subscriber.
     * @type {string}
     * @memberof Subscription
     */
    lastName?: string;
    /**
     * The source of the subscriber. Values are: `storefront`, `order`, or `custom`.
     * @type {string}
     * @memberof Subscription
     */
    source?: string;
    /**
     * The ID of the source order, if source was an order.
     * @type {number}
     * @memberof Subscription
     */
    orderId?: number | null;
    /**
     * The collection of consents the shopper is subscribing to.
     * @type {Array<string>}
     * @memberof Subscription
     */
    consents?: Array<string>;
}

export function SubscriptionFromJSON(json: any): Subscription {
    return SubscriptionFromJSONTyped(json, false);
}

export function SubscriptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subscription {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'orderId': !exists(json, 'orderId') ? undefined : json['orderId'],
        'consents': !exists(json, 'consents') ? undefined : json['consents'],
    };
}

export function SubscriptionToJSON(value?: Subscription | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'email': value.email,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'source': value.source,
        'orderId': value.orderId,
        'consents': value.consents,
    };
}



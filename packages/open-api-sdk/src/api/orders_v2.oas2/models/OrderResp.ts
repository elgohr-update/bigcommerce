/* tslint:disable */
/* eslint-disable */
/**
 * Orders V2
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  The **default** currency refers to the transactional currency which is the currency the shopper pays in.  The **display** currency refers to the presentational currency used to present prices to the shopper on the storefront.  * `currency_id` - the display currency ID. Depending on the currency selected, the value may be different from the transactional currency. * `currency_code` - the currency code of the display currency used to present prices to the shopper on the storefront. Depending on the currency selected, the value may be different from the transactional currency. * `currency_exchange_rate` - the exchange rate between the store\'s default currency and the display currency. For orders created using the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1). * `default_currency_id` - the transactional currency ID. * `default_currency_code` - the currency code of the transactional currency the shopper pays in.  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the currency code of the store\'s default currency. * `store_default_to_transactional_exchange_rate` - the exchange rate between the store\'s default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code\": \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BillingAddressFull,
    BillingAddressFullFromJSON,
    BillingAddressFullFromJSONTyped,
    BillingAddressFullToJSON,
    CouponsResource,
    CouponsResourceFromJSON,
    CouponsResourceFromJSONTyped,
    CouponsResourceToJSON,
    Null,
    NullFromJSON,
    NullFromJSONTyped,
    NullToJSON,
    OrderRespOnly,
    OrderRespOnlyFromJSON,
    OrderRespOnlyFromJSONTyped,
    OrderRespOnlyToJSON,
    OrderShared,
    OrderSharedFromJSON,
    OrderSharedFromJSONTyped,
    OrderSharedToJSON,
    ProductsResource,
    ProductsResourceFromJSON,
    ProductsResourceFromJSONTyped,
    ProductsResourceToJSON,
    ShippingAddressesResource,
    ShippingAddressesResourceFromJSON,
    ShippingAddressesResourceFromJSONTyped,
    ShippingAddressesResourceToJSON,
} from './';

/**
 * Order object returned in responses.
 * @export
 * @interface OrderResp
 */
export interface OrderResp {
    /**
     * Read-only. The ID of the order.
     * @type {number}
     * @memberof OrderResp
     */
    id?: number;
    /**
     * A read-only value representing the last modification of the order. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822
     * @type {string}
     * @memberof OrderResp
     */
    dateModified?: string;
    /**
     * A read-only value representing the date of shipment. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822
     * @type {string}
     * @memberof OrderResp
     */
    dateShipped?: string;
    /**
     * The cart ID from which this order originated, if applicable. Correlates with the Cart API. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     * @type {string}
     * @memberof OrderResp
     */
    cartId?: string;
    /**
     * The status will include one of the (string, optiona) - values defined under Order Statuses. This value is read-only. Do not attempt to modify or set this value in a POST or PUT operation.
     * @type {string}
     * @memberof OrderResp
     */
    status?: string;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    subtotalTax?: string;
    /**
     * A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    shippingCostTax?: string;
    /**
     * Shipping-cost tax class. A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     * @type {number}
     * @memberof OrderResp
     */
    shippingCostTaxClassId?: number;
    /**
     * A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    handlingCostTax?: string;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     * @type {number}
     * @memberof OrderResp
     */
    handlingCostTaxClassId?: number;
    /**
     * A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    wrappingCostTax?: string;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     * @type {number}
     * @memberof OrderResp
     */
    wrappingCostTaxClassId?: number;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT operation.
     * @type {string}
     * @memberof OrderResp
     */
    paymentStatus?: OrderRespPaymentStatusEnum;
    /**
     * Represents the store credit that the shopper has redeemed on this individual order. This is a read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    storeCreditAmount?: string;
    /**
     * A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    giftCertificateAmount?: string;
    /**
     * The display currency ID. May be different from transactional currency. A read-only value. Do not pass in a POST or PUT.
     * @type {number}
     * @memberof OrderResp
     */
    currencyId?: number;
    /**
     * The currency code of the display currency used to present prices on the storefront. A read-only value. Do not pass in a POST or PUT.
     * @type {string}
     * @memberof OrderResp
     */
    currencyCode?: string;
    /**
     * The exchange rate between the store's default currency and the display currency. A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    currencyExchangeRate?: string;
    /**
     * The transactional currency ID. A read-only value. Do not pass in a POST or PUT.
     * @type {number}
     * @memberof OrderResp
     */
    defaultCurrencyId?: number;
    /**
     * A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    couponDiscount?: string;
    /**
     * The number of shipping addresses associated with this transaction. A read-only value. Do not pass in a POST or PUT.
     * @type {number}
     * @memberof OrderResp
     */
    shippingAddressCount?: number;
    /**
     * Indicates whether the shopper has selected an opt-in check box (on the checkout page) to receive emails. A read-only value. Do not pass in a POST or PUT.
     * @type {boolean}
     * @memberof OrderResp
     */
    isEmailOptIn?: boolean;
    /**
     * Orders submitted via the store's website will include a `www` value. Orders submitted via the API will be set to `external`. A read-only value. Do not pass in a POST or PUT.
     * @type {string}
     * @memberof OrderResp
     */
    orderSource?: string;
    /**
     * 
     * @type {ProductsResource}
     * @memberof OrderResp
     */
    products?: ProductsResource;
    /**
     * 
     * @type {ShippingAddressesResource}
     * @memberof OrderResp
     */
    shippingAddresses?: ShippingAddressesResource;
    /**
     * 
     * @type {CouponsResource}
     * @memberof OrderResp
     */
    coupons?: CouponsResource;
    /**
     * The status ID of the order.
     * @type {number}
     * @memberof OrderResp
     */
    statusId?: number;
    /**
     * The value of the base handling cost. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    baseHandlingCost?: string;
    /**
     * The value of the base shipping cost. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    baseShippingCost?: string;
    /**
     * The value of the base wrapping cost. (Float, Float-As-String, Integer)
     * @type {string | number}
     * @memberof OrderResp
     */
    baseWrappingCost?: string | number;
    /**
     * 
     * @type {BillingAddressFull}
     * @memberof OrderResp
     */
    billingAddress?: BillingAddressFull;
    /**
     * Shows where the order originated. The channel_id will default to 1.
     * @type {number}
     * @memberof OrderResp
     */
    channelId?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderResp
     */
    customerId?: number;
    /**
     * Message that the customer entered (number, optional) -o the `Order Comments` box during checkout.
     * @type {string}
     * @memberof OrderResp
     */
    customerMessage?: string;
    /**
     * The date the order was created, formatted in the RFC-2822 standard. You set this attribute on Order creation (POST) to support the migration of historical orders. If you do not provide a value, then it will default to the current date/time. e.g., `Tue, 20 Nov 2012 00:00:00 +0000`
     * @type {string}
     * @memberof OrderResp
     */
    dateCreated?: string;
    /**
     * The currency code of the transactional currency the shopper pays in; writeable when multi-currency is enabled.
     * @type {string}
     * @memberof OrderResp
     */
    defaultCurrencyCode?: string;
    /**
     * Amount of discount for this transaction. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    discountAmount?: string;
    /**
     * If the order was placed through eBay, the eBay order number will be included. Otherwise, the value will be `0`.
     * @type {string}
     * @memberof OrderResp
     */
    ebayOrderId?: string;
    /**
     * ID of the order in another system. For example, the Amazon Order ID if this is an Amazon order.This field can be updated in a /POST, but using a /PUT to update the order will return a 400 error. The field 'external_id' cannot be written to. Please remove it from your request before trying again. It can not be overwritten once set.
     * @type {string | Null}
     * @memberof OrderResp
     */
    externalId?: string | Null;
    /**
     * This value identifies an external system that generated the order and submitted it to BigCommerce via the Orders API.
     * * When supplying the value, we recommend combining the type of system and vendor, e.g., ERP (Acumatica) or POS (Square).
     * * If you are migrating historical orders processed on another eCommerce platform to BigCommerce, supply the following code as the value: M-MIG. This code will exclude historical orders from the store’s GMV/order count, which factors into pricing.
     * * If you do not provide a value, then it will default to null.
     * @type {string | Null}
     * @memberof OrderResp
     */
    externalSource?: string | Null;
    /**
     * The full name of the country where the customer made the purchase, based on the IP.
     * @type {string}
     * @memberof OrderResp
     */
    geoipCountry?: string;
    /**
     * The country where the customer made the purchase, in ISO2 format, based on the IP.
     * @type {string}
     * @memberof OrderResp
     */
    geoipCountryIso2?: string;
    /**
     * The value of the handling cost, excluding tax. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    handlingCostExTax?: string;
    /**
     * The value of the handling cost, including tax. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    handlingCostIncTax?: string;
    /**
     * IPv4 Address of the customer, if known.
     * 
     * Note: You can set either `ip_address` or `ip_address_v6`. Setting the `ip_address` value will reset the `ip_address_v6` value and vice versa.
     * @type {string}
     * @memberof OrderResp
     */
    ipAddress?: string;
    /**
     * IPv6 Address of the customer, if known.
     * 
     * Note: You can set either `ip_address` or `ip_address_v6`. Setting the `ip_address_v6` value will reset the `ip_address` value and vice versa.
     * @type {string}
     * @memberof OrderResp
     */
    ipAddressV6?: string;
    /**
     * Indicates whether the order was deleted (archived). Set to to true, to archive an order.
     * @type {boolean}
     * @memberof OrderResp
     */
    isDeleted?: boolean;
    /**
     * The number of items that have been shipped.
     * @type {number}
     * @memberof OrderResp
     */
    itemsShipped?: number;
    /**
     * The total number of items in the order.
     * @type {number}
     * @memberof OrderResp
     */
    itemsTotal?: number;
    /**
     * Whether this is an order for digital products.
     * @type {boolean}
     * @memberof OrderResp
     */
    orderIsDigital?: boolean;
    /**
     * The payment method for this order. Can be one of the following: `Manual`, `Credit Card`, `cash`, `Test Payment Gateway`, etc.
     * @type {string}
     * @memberof OrderResp
     */
    paymentMethod?: OrderRespPaymentMethodEnum;
    /**
     * The external Transaction ID/Payment ID within this order's payment provider (if a payment provider was used).
     * @type {any}
     * @memberof OrderResp
     */
    paymentProviderId?: any | null;
    /**
     * The amount refunded from this transaction. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    refundedAmount?: string;
    /**
     * The value of shipping cost, excluding tax. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    shippingCostExTax?: string;
    /**
     * The value of shipping cost, including tax. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    shippingCostIncTax?: string;
    /**
     * Any additional notes for staff.
     * @type {string}
     * @memberof OrderResp
     */
    staffNotes?: string;
    /**
     * Override value for subtotal excluding tax. If specified, the field `subtotal_inc_tax` is also required. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    subtotalExTax?: string;
    /**
     * Override value for subtotal including tax. If specified, the field `subtotal_ex_tax` is also required. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    subtotalIncTax?: string;
    /**
     * BasicTaxProvider - Tax is set to manual.
     * 
     * AvaTaxProvider - This is for when the tax provider has been set to automatic and the order was NOT created by the API. Used for Avalara.
     * 
     * "" (blank) - When the tax provider is unknown. This includes legacy orders and orders previously created via API.
     * This can be set when creating an order using a POST.
     * @type {string}
     * @memberof OrderResp
     */
    taxProviderId?: OrderRespTaxProviderIdEnum;
    /**
     * The customer's locale
     * @type {string}
     * @memberof OrderResp
     */
    customerLocale?: string;
    /**
     * Override value for the total, excluding tax. If specified, the field `total_inc_tax` is also required. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    totalExTax?: string;
    /**
     * Override value for the total, including tax. If specified, the field `total_ex_tax` is also required. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    totalIncTax?: string;
    /**
     * The value of the wrapping cost, excluding tax. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    wrappingCostExTax?: string;
    /**
     * The value of the wrapping cost, including tax. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderResp
     */
    wrappingCostIncTax?: string;
}

/**
* @export
* @enum {string}
*/
export enum OrderRespPaymentStatusEnum {
    Authorized = 'authorized',
    Captured = 'captured',
    CapturePending = 'capture pending',
    Declined = 'declined',
    HeldForReview = 'held for review',
    Paid = 'paid',
    PartiallyRefunded = 'partially refunded',
    Pending = 'pending',
    Refunded = 'refunded',
    Void = 'void',
    VoidPending = 'void pending'
}/**
* @export
* @enum {string}
*/
export enum OrderRespPaymentMethodEnum {
    CreditCard = 'Credit Card',
    Cash = 'Cash',
    TestPaymentGateway = 'Test Payment Gateway',
    Manual = 'Manual'
}/**
* @export
* @enum {string}
*/
export enum OrderRespTaxProviderIdEnum {
    BasicTaxProvider = 'BasicTaxProvider',
    AvaTaxProvider = 'AvaTaxProvider',
    Empty = ''
}

export function OrderRespFromJSON(json: any): OrderResp {
    return OrderRespFromJSONTyped(json, false);
}

export function OrderRespFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderResp {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'dateModified': !exists(json, 'date_modified') ? undefined : json['date_modified'],
        'dateShipped': !exists(json, 'date_shipped') ? undefined : json['date_shipped'],
        'cartId': !exists(json, 'cart_id') ? undefined : json['cart_id'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'subtotalTax': !exists(json, 'subtotal_tax') ? undefined : json['subtotal_tax'],
        'shippingCostTax': !exists(json, 'shipping_cost_tax') ? undefined : json['shipping_cost_tax'],
        'shippingCostTaxClassId': !exists(json, 'shipping_cost_tax_class_id') ? undefined : json['shipping_cost_tax_class_id'],
        'handlingCostTax': !exists(json, 'handling_cost_tax') ? undefined : json['handling_cost_tax'],
        'handlingCostTaxClassId': !exists(json, 'handling_cost_tax_class_id') ? undefined : json['handling_cost_tax_class_id'],
        'wrappingCostTax': !exists(json, 'wrapping_cost_tax') ? undefined : json['wrapping_cost_tax'],
        'wrappingCostTaxClassId': !exists(json, 'wrapping_cost_tax_class_id') ? undefined : json['wrapping_cost_tax_class_id'],
        'paymentStatus': !exists(json, 'payment_status') ? undefined : json['payment_status'],
        'storeCreditAmount': !exists(json, 'store_credit_amount') ? undefined : json['store_credit_amount'],
        'giftCertificateAmount': !exists(json, 'gift_certificate_amount') ? undefined : json['gift_certificate_amount'],
        'currencyId': !exists(json, 'currency_id') ? undefined : json['currency_id'],
        'currencyCode': !exists(json, 'currency_code') ? undefined : json['currency_code'],
        'currencyExchangeRate': !exists(json, 'currency_exchange_rate') ? undefined : json['currency_exchange_rate'],
        'defaultCurrencyId': !exists(json, 'default_currency_id') ? undefined : json['default_currency_id'],
        'couponDiscount': !exists(json, 'coupon_discount') ? undefined : json['coupon_discount'],
        'shippingAddressCount': !exists(json, 'shipping_address_count') ? undefined : json['shipping_address_count'],
        'isEmailOptIn': !exists(json, 'is_email_opt_in') ? undefined : json['is_email_opt_in'],
        'orderSource': !exists(json, 'order_source') ? undefined : json['order_source'],
        'products': !exists(json, 'products') ? undefined : ProductsResourceFromJSON(json['products']),
        'shippingAddresses': !exists(json, 'shipping_addresses') ? undefined : ShippingAddressesResourceFromJSON(json['shipping_addresses']),
        'coupons': !exists(json, 'coupons') ? undefined : CouponsResourceFromJSON(json['coupons']),
        'statusId': !exists(json, 'status_id') ? undefined : json['status_id'],
        'baseHandlingCost': !exists(json, 'base_handling_cost') ? undefined : json['base_handling_cost'],
        'baseShippingCost': !exists(json, 'base_shipping_cost') ? undefined : json['base_shipping_cost'],
        'baseWrappingCost': !exists(json, 'base_wrapping_cost') ? undefined : string | numberFromJSON(json['base_wrapping_cost']),
        'billingAddress': !exists(json, 'billing_address') ? undefined : BillingAddressFullFromJSON(json['billing_address']),
        'channelId': !exists(json, 'channel_id') ? undefined : json['channel_id'],
        'customerId': !exists(json, 'customer_id') ? undefined : json['customer_id'],
        'customerMessage': !exists(json, 'customer_message') ? undefined : json['customer_message'],
        'dateCreated': !exists(json, 'date_created') ? undefined : json['date_created'],
        'defaultCurrencyCode': !exists(json, 'default_currency_code') ? undefined : json['default_currency_code'],
        'discountAmount': !exists(json, 'discount_amount') ? undefined : json['discount_amount'],
        'ebayOrderId': !exists(json, 'ebay_order_id') ? undefined : json['ebay_order_id'],
        'externalId': !exists(json, 'external_id') ? undefined : string | NullFromJSON(json['external_id']),
        'externalSource': !exists(json, 'external_source') ? undefined : string | NullFromJSON(json['external_source']),
        'geoipCountry': !exists(json, 'geoip_country') ? undefined : json['geoip_country'],
        'geoipCountryIso2': !exists(json, 'geoip_country_iso2') ? undefined : json['geoip_country_iso2'],
        'handlingCostExTax': !exists(json, 'handling_cost_ex_tax') ? undefined : json['handling_cost_ex_tax'],
        'handlingCostIncTax': !exists(json, 'handling_cost_inc_tax') ? undefined : json['handling_cost_inc_tax'],
        'ipAddress': !exists(json, 'ip_address') ? undefined : json['ip_address'],
        'ipAddressV6': !exists(json, 'ip_address_v6') ? undefined : json['ip_address_v6'],
        'isDeleted': !exists(json, 'is_deleted') ? undefined : json['is_deleted'],
        'itemsShipped': !exists(json, 'items_shipped') ? undefined : json['items_shipped'],
        'itemsTotal': !exists(json, 'items_total') ? undefined : json['items_total'],
        'orderIsDigital': !exists(json, 'order_is_digital') ? undefined : json['order_is_digital'],
        'paymentMethod': !exists(json, 'payment_method') ? undefined : json['payment_method'],
        'paymentProviderId': !exists(json, 'payment_provider_id') ? undefined : json['payment_provider_id'],
        'refundedAmount': !exists(json, 'refunded_amount') ? undefined : json['refunded_amount'],
        'shippingCostExTax': !exists(json, 'shipping_cost_ex_tax') ? undefined : json['shipping_cost_ex_tax'],
        'shippingCostIncTax': !exists(json, 'shipping_cost_inc_tax') ? undefined : json['shipping_cost_inc_tax'],
        'staffNotes': !exists(json, 'staff_notes') ? undefined : json['staff_notes'],
        'subtotalExTax': !exists(json, 'subtotal_ex_tax') ? undefined : json['subtotal_ex_tax'],
        'subtotalIncTax': !exists(json, 'subtotal_inc_tax') ? undefined : json['subtotal_inc_tax'],
        'taxProviderId': !exists(json, 'tax_provider_id') ? undefined : json['tax_provider_id'],
        'customerLocale': !exists(json, 'customer_locale') ? undefined : json['customer_locale'],
        'totalExTax': !exists(json, 'total_ex_tax') ? undefined : json['total_ex_tax'],
        'totalIncTax': !exists(json, 'total_inc_tax') ? undefined : json['total_inc_tax'],
        'wrappingCostExTax': !exists(json, 'wrapping_cost_ex_tax') ? undefined : json['wrapping_cost_ex_tax'],
        'wrappingCostIncTax': !exists(json, 'wrapping_cost_inc_tax') ? undefined : json['wrapping_cost_inc_tax'],
    };
}

export function OrderRespToJSON(value?: OrderResp | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'date_modified': value.dateModified,
        'date_shipped': value.dateShipped,
        'cart_id': value.cartId,
        'status': value.status,
        'subtotal_tax': value.subtotalTax,
        'shipping_cost_tax': value.shippingCostTax,
        'shipping_cost_tax_class_id': value.shippingCostTaxClassId,
        'handling_cost_tax': value.handlingCostTax,
        'handling_cost_tax_class_id': value.handlingCostTaxClassId,
        'wrapping_cost_tax': value.wrappingCostTax,
        'wrapping_cost_tax_class_id': value.wrappingCostTaxClassId,
        'payment_status': value.paymentStatus,
        'store_credit_amount': value.storeCreditAmount,
        'gift_certificate_amount': value.giftCertificateAmount,
        'currency_id': value.currencyId,
        'currency_code': value.currencyCode,
        'currency_exchange_rate': value.currencyExchangeRate,
        'default_currency_id': value.defaultCurrencyId,
        'coupon_discount': value.couponDiscount,
        'shipping_address_count': value.shippingAddressCount,
        'is_email_opt_in': value.isEmailOptIn,
        'order_source': value.orderSource,
        'products': ProductsResourceToJSON(value.products),
        'shipping_addresses': ShippingAddressesResourceToJSON(value.shippingAddresses),
        'coupons': CouponsResourceToJSON(value.coupons),
        'status_id': value.statusId,
        'base_handling_cost': value.baseHandlingCost,
        'base_shipping_cost': value.baseShippingCost,
        'base_wrapping_cost': string | numberToJSON(value.baseWrappingCost),
        'billing_address': BillingAddressFullToJSON(value.billingAddress),
        'channel_id': value.channelId,
        'customer_id': value.customerId,
        'customer_message': value.customerMessage,
        'date_created': value.dateCreated,
        'default_currency_code': value.defaultCurrencyCode,
        'discount_amount': value.discountAmount,
        'ebay_order_id': value.ebayOrderId,
        'external_id': string | NullToJSON(value.externalId),
        'external_source': string | NullToJSON(value.externalSource),
        'geoip_country': value.geoipCountry,
        'geoip_country_iso2': value.geoipCountryIso2,
        'handling_cost_ex_tax': value.handlingCostExTax,
        'handling_cost_inc_tax': value.handlingCostIncTax,
        'ip_address': value.ipAddress,
        'ip_address_v6': value.ipAddressV6,
        'is_deleted': value.isDeleted,
        'items_shipped': value.itemsShipped,
        'items_total': value.itemsTotal,
        'order_is_digital': value.orderIsDigital,
        'payment_method': value.paymentMethod,
        'payment_provider_id': value.paymentProviderId,
        'refunded_amount': value.refundedAmount,
        'shipping_cost_ex_tax': value.shippingCostExTax,
        'shipping_cost_inc_tax': value.shippingCostIncTax,
        'staff_notes': value.staffNotes,
        'subtotal_ex_tax': value.subtotalExTax,
        'subtotal_inc_tax': value.subtotalIncTax,
        'tax_provider_id': value.taxProviderId,
        'customer_locale': value.customerLocale,
        'total_ex_tax': value.totalExTax,
        'total_inc_tax': value.totalIncTax,
        'wrapping_cost_ex_tax': value.wrappingCostExTax,
        'wrapping_cost_inc_tax': value.wrappingCostIncTax,
    };
}



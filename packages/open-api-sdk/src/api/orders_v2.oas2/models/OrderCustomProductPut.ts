/* tslint:disable */
/* eslint-disable */
/**
 * Orders V2
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  The **default** currency refers to the transactional currency which is the currency the shopper pays in.  The **display** currency refers to the presentational currency used to present prices to the shopper on the storefront.  * `currency_id` - the display currency ID. Depending on the currency selected, the value may be different from the transactional currency. * `currency_code` - the currency code of the display currency used to present prices to the shopper on the storefront. Depending on the currency selected, the value may be different from the transactional currency. * `currency_exchange_rate` - the exchange rate between the store\'s default currency and the display currency. For orders created using the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1). * `default_currency_id` - the transactional currency ID. * `default_currency_code` - the currency code of the transactional currency the shopper pays in.  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the currency code of the store\'s default currency. * `store_default_to_transactional_exchange_rate` - the exchange rate between the store\'s default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code\": \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * To `add` a custom product to an existing order, don't include `id` in the payload. At least one of these fields `name`, `name_customer`, or `name_merchant` must be provided with non-empty value.
 *      To `update` an order product line, `id` is required. The payload should only contain the fields that needs to be updated. Those fields that are omitted will not be changed.
 *      Note:
 *      - Empty strings `''` and `null` are invalid for `xxx`, `xxx_customer`, and `xxx_merchant`.
 *      - `name` and `name_customer` always hold the same value, updating either `name` or `name_customer` will change the value for both of those fields.
 *      - If both fields `name` and `name_customer` are present, they must have same value.
 *      - When updating an existing order product, if both fields `name` and `name_customer` are omitted from the request, they will not be updated.
 *      - When updating an existing order product, if `name_merchant` is omitted from the request, it will not be updated.
 *      - When adding product, if `name_merchant` is omitted, it will be set to the value of `name` (or `name_customer`).
 *      - When adding a new product to an existing order, if both fields `name` and `name_customer` are omitted, they will be set to the value of `name_merchant`.
 * @export
 * @interface OrderCustomProductPut
 */
export interface OrderCustomProductPut {
    /**
     * Alias for name_customer. The product name that is shown to customer in storefront.
     * @type {string}
     * @memberof OrderCustomProductPut
     */
    name: string;
    /**
     * The product name that is shown to customer in storefront.
     * @type {string}
     * @memberof OrderCustomProductPut
     */
    nameCustomer?: string;
    /**
     * The product name that is shown to merchant in control panel.
     * @type {string}
     * @memberof OrderCustomProductPut
     */
    nameMerchant?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderCustomProductPut
     */
    quantity: number;
    /**
     * 
     * @type {number}
     * @memberof OrderCustomProductPut
     */
    priceExTax: number;
    /**
     * 
     * @type {number}
     * @memberof OrderCustomProductPut
     */
    priceIncTax: number;
    /**
     * 
     * @type {string}
     * @memberof OrderCustomProductPut
     */
    sku?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCustomProductPut
     */
    upc?: string;
    /**
     * ID of the product line
     * @type {number}
     * @memberof OrderCustomProductPut
     */
    id?: number;
}

export function OrderCustomProductPutFromJSON(json: any): OrderCustomProductPut {
    return OrderCustomProductPutFromJSONTyped(json, false);
}

export function OrderCustomProductPutFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderCustomProductPut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'nameCustomer': !exists(json, 'name_customer') ? undefined : json['name_customer'],
        'nameMerchant': !exists(json, 'name_merchant') ? undefined : json['name_merchant'],
        'quantity': json['quantity'],
        'priceExTax': json['price_ex_tax'],
        'priceIncTax': json['price_inc_tax'],
        'sku': !exists(json, 'sku') ? undefined : json['sku'],
        'upc': !exists(json, 'upc') ? undefined : json['upc'],
        'id': !exists(json, 'id') ? undefined : json['id'],
    };
}

export function OrderCustomProductPutToJSON(value?: OrderCustomProductPut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'name_customer': value.nameCustomer,
        'name_merchant': value.nameMerchant,
        'quantity': value.quantity,
        'price_ex_tax': value.priceExTax,
        'price_inc_tax': value.priceIncTax,
        'sku': value.sku,
        'upc': value.upc,
        'id': value.id,
    };
}



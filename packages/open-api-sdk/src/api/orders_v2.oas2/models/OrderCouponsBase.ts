/* tslint:disable */
/* eslint-disable */
/**
 * Orders V2
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  The **default** currency refers to the transactional currency which is the currency the shopper pays in.  The **display** currency refers to the presentational currency used to present prices to the shopper on the storefront.  * `currency_id` - the display currency ID. Depending on the currency selected, the value may be different from the transactional currency. * `currency_code` - the currency code of the display currency used to present prices to the shopper on the storefront. Depending on the currency selected, the value may be different from the transactional currency. * `currency_exchange_rate` - the exchange rate between the store\'s default currency and the display currency. For orders created using the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1). * `default_currency_id` - the transactional currency ID. * `default_currency_code` - the currency code of the transactional currency the shopper pays in.  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the currency code of the store\'s default currency. * `store_default_to_transactional_exchange_rate` - the exchange rate between the store\'s default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code\": \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrderCouponsBase
 */
export interface OrderCouponsBase {
    /**
     * Numeric ID of the coupon code.
     * @type {number}
     * @memberof OrderCouponsBase
     */
    id?: number;
    /**
     * Numeric ID of the associated coupon.
     * @type {number}
     * @memberof OrderCouponsBase
     */
    couponId?: number;
    /**
     * Numeric ID of the associated order.
     * @type {number}
     * @memberof OrderCouponsBase
     */
    orderId?: number;
    /**
     * Coupon code, as a string.
     * @type {any}
     * @memberof OrderCouponsBase
     */
    code?: any | null;
    /**
     * Amount of the discount. This information is returned as in integer. Dollar and percentage discounts will return the same. For example, $3 returns as '3' while 5% will return as 5. Check the discount type to see what type of discount is available.
     * @type {any}
     * @memberof OrderCouponsBase
     */
    amount?: any | null;
    /**
     * 0: per_item_discount
     * 1: percentage_discount
     * 2: per_total_discount
     * 3: shipping_discount
     * 4: free_shipping
     * 5: promotions
     * @type {number}
     * @memberof OrderCouponsBase
     */
    type?: OrderCouponsBaseTypeEnum;
    /**
     * The amount off the order the discount is worth. For example, if an order subtotal is $90 and the discount is $3 then it will return as 3.000. If the discount is
     * 3% then will return as 2.7000 or the amount of the order.  (Float, Float-As-String, Integer)
     * @type {number}
     * @memberof OrderCouponsBase
     */
    discount?: number;
}

/**
* @export
* @enum {string}
*/
export enum OrderCouponsBaseTypeEnum {
    NUMBER_0 = 0,
    NUMBER_1 = 1,
    NUMBER_2 = 2,
    NUMBER_3 = 3,
    NUMBER_4 = 4,
    NUMBER_5 = 5
}

export function OrderCouponsBaseFromJSON(json: any): OrderCouponsBase {
    return OrderCouponsBaseFromJSONTyped(json, false);
}

export function OrderCouponsBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderCouponsBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'couponId': !exists(json, 'coupon_id') ? undefined : json['coupon_id'],
        'orderId': !exists(json, 'order_id') ? undefined : json['order_id'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'discount': !exists(json, 'discount') ? undefined : json['discount'],
    };
}

export function OrderCouponsBaseToJSON(value?: OrderCouponsBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'coupon_id': value.couponId,
        'order_id': value.orderId,
        'code': value.code,
        'amount': value.amount,
        'type': value.type,
        'discount': value.discount,
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Orders V2
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  The **default** currency refers to the transactional currency which is the currency the shopper pays in.  The **display** currency refers to the presentational currency used to present prices to the shopper on the storefront.  * `currency_id` - the display currency ID. Depending on the currency selected, the value may be different from the transactional currency. * `currency_code` - the currency code of the display currency used to present prices to the shopper on the storefront. Depending on the currency selected, the value may be different from the transactional currency. * `currency_exchange_rate` - the exchange rate between the store\'s default currency and the display currency. For orders created using the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1). * `default_currency_id` - the transactional currency ID. * `default_currency_code` - the currency code of the transactional currency the shopper pays in.  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the currency code of the store\'s default currency. * `store_default_to_transactional_exchange_rate` - the exchange rate between the store\'s default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code\": \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OrderProductOptions
 */
export interface OrderProductOptions {
    /**
     * The unique numerical ID of the option; increments sequentially.
     * @type {number}
     * @memberof OrderProductOptions
     */
    id?: number;
    /**
     * Numeric ID of the associated option.
     * @type {number}
     * @memberof OrderProductOptions
     */
    optionId?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderProductOptions
     */
    orderProductId?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderProductOptions
     */
    productOptionId?: number;
    /**
     * Alias for display_name_customer. The product option name that is shown to customer in the storefront.
     * @type {string}
     * @memberof OrderProductOptions
     */
    displayName?: string;
    /**
     * Alias for display_value_customer. The product option value that is shown to customer in storefront.
     * @type {string}
     * @memberof OrderProductOptions
     */
    displayValue?: string;
    /**
     * This value is used to access the Customer File Upload.
     * @type {string}
     * @memberof OrderProductOptions
     */
    value?: string;
    /**
     * Option Type
     * @type {string}
     * @memberof OrderProductOptions
     */
    type?: OrderProductOptionsTypeEnum;
    /**
     * The optionâ€™s name, as used internally. Must be unique.
     * @type {string}
     * @memberof OrderProductOptions
     */
    name?: string;
    /**
     * How it is displayed on the storefront. Examples include Drop-down, radio buttons, or rectangles.
     * @type {string}
     * @memberof OrderProductOptions
     */
    displayStyle?: string;
    /**
     * The product option name that is shown to customer in storefront.
     * @type {string}
     * @memberof OrderProductOptions
     */
    displayNameCustomer?: string;
    /**
     * The product option name that is shown to merchant in Control Panel.
     * @type {string}
     * @memberof OrderProductOptions
     */
    displayNameMerchant?: string;
    /**
     * The product option value that is shown to customer in storefront.
     * @type {string}
     * @memberof OrderProductOptions
     */
    displayValueCustomer?: string;
    /**
     * The product option value that is shown to merchant in Control Panel.
     * @type {string}
     * @memberof OrderProductOptions
     */
    displayValueMerchant?: string;
}

/**
* @export
* @enum {string}
*/
export enum OrderProductOptionsTypeEnum {
    Checkbox = 'Checkbox',
    DateField = 'Date field',
    FileUpload = 'File Upload',
    MultiLineTextField = 'Multi-line text field',
    MultipleChoice = 'Multiple choice',
    ProductPickList = 'Product Pick List',
    Swatch = 'Swatch',
    TextField = 'Text field'
}

export function OrderProductOptionsFromJSON(json: any): OrderProductOptions {
    return OrderProductOptionsFromJSONTyped(json, false);
}

export function OrderProductOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderProductOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'optionId': !exists(json, 'option_id') ? undefined : json['option_id'],
        'orderProductId': !exists(json, 'order_product_id') ? undefined : json['order_product_id'],
        'productOptionId': !exists(json, 'product_option_id') ? undefined : json['product_option_id'],
        'displayName': !exists(json, 'display_name') ? undefined : json['display_name'],
        'displayValue': !exists(json, 'display_value') ? undefined : json['display_value'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'displayStyle': !exists(json, 'display_style') ? undefined : json['display_style'],
        'displayNameCustomer': !exists(json, 'display_name_customer') ? undefined : json['display_name_customer'],
        'displayNameMerchant': !exists(json, 'display_name_merchant') ? undefined : json['display_name_merchant'],
        'displayValueCustomer': !exists(json, 'display_value_customer') ? undefined : json['display_value_customer'],
        'displayValueMerchant': !exists(json, 'display_value_merchant') ? undefined : json['display_value_merchant'],
    };
}

export function OrderProductOptionsToJSON(value?: OrderProductOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'option_id': value.optionId,
        'order_product_id': value.orderProductId,
        'product_option_id': value.productOptionId,
        'display_name': value.displayName,
        'display_value': value.displayValue,
        'value': value.value,
        'type': value.type,
        'name': value.name,
        'display_style': value.displayStyle,
        'display_name_customer': value.displayNameCustomer,
        'display_name_merchant': value.displayNameMerchant,
        'display_value_customer': value.displayValueCustomer,
        'display_value_merchant': value.displayValueMerchant,
    };
}



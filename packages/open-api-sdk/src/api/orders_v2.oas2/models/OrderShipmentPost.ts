/* tslint:disable */
/* eslint-disable */
/**
 * Orders V2
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  The **default** currency refers to the transactional currency which is the currency the shopper pays in.  The **display** currency refers to the presentational currency used to present prices to the shopper on the storefront.  * `currency_id` - the display currency ID. Depending on the currency selected, the value may be different from the transactional currency. * `currency_code` - the currency code of the display currency used to present prices to the shopper on the storefront. Depending on the currency selected, the value may be different from the transactional currency. * `currency_exchange_rate` - the exchange rate between the store\'s default currency and the display currency. For orders created using the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1). * `default_currency_id` - the transactional currency ID. * `default_currency_code` - the currency code of the transactional currency the shopper pays in.  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the currency code of the store\'s default currency. * `store_default_to_transactional_exchange_rate` - the exchange rate between the store\'s default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code\": \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OrderShipmentPostItems,
    OrderShipmentPostItemsFromJSON,
    OrderShipmentPostItemsFromJSONTyped,
    OrderShipmentPostItemsToJSON,
} from './';

/**
 * 
 * @export
 * @interface OrderShipmentPost
 */
export interface OrderShipmentPost {
    /**
     * ID of the desired `shipping_address` associated with the shipment.
     * @type {number}
     * @memberof OrderShipmentPost
     */
    orderAddressId?: number;
    /**
     * Tracking number of the shipment.
     * @type {string}
     * @memberof OrderShipmentPost
     */
    trackingNumber?: string;
    /**
     * Additional information to describe the method of shipment (ex. Standard, Ship by Weight, Custom Shipment). Can be used for live quotes from certain shipping providers.
     * If different from `shipping_provider`, `shipping_method` should correspond to `tracking_carrier`.
     * @type {string}
     * @memberof OrderShipmentPost
     */
    shippingMethod?: string;
    /**
     * Enum of the BigCommerce shipping-carrier integration/module.
     * @type {string}
     * @memberof OrderShipmentPost
     */
    shippingProvider?: OrderShipmentPostShippingProviderEnum;
    /**
     * Tracking carrier for the shipment.
     * Acceptable values include an empty string (`""`) or one of the valid tracking-carrier values viewable [here](https://docs.google.com/spreadsheets/d/1w9c_aECSCGyf-oOrvGeUniDl-ARGKemfZl0qSsav8D4/pubhtml?gid=0&single=true) and downloadable as a .CSV file [here](https://docs.google.com/spreadsheets/d/1mTueEynfcEmwsU2y2Jd2MX-8GKwNZrmlRMBcIElg9aY/pub?gid=0&single=true&output=csv).
     * @type {string}
     * @memberof OrderShipmentPost
     */
    trackingCarrier?: string;
    /**
     * Comments the shipper wishes to add.
     * @type {string}
     * @memberof OrderShipmentPost
     */
    comments?: string;
    /**
     * The items in the shipment. This object has the following members, all integer: order_product_id (required), quantity (required), product_id (read-only). A sample items value might be: [ {"order_product_id":16,"product_id": 0,"quantity":2} ]
     * @type {Array<OrderShipmentPostItems>}
     * @memberof OrderShipmentPost
     */
    items?: Array<OrderShipmentPostItems>;
}

/**
* @export
* @enum {string}
*/
export enum OrderShipmentPostShippingProviderEnum {
    Auspost = 'auspost',
    Canadapost = 'canadapost',
    Endicia = 'endicia',
    Usps = 'usps',
    Fedex = 'fedex',
    Ups = 'ups',
    Upsready = 'upsready',
    Upsonline = 'upsonline',
    Shipperhq = 'shipperhq'
}

export function OrderShipmentPostFromJSON(json: any): OrderShipmentPost {
    return OrderShipmentPostFromJSONTyped(json, false);
}

export function OrderShipmentPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderShipmentPost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'orderAddressId': !exists(json, 'order_address_id') ? undefined : json['order_address_id'],
        'trackingNumber': !exists(json, 'tracking_number') ? undefined : json['tracking_number'],
        'shippingMethod': !exists(json, 'shipping_method') ? undefined : json['shipping_method'],
        'shippingProvider': !exists(json, 'shipping_provider') ? undefined : json['shipping_provider'],
        'trackingCarrier': !exists(json, 'tracking_carrier') ? undefined : json['tracking_carrier'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'items': !exists(json, 'items') ? undefined : ((json['items'] as Array<any>).map(OrderShipmentPostItemsFromJSON)),
    };
}

export function OrderShipmentPostToJSON(value?: OrderShipmentPost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'order_address_id': value.orderAddressId,
        'tracking_number': value.trackingNumber,
        'shipping_method': value.shippingMethod,
        'shipping_provider': value.shippingProvider,
        'tracking_carrier': value.trackingCarrier,
        'comments': value.comments,
        'items': value.items === undefined ? undefined : ((value.items as Array<any>).map(OrderShipmentPostItemsToJSON)),
    };
}



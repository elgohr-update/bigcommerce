/* tslint:disable */
/* eslint-disable */
/**
 * Orders V2
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  The **default** currency refers to the transactional currency which is the currency the shopper pays in.  The **display** currency refers to the presentational currency used to present prices to the shopper on the storefront.  * `currency_id` - the display currency ID. Depending on the currency selected, the value may be different from the transactional currency. * `currency_code` - the currency code of the display currency used to present prices to the shopper on the storefront. Depending on the currency selected, the value may be different from the transactional currency. * `currency_exchange_rate` - the exchange rate between the store\'s default currency and the display currency. For orders created using the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1). * `default_currency_id` - the transactional currency ID. * `default_currency_code` - the currency code of the transactional currency the shopper pays in.  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the currency code of the store\'s default currency. * `store_default_to_transactional_exchange_rate` - the exchange rate between the store\'s default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code\": \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * When applying a manual discount to an order (not a product level discount), the discount is distributed across products in proportion to the products price.
 * `(total_manual_discount*price_ex_tax)/subtotal_ex_tax`
 * @export
 * @interface OrderProductAppliedDiscounts
 */
export interface OrderProductAppliedDiscounts {
    /**
     * Name of the coupon applied to order.
     * @type {string}
     * @memberof OrderProductAppliedDiscounts
     */
    id?: string;
    /**
     * Amount of the discount.(Float, Float-As-String, Integer) 
     * @type {string}
     * @memberof OrderProductAppliedDiscounts
     */
    amount?: string;
    /**
     * Name of the coupon.
     * `Manual Discount` when creating a manual discount.
     * @type {string}
     * @memberof OrderProductAppliedDiscounts
     */
    name?: string;
    /**
     * Coupon Code.
     * There is no code when creating a manual discount.
     * @type {any}
     * @memberof OrderProductAppliedDiscounts
     */
    code?: any | null;
    /**
     * Determines if the discount if discount was applied at the Order or Product level. Read Only.
     * @type {string}
     * @memberof OrderProductAppliedDiscounts
     */
    target?: OrderProductAppliedDiscountsTargetEnum;
}

/**
* @export
* @enum {string}
*/
export enum OrderProductAppliedDiscountsTargetEnum {
    Order = 'order',
    Product = 'product'
}

export function OrderProductAppliedDiscountsFromJSON(json: any): OrderProductAppliedDiscounts {
    return OrderProductAppliedDiscountsFromJSONTyped(json, false);
}

export function OrderProductAppliedDiscountsFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderProductAppliedDiscounts {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'target': !exists(json, 'target') ? undefined : json['target'],
    };
}

export function OrderProductAppliedDiscountsToJSON(value?: OrderProductAppliedDiscounts | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'amount': value.amount,
        'name': value.name,
        'code': value.code,
        'target': value.target,
    };
}



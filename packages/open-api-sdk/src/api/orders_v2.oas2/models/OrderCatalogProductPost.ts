/* tslint:disable */
/* eslint-disable */
/**
 * Orders V2
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  The **default** currency refers to the transactional currency which is the currency the shopper pays in.  The **display** currency refers to the presentational currency used to present prices to the shopper on the storefront.  * `currency_id` - the display currency ID. Depending on the currency selected, the value may be different from the transactional currency. * `currency_code` - the currency code of the display currency used to present prices to the shopper on the storefront. Depending on the currency selected, the value may be different from the transactional currency. * `currency_exchange_rate` - the exchange rate between the store\'s default currency and the display currency. For orders created using the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1). * `default_currency_id` - the transactional currency ID. * `default_currency_code` - the currency code of the transactional currency the shopper pays in.  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the currency code of the store\'s default currency. * `store_default_to_transactional_exchange_rate` - the exchange rate between the store\'s default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code\": \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    OrderCatalogProductPostProductOptions,
    OrderCatalogProductPostProductOptionsFromJSON,
    OrderCatalogProductPostProductOptionsFromJSONTyped,
    OrderCatalogProductPostProductOptionsToJSON,
} from './';

/**
 * Note:
 * - `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
 * - If both fields `xxx` and `xxx_customer` are present, they must have same value.
 * - Empty strings `''` and `null` are invalid for `xxx` and `xxx_customer, and `xxx_merchant`.
 * - `xxx`, `xxx_customer`, and `xxx_merchant` default to the value from `catalog` if not supplied in the request.
 * @export
 * @interface OrderCatalogProductPost
 */
export interface OrderCatalogProductPost {
    /**
     * 
     * @type {number}
     * @memberof OrderCatalogProductPost
     */
    productId?: number;
    /**
     * Alias for `name_customer`. The product name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
     * @type {string}
     * @memberof OrderCatalogProductPost
     */
    name?: string;
    /**
     * The product name that is shown to customer in storefront. `xxx` and `xxx_customer` always hold the same value, updating either `xxx` or `xxx_customer` will change value for both of those fields.
     * @type {string}
     * @memberof OrderCatalogProductPost
     */
    nameCustomer?: string;
    /**
     * The product name that is shown to merchant in control panel.
     * @type {string}
     * @memberof OrderCatalogProductPost
     */
    nameMerchant?: string;
    /**
     * List of product variant options and modifiers. `product_options` are required when adding a product with variants and not specifying the `variant_id`, or when products have mandatory modifiers.
     * @type {Array<OrderCatalogProductPostProductOptions>}
     * @memberof OrderCatalogProductPost
     */
    productOptions?: Array<OrderCatalogProductPostProductOptions>;
    /**
     * 
     * @type {number}
     * @memberof OrderCatalogProductPost
     */
    quantity?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderCatalogProductPost
     */
    priceIncTax?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderCatalogProductPost
     */
    priceExTax?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderCatalogProductPost
     */
    upc?: string;
    /**
     * ""
     * @type {number}
     * @memberof OrderCatalogProductPost
     */
    variantId?: number;
    /**
     * 
     * @type {string}
     * @memberof OrderCatalogProductPost
     */
    wrappingName?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderCatalogProductPost
     */
    wrappingMessage?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderCatalogProductPost
     */
    wrappingCostExTax?: number;
    /**
     * 
     * @type {number}
     * @memberof OrderCatalogProductPost
     */
    wrappingCostIncTax?: number;
}

export function OrderCatalogProductPostFromJSON(json: any): OrderCatalogProductPost {
    return OrderCatalogProductPostFromJSONTyped(json, false);
}

export function OrderCatalogProductPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderCatalogProductPost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'productId': !exists(json, 'product_id') ? undefined : json['product_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'nameCustomer': !exists(json, 'name_customer') ? undefined : json['name_customer'],
        'nameMerchant': !exists(json, 'name_merchant') ? undefined : json['name_merchant'],
        'productOptions': !exists(json, 'product_options') ? undefined : ((json['product_options'] as Array<any>).map(OrderCatalogProductPostProductOptionsFromJSON)),
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'priceIncTax': !exists(json, 'price_inc_tax') ? undefined : json['price_inc_tax'],
        'priceExTax': !exists(json, 'price_ex_tax') ? undefined : json['price_ex_tax'],
        'upc': !exists(json, 'upc') ? undefined : json['upc'],
        'variantId': !exists(json, 'variant_id') ? undefined : json['variant_id'],
        'wrappingName': !exists(json, 'wrapping_name') ? undefined : json['wrapping_name'],
        'wrappingMessage': !exists(json, 'wrapping_message') ? undefined : json['wrapping_message'],
        'wrappingCostExTax': !exists(json, 'wrapping_cost_ex_tax') ? undefined : json['wrapping_cost_ex_tax'],
        'wrappingCostIncTax': !exists(json, 'wrapping_cost_inc_tax') ? undefined : json['wrapping_cost_inc_tax'],
    };
}

export function OrderCatalogProductPostToJSON(value?: OrderCatalogProductPost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'product_id': value.productId,
        'name': value.name,
        'name_customer': value.nameCustomer,
        'name_merchant': value.nameMerchant,
        'product_options': value.productOptions === undefined ? undefined : ((value.productOptions as Array<any>).map(OrderCatalogProductPostProductOptionsToJSON)),
        'quantity': value.quantity,
        'price_inc_tax': value.priceIncTax,
        'price_ex_tax': value.priceExTax,
        'upc': value.upc,
        'variant_id': value.variantId,
        'wrapping_name': value.wrappingName,
        'wrapping_message': value.wrappingMessage,
        'wrapping_cost_ex_tax': value.wrappingCostExTax,
        'wrapping_cost_inc_tax': value.wrappingCostIncTax,
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Orders V2
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  The **default** currency refers to the transactional currency which is the currency the shopper pays in.  The **display** currency refers to the presentational currency used to present prices to the shopper on the storefront.  * `currency_id` - the display currency ID. Depending on the currency selected, the value may be different from the transactional currency. * `currency_code` - the currency code of the display currency used to present prices to the shopper on the storefront. Depending on the currency selected, the value may be different from the transactional currency. * `currency_exchange_rate` - the exchange rate between the store\'s default currency and the display currency. For orders created using the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1). * `default_currency_id` - the transactional currency ID. * `default_currency_code` - the currency code of the transactional currency the shopper pays in.  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the currency code of the store\'s default currency. * `store_default_to_transactional_exchange_rate` - the exchange rate between the store\'s default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code\": \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CouponsResource,
    CouponsResourceFromJSON,
    CouponsResourceFromJSONTyped,
    CouponsResourceToJSON,
    ProductsResource,
    ProductsResourceFromJSON,
    ProductsResourceFromJSONTyped,
    ProductsResourceToJSON,
    ShippingAddressesResource,
    ShippingAddressesResourceFromJSON,
    ShippingAddressesResourceFromJSONTyped,
    ShippingAddressesResourceToJSON,
} from './';

/**
 * Properties that are only for order response bodies.
 * @export
 * @interface OrderRespOnly
 */
export interface OrderRespOnly {
    /**
     * Read-only. The ID of the order.
     * @type {number}
     * @memberof OrderRespOnly
     */
    id?: number;
    /**
     * A read-only value representing the last modification of the order. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822
     * @type {string}
     * @memberof OrderRespOnly
     */
    dateModified?: string;
    /**
     * A read-only value representing the date of shipment. Do not attempt to modify or set this value in a POST or PUT operation. RFC-2822
     * @type {string}
     * @memberof OrderRespOnly
     */
    dateShipped?: string;
    /**
     * The cart ID from which this order originated, if applicable. Correlates with the Cart API. This is a READ-ONLY field; do not set or modify its value in a POST or PUT request.
     * @type {string}
     * @memberof OrderRespOnly
     */
    cartId?: string;
    /**
     * The status will include one of the (string, optiona) - values defined under Order Statuses. This value is read-only. Do not attempt to modify or set this value in a POST or PUT operation.
     * @type {string}
     * @memberof OrderRespOnly
     */
    status?: string;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderRespOnly
     */
    subtotalTax?: string;
    /**
     * A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderRespOnly
     */
    shippingCostTax?: string;
    /**
     * Shipping-cost tax class. A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     * @type {number}
     * @memberof OrderRespOnly
     */
    shippingCostTaxClassId?: number;
    /**
     * A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderRespOnly
     */
    handlingCostTax?: string;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     * @type {number}
     * @memberof OrderRespOnly
     */
    handlingCostTaxClassId?: number;
    /**
     * A read-only value. Do not attempt to modify or set this value in a POST or PUT operation. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderRespOnly
     */
    wrappingCostTax?: string;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT operation. (NOTE: Value ignored if automatic tax is enabled on the store.)
     * @type {number}
     * @memberof OrderRespOnly
     */
    wrappingCostTaxClassId?: number;
    /**
     * A read-only value. Do not attempt to set or modify this value in a POST or PUT operation.
     * @type {string}
     * @memberof OrderRespOnly
     */
    paymentStatus?: OrderRespOnlyPaymentStatusEnum;
    /**
     * Represents the store credit that the shopper has redeemed on this individual order. This is a read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderRespOnly
     */
    storeCreditAmount?: string;
    /**
     * A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderRespOnly
     */
    giftCertificateAmount?: string;
    /**
     * The display currency ID. May be different from transactional currency. A read-only value. Do not pass in a POST or PUT.
     * @type {number}
     * @memberof OrderRespOnly
     */
    currencyId?: number;
    /**
     * The currency code of the display currency used to present prices on the storefront. A read-only value. Do not pass in a POST or PUT.
     * @type {string}
     * @memberof OrderRespOnly
     */
    currencyCode?: string;
    /**
     * The exchange rate between the store's default currency and the display currency. A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderRespOnly
     */
    currencyExchangeRate?: string;
    /**
     * The transactional currency ID. A read-only value. Do not pass in a POST or PUT.
     * @type {number}
     * @memberof OrderRespOnly
     */
    defaultCurrencyId?: number;
    /**
     * A read-only value. Do not pass in a POST or PUT. (Float, Float-As-String, Integer)
     * @type {string}
     * @memberof OrderRespOnly
     */
    couponDiscount?: string;
    /**
     * The number of shipping addresses associated with this transaction. A read-only value. Do not pass in a POST or PUT.
     * @type {number}
     * @memberof OrderRespOnly
     */
    shippingAddressCount?: number;
    /**
     * Indicates whether the shopper has selected an opt-in check box (on the checkout page) to receive emails. A read-only value. Do not pass in a POST or PUT.
     * @type {boolean}
     * @memberof OrderRespOnly
     */
    isEmailOptIn?: boolean;
    /**
     * Orders submitted via the store's website will include a `www` value. Orders submitted via the API will be set to `external`. A read-only value. Do not pass in a POST or PUT.
     * @type {string}
     * @memberof OrderRespOnly
     */
    orderSource?: string;
    /**
     * 
     * @type {ProductsResource}
     * @memberof OrderRespOnly
     */
    products?: ProductsResource;
    /**
     * 
     * @type {ShippingAddressesResource}
     * @memberof OrderRespOnly
     */
    shippingAddresses?: ShippingAddressesResource;
    /**
     * 
     * @type {CouponsResource}
     * @memberof OrderRespOnly
     */
    coupons?: CouponsResource;
    /**
     * The staus ID of the order.
     * @type {number}
     * @memberof OrderRespOnly
     */
    statusId?: number;
}

/**
* @export
* @enum {string}
*/
export enum OrderRespOnlyPaymentStatusEnum {
    Authorized = 'authorized',
    Captured = 'captured',
    CapturePending = 'capture pending',
    Declined = 'declined',
    HeldForReview = 'held for review',
    Paid = 'paid',
    PartiallyRefunded = 'partially refunded',
    Pending = 'pending',
    Refunded = 'refunded',
    Void = 'void',
    VoidPending = 'void pending'
}

export function OrderRespOnlyFromJSON(json: any): OrderRespOnly {
    return OrderRespOnlyFromJSONTyped(json, false);
}

export function OrderRespOnlyFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderRespOnly {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'dateModified': !exists(json, 'date_modified') ? undefined : json['date_modified'],
        'dateShipped': !exists(json, 'date_shipped') ? undefined : json['date_shipped'],
        'cartId': !exists(json, 'cart_id') ? undefined : json['cart_id'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'subtotalTax': !exists(json, 'subtotal_tax') ? undefined : json['subtotal_tax'],
        'shippingCostTax': !exists(json, 'shipping_cost_tax') ? undefined : json['shipping_cost_tax'],
        'shippingCostTaxClassId': !exists(json, 'shipping_cost_tax_class_id') ? undefined : json['shipping_cost_tax_class_id'],
        'handlingCostTax': !exists(json, 'handling_cost_tax') ? undefined : json['handling_cost_tax'],
        'handlingCostTaxClassId': !exists(json, 'handling_cost_tax_class_id') ? undefined : json['handling_cost_tax_class_id'],
        'wrappingCostTax': !exists(json, 'wrapping_cost_tax') ? undefined : json['wrapping_cost_tax'],
        'wrappingCostTaxClassId': !exists(json, 'wrapping_cost_tax_class_id') ? undefined : json['wrapping_cost_tax_class_id'],
        'paymentStatus': !exists(json, 'payment_status') ? undefined : json['payment_status'],
        'storeCreditAmount': !exists(json, 'store_credit_amount') ? undefined : json['store_credit_amount'],
        'giftCertificateAmount': !exists(json, 'gift_certificate_amount') ? undefined : json['gift_certificate_amount'],
        'currencyId': !exists(json, 'currency_id') ? undefined : json['currency_id'],
        'currencyCode': !exists(json, 'currency_code') ? undefined : json['currency_code'],
        'currencyExchangeRate': !exists(json, 'currency_exchange_rate') ? undefined : json['currency_exchange_rate'],
        'defaultCurrencyId': !exists(json, 'default_currency_id') ? undefined : json['default_currency_id'],
        'couponDiscount': !exists(json, 'coupon_discount') ? undefined : json['coupon_discount'],
        'shippingAddressCount': !exists(json, 'shipping_address_count') ? undefined : json['shipping_address_count'],
        'isEmailOptIn': !exists(json, 'is_email_opt_in') ? undefined : json['is_email_opt_in'],
        'orderSource': !exists(json, 'order_source') ? undefined : json['order_source'],
        'products': !exists(json, 'products') ? undefined : ProductsResourceFromJSON(json['products']),
        'shippingAddresses': !exists(json, 'shipping_addresses') ? undefined : ShippingAddressesResourceFromJSON(json['shipping_addresses']),
        'coupons': !exists(json, 'coupons') ? undefined : CouponsResourceFromJSON(json['coupons']),
        'statusId': !exists(json, 'status_id') ? undefined : json['status_id'],
    };
}

export function OrderRespOnlyToJSON(value?: OrderRespOnly | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'date_modified': value.dateModified,
        'date_shipped': value.dateShipped,
        'cart_id': value.cartId,
        'status': value.status,
        'subtotal_tax': value.subtotalTax,
        'shipping_cost_tax': value.shippingCostTax,
        'shipping_cost_tax_class_id': value.shippingCostTaxClassId,
        'handling_cost_tax': value.handlingCostTax,
        'handling_cost_tax_class_id': value.handlingCostTaxClassId,
        'wrapping_cost_tax': value.wrappingCostTax,
        'wrapping_cost_tax_class_id': value.wrappingCostTaxClassId,
        'payment_status': value.paymentStatus,
        'store_credit_amount': value.storeCreditAmount,
        'gift_certificate_amount': value.giftCertificateAmount,
        'currency_id': value.currencyId,
        'currency_code': value.currencyCode,
        'currency_exchange_rate': value.currencyExchangeRate,
        'default_currency_id': value.defaultCurrencyId,
        'coupon_discount': value.couponDiscount,
        'shipping_address_count': value.shippingAddressCount,
        'is_email_opt_in': value.isEmailOptIn,
        'order_source': value.orderSource,
        'products': ProductsResourceToJSON(value.products),
        'shipping_addresses': ShippingAddressesResourceToJSON(value.shippingAddresses),
        'coupons': CouponsResourceToJSON(value.coupons),
        'status_id': value.statusId,
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Orders V2
 * Manage order coupons, messages, products, shipping addresses, statuses, taxes, shipments, and shipping address quotes.  - [Authentication](#authentication) - [Order](#order)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Orders | modify | `store_v2_orders` | |  Orders | read-only | `store_v2_orders_read_only` |   ## Order  The Order object contains a record of the purchase agreement between a shopper and a merchant. To learn more about creating orders, see [Orders API Guide](/api-docs/orders/orders-api-overview).  ### Currency Fields  The **default** currency refers to the transactional currency which is the currency the shopper pays in.  The **display** currency refers to the presentational currency used to present prices to the shopper on the storefront.  * `currency_id` - the display currency ID. Depending on the currency selected, the value may be different from the transactional currency. * `currency_code` - the currency code of the display currency used to present prices to the shopper on the storefront. Depending on the currency selected, the value may be different from the transactional currency. * `currency_exchange_rate` - the exchange rate between the store\'s default currency and the display currency. For orders created using the V2 endpoints, this value is always 1 (only in the storefront this value can be different to 1). * `default_currency_id` - the transactional currency ID. * `default_currency_code` - the currency code of the transactional currency the shopper pays in.  The following additional fields are returned on orders when Multi-Currency is enabled on the store:  * `store_default_currency_code` - the currency code of the store\'s default currency. * `store_default_to_transactional_exchange_rate` - the exchange rate between the store\'s default currency and the transactional currency used in the order.  **Example:**  ```json {   ...   \"currency_id\": 4,   \"currency_code\": \"EUR\",   \"currency_exchange_rate\": 1,   \"default_currency_id\": 4,   \"default_currency_code\": \"EUR\",   \"store_default_currency_code\": \"USD\",   \"store_default_to_transactional_exchange_rate\": \"100.0000000000\"   ... } ```
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OrderCount,
    OrderCountFromJSON,
    OrderCountToJSON,
    OrderShipment,
    OrderShipmentFromJSON,
    OrderShipmentToJSON,
    OrderShipmentPost,
    OrderShipmentPostFromJSON,
    OrderShipmentPostToJSON,
    OrderShipmentPut,
    OrderShipmentPutFromJSON,
    OrderShipmentPutToJSON,
} from '../models';

export interface CreateOrderShipmentsRequest {
    orderId: number;
    accept: string;
    contentType: string;
    orderShipmentPost: OrderShipmentPost;
}

export interface DeleteAllOrderShipmentsRequest {
    orderId: number;
    accept: string;
    contentType: string;
}

export interface DeleteOrderShipmentRequest {
    orderId: number;
    shipmentId: number;
    accept: string;
    contentType: string;
}

export interface GetAllOrderShipmentsRequest {
    orderId: number;
    accept: string;
    contentType: string;
    page?: number;
    limit?: number;
}

export interface GetCountShipmentsRequest {
    orderId: number;
    accept: string;
    contentType: string;
}

export interface GetOrderShipmentRequest {
    orderId: number;
    shipmentId: number;
    accept: string;
    contentType: string;
}

export interface UpdateOrderShipmentRequest {
    orderId: number;
    shipmentId: number;
    accept: string;
    contentType: string;
    orderShipmentPut: OrderShipmentPut;
}

/**
 * 
 */
export class OrderShipmentsApi extends runtime.BaseAPI {

    /**
     * Creates an *Order Shipment*. For more details, see [Shipping an Order](/api-docs/orders/orders-api-overview#shipping-an-order).  **Required Fields** *   order_address_id *   items  **Usage Notes**  Presuming that a valid carrier code is used, a tracking link is generated if either `shipping_provider` or `tracking_carrier` is supplied alongside a tracking number. Providing only the tracking number will result in an unclickable text in the customer facing email.  Acceptable values for `shipping_provider` include an empty string (`\"\"`), auspost, canadapost, endicia, usps, fedex, royalmail, ups, upsready, upsonline, or shipperhq.  Acceptable values for `tracking_carrier` include an empty string (`\"\"`) or one of the valid tracking-carrier values viewable [here](https://github.com/bigcommerce/dev-docs/blob/development/assets/csv/tracking_carrier_values.csv) and downloadable as a .CSV file [here](https://raw.githubusercontent.com/bigcommerce/dev-docs/development/assets/csv/tracking_carrier_values.csv). 
     * Create Order Shipment
     */
    async createOrderShipmentsRaw(requestParameters: CreateOrderShipmentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderShipment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createOrderShipments.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling createOrderShipments.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling createOrderShipments.');
        }

        if (requestParameters.orderShipmentPost === null || requestParameters.orderShipmentPost === undefined) {
            throw new runtime.RequiredError('orderShipmentPost','Required parameter requestParameters.orderShipmentPost was null or undefined when calling createOrderShipments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/shipments`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrderShipmentPostToJSON(requestParameters.orderShipmentPost),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderShipmentFromJSON(jsonValue));
    }

    /**
     * Creates an *Order Shipment*. For more details, see [Shipping an Order](/api-docs/orders/orders-api-overview#shipping-an-order).  **Required Fields** *   order_address_id *   items  **Usage Notes**  Presuming that a valid carrier code is used, a tracking link is generated if either `shipping_provider` or `tracking_carrier` is supplied alongside a tracking number. Providing only the tracking number will result in an unclickable text in the customer facing email.  Acceptable values for `shipping_provider` include an empty string (`\"\"`), auspost, canadapost, endicia, usps, fedex, royalmail, ups, upsready, upsonline, or shipperhq.  Acceptable values for `tracking_carrier` include an empty string (`\"\"`) or one of the valid tracking-carrier values viewable [here](https://github.com/bigcommerce/dev-docs/blob/development/assets/csv/tracking_carrier_values.csv) and downloadable as a .CSV file [here](https://raw.githubusercontent.com/bigcommerce/dev-docs/development/assets/csv/tracking_carrier_values.csv). 
     * Create Order Shipment
     */
    async createOrderShipments(requestParameters: CreateOrderShipmentsRequest, initOverrides?: RequestInit): Promise<OrderShipment> {
        const response = await this.createOrderShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes all shipments associated with an order.
     * Delete Order Shipments
     */
    async deleteAllOrderShipmentsRaw(requestParameters: DeleteAllOrderShipmentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteAllOrderShipments.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteAllOrderShipments.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteAllOrderShipments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/shipments`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes all shipments associated with an order.
     * Delete Order Shipments
     */
    async deleteAllOrderShipments(requestParameters: DeleteAllOrderShipmentsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAllOrderShipmentsRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a shipment associated with an order.
     * Delete an Order Shipment
     */
    async deleteOrderShipmentRaw(requestParameters: DeleteOrderShipmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteOrderShipment.');
        }

        if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
            throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling deleteOrderShipment.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteOrderShipment.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteOrderShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/shipments/{shipment_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipment_id"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a shipment associated with an order.
     * Delete an Order Shipment
     */
    async deleteOrderShipment(requestParameters: DeleteOrderShipmentRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteOrderShipmentRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a list of all shipments on an order.
     * Get Order Shipments
     */
    async getAllOrderShipmentsRaw(requestParameters: GetAllOrderShipmentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OrderShipment>>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getAllOrderShipments.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getAllOrderShipments.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getAllOrderShipments.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/shipments`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderShipmentFromJSON));
    }

    /**
     * Gets a list of all shipments on an order.
     * Get Order Shipments
     */
    async getAllOrderShipments(requestParameters: GetAllOrderShipmentsRequest, initOverrides?: RequestInit): Promise<Array<OrderShipment>> {
        const response = await this.getAllOrderShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a count of the number of shipments that have been made for a single order.
     * Get Count of Order Shipments
     */
    async getCountShipmentsRaw(requestParameters: GetCountShipmentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderCount>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getCountShipments.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getCountShipments.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getCountShipments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/shipments/count`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderCountFromJSON(jsonValue));
    }

    /**
     * Gets a count of the number of shipments that have been made for a single order.
     * Get Count of Order Shipments
     */
    async getCountShipments(requestParameters: GetCountShipmentsRequest, initOverrides?: RequestInit): Promise<OrderCount> {
        const response = await this.getCountShipmentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets an order shipment. 
     * Get a Shipment
     */
    async getOrderShipmentRaw(requestParameters: GetOrderShipmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderShipment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderShipment.');
        }

        if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
            throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling getOrderShipment.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getOrderShipment.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getOrderShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/shipments/{shipment_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipment_id"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderShipmentFromJSON(jsonValue));
    }

    /**
     * Gets an order shipment. 
     * Get a Shipment
     */
    async getOrderShipment(requestParameters: GetOrderShipmentRequest, initOverrides?: RequestInit): Promise<OrderShipment> {
        const response = await this.getOrderShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing shipment associated with an order.
     * Update a Shipment
     */
    async updateOrderShipmentRaw(requestParameters: UpdateOrderShipmentRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<OrderShipment>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderShipment.');
        }

        if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
            throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling updateOrderShipment.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling updateOrderShipment.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling updateOrderShipment.');
        }

        if (requestParameters.orderShipmentPut === null || requestParameters.orderShipmentPut === undefined) {
            throw new runtime.RequiredError('orderShipmentPut','Required parameter requestParameters.orderShipmentPut was null or undefined when calling updateOrderShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/shipments/{shipment_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shipment_id"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OrderShipmentPutToJSON(requestParameters.orderShipmentPut),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderShipmentFromJSON(jsonValue));
    }

    /**
     * Updates an existing shipment associated with an order.
     * Update a Shipment
     */
    async updateOrderShipment(requestParameters: UpdateOrderShipmentRequest, initOverrides?: RequestInit): Promise<OrderShipment> {
        const response = await this.updateOrderShipmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

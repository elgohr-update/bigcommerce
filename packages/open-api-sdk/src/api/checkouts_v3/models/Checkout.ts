/* tslint:disable */
/* eslint-disable */
/**
 * Checkouts
 * Create checkouts from existing carts using BigCommerce checkout logic.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AppliedCoupon,
    AppliedCouponFromJSON,
    AppliedCouponFromJSONTyped,
    AppliedCouponToJSON,
    Cart,
    CartFromJSON,
    CartFromJSONTyped,
    CartToJSON,
    Consignment,
    ConsignmentFromJSON,
    ConsignmentFromJSONTyped,
    ConsignmentToJSON,
    Tax,
    TaxFromJSON,
    TaxFromJSONTyped,
    TaxToJSON,
} from './';

/**
 * 
 * @export
 * @interface Checkout
 */
export interface Checkout {
    /**
     * 
     * @type {string}
     * @memberof Checkout
     */
    id?: string;
    /**
     * 
     * @type {Cart}
     * @memberof Checkout
     */
    cart?: Cart;
    /**
     * 
     * @type {object}
     * @memberof Checkout
     */
    billingAddress?: object;
    /**
     * 
     * @type {Array<Consignment>}
     * @memberof Checkout
     */
    consignments?: Array<Consignment>;
    /**
     * 
     * @type {Array<Tax>}
     * @memberof Checkout
     */
    taxes?: Array<Tax>;
    /**
     * Coupons applied at checkout level.
     * @type {Array<AppliedCoupon>}
     * @memberof Checkout
     */
    coupons?: Array<AppliedCoupon>;
    /**
     * 
     * @type {string}
     * @memberof Checkout
     */
    orderId?: string;
    /**
     * Shipping cost before any discounts are applied including tax.
     * @type {number}
     * @memberof Checkout
     */
    shippingCostTotalIncTax?: number;
    /**
     * Shipping cost before any discounts are applied excluding tax.
     * @type {number}
     * @memberof Checkout
     */
    shippingCostTotalExTax?: number;
    /**
     * Handling cost for all consignments including tax.
     * @type {number}
     * @memberof Checkout
     */
    handlingCostTotalIncTax?: number;
    /**
     * Handling cost for all consignments excluding tax.
     * @type {number}
     * @memberof Checkout
     */
    handlingCostTotalExTax?: number;
    /**
     * 
     * @type {number}
     * @memberof Checkout
     */
    taxTotal?: number;
    /**
     * Subtotal of the checkout before applying item level discounts including tax.
     * @type {number}
     * @memberof Checkout
     */
    subtotalIncTax?: number;
    /**
     * Subtotal of the checkout before applying item level discounts excluding tax.
     * @type {number}
     * @memberof Checkout
     */
    subtotalExTax?: number;
    /**
     * The total payable amount, before applying any store credit or gift certificate.
     * @type {number}
     * @memberof Checkout
     */
    grandTotal?: number;
    /**
     * Time when the cart was created.
     * @type {string}
     * @memberof Checkout
     */
    createdTime?: string;
    /**
     * Time when the cart was last updated.
     * @type {string}
     * @memberof Checkout
     */
    updatedTime?: string;
    /**
     * Shopper's message provided as details for the order to be created from this checkout.
     * @type {string}
     * @memberof Checkout
     */
    customerMessage?: string;
}

export function CheckoutFromJSON(json: any): Checkout {
    return CheckoutFromJSONTyped(json, false);
}

export function CheckoutFromJSONTyped(json: any, ignoreDiscriminator: boolean): Checkout {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'cart': !exists(json, 'cart') ? undefined : CartFromJSON(json['cart']),
        'billingAddress': !exists(json, 'billing_address') ? undefined : json['billing_address'],
        'consignments': !exists(json, 'consignments') ? undefined : ((json['consignments'] as Array<any>).map(ConsignmentFromJSON)),
        'taxes': !exists(json, 'taxes') ? undefined : ((json['taxes'] as Array<any>).map(TaxFromJSON)),
        'coupons': !exists(json, 'coupons') ? undefined : ((json['coupons'] as Array<any>).map(AppliedCouponFromJSON)),
        'orderId': !exists(json, 'order_id') ? undefined : json['order_id'],
        'shippingCostTotalIncTax': !exists(json, 'shipping_cost_total_inc_tax') ? undefined : json['shipping_cost_total_inc_tax'],
        'shippingCostTotalExTax': !exists(json, 'shipping_cost_total_ex_tax') ? undefined : json['shipping_cost_total_ex_tax'],
        'handlingCostTotalIncTax': !exists(json, 'handling_cost_total_inc_tax') ? undefined : json['handling_cost_total_inc_tax'],
        'handlingCostTotalExTax': !exists(json, 'handling_cost_total_ex_tax') ? undefined : json['handling_cost_total_ex_tax'],
        'taxTotal': !exists(json, 'tax_total') ? undefined : json['tax_total'],
        'subtotalIncTax': !exists(json, 'subtotal_inc_tax') ? undefined : json['subtotal_inc_tax'],
        'subtotalExTax': !exists(json, 'subtotal_ex_tax') ? undefined : json['subtotal_ex_tax'],
        'grandTotal': !exists(json, 'grand_total') ? undefined : json['grand_total'],
        'createdTime': !exists(json, 'created_time') ? undefined : json['created_time'],
        'updatedTime': !exists(json, 'updated_time') ? undefined : json['updated_time'],
        'customerMessage': !exists(json, 'customer_message') ? undefined : json['customer_message'],
    };
}

export function CheckoutToJSON(value?: Checkout | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'cart': CartToJSON(value.cart),
        'billing_address': value.billingAddress,
        'consignments': value.consignments === undefined ? undefined : ((value.consignments as Array<any>).map(ConsignmentToJSON)),
        'taxes': value.taxes === undefined ? undefined : ((value.taxes as Array<any>).map(TaxToJSON)),
        'coupons': value.coupons === undefined ? undefined : ((value.coupons as Array<any>).map(AppliedCouponToJSON)),
        'order_id': value.orderId,
        'shipping_cost_total_inc_tax': value.shippingCostTotalIncTax,
        'shipping_cost_total_ex_tax': value.shippingCostTotalExTax,
        'handling_cost_total_inc_tax': value.handlingCostTotalIncTax,
        'handling_cost_total_ex_tax': value.handlingCostTotalExTax,
        'tax_total': value.taxTotal,
        'subtotal_inc_tax': value.subtotalIncTax,
        'subtotal_ex_tax': value.subtotalExTax,
        'grand_total': value.grandTotal,
        'created_time': value.createdTime,
        'updated_time': value.updatedTime,
        'customer_message': value.customerMessage,
    };
}



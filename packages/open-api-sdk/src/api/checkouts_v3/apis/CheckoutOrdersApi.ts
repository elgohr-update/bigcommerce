/* tslint:disable */
/* eslint-disable */
/**
 * Checkouts
 * Create checkouts from existing carts using BigCommerce checkout logic.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
} from '../models';

export interface CreateAnOrderRequest {
    accept: string;
    contentType: string;
    checkoutId: string;
}

/**
 * 
 */
export class CheckoutOrdersApi extends runtime.BaseAPI {

    /**
     * Creates an order.  ## Usage notes * Orders created will be set to incomplete order status. * You can create as many orders from the same order(cart) as you want. * Order duplication creates the same order with a new order number with the incomplete status. * Once the order is paid, then the cart is deleted. * Cart deletion occurs if you are using BigCommerce to accept payments on orders.
     * Create an Order
     */
    async createAnOrderRaw(requestParameters: CreateAnOrderRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling createAnOrder.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling createAnOrder.');
        }

        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling createAnOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/checkouts/{checkoutId}/orders`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Creates an order.  ## Usage notes * Orders created will be set to incomplete order status. * You can create as many orders from the same order(cart) as you want. * Order duplication creates the same order with a new order number with the incomplete status. * Once the order is paid, then the cart is deleted. * Cart deletion occurs if you are using BigCommerce to accept payments on orders.
     * Create an Order
     */
    async createAnOrder(requestParameters: CreateAnOrderRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.createAnOrderRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Checkouts
 * Create checkouts from existing carts using BigCommerce checkout logic.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateConsignmentRequest,
    CreateConsignmentRequestFromJSON,
    CreateConsignmentRequestToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    UpdateConsignmentRequest,
    UpdateConsignmentRequestFromJSON,
    UpdateConsignmentRequestToJSON,
} from '../models';

export interface CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRequest {
    checkoutId: string;
    accept: string;
    contentType: string;
    consignmentId: string;
}

export interface CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPutRequest {
    checkoutId: string;
    accept: string;
    contentType: string;
    consignmentId: string;
    body: UpdateConsignmentRequest;
    include?: CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPutIncludeEnum;
}

export interface CheckoutsConsignmentsByCheckoutIdPostRequest {
    checkoutId: string;
    accept: string;
    contentType: string;
    body: CreateConsignmentRequest;
    include?: CheckoutsConsignmentsByCheckoutIdPostIncludeEnum;
}

/**
 * 
 */
export class CheckoutConsignmentsApi extends runtime.BaseAPI {

    /**
     * Removes an existing consignment from a checkout.  Removing the last consigment will remove the Cart from the customer it is assigned to. Create a new redirect url for the customer to access it again.
     * Delete Checkout Consignment
     */
    async checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRaw(requestParameters: CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete.');
        }

        if (requestParameters.consignmentId === null || requestParameters.consignmentId === undefined) {
            throw new runtime.RequiredError('consignmentId','Required parameter requestParameters.consignmentId was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/checkouts/{checkoutId}/consignments/{consignmentId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"consignmentId"}}`, encodeURIComponent(String(requestParameters.consignmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Removes an existing consignment from a checkout.  Removing the last consigment will remove the Cart from the customer it is assigned to. Create a new redirect url for the customer to access it again.
     * Delete Checkout Consignment
     */
    async checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete(requestParameters: CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing consignment. Shipping address, line item IDs or the shipping option ID can be updated using this endpoint.  There are two steps to add a new shipping address and shipping options with line items.  1. Add a new [consignment](/api-reference/store-management/checkouts/checkout-consignments/checkoutsconsignmentsbycheckoutidpost) to a checkout. 2. Assign a shipping option to the new consignment by sending a `PUT` request to update the consignment\'s `shipping_option_id` with a returned value from `data.consignments[N].available_shipping_option[N].id` in step one.
     * Update Checkout Consignment
     */
    async checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutRaw(requestParameters: CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut.');
        }

        if (requestParameters.consignmentId === null || requestParameters.consignmentId === undefined) {
            throw new runtime.RequiredError('consignmentId','Required parameter requestParameters.consignmentId was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/checkouts/{checkoutId}/consignments/{consignmentId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"consignmentId"}}`, encodeURIComponent(String(requestParameters.consignmentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateConsignmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Updates an existing consignment. Shipping address, line item IDs or the shipping option ID can be updated using this endpoint.  There are two steps to add a new shipping address and shipping options with line items.  1. Add a new [consignment](/api-reference/store-management/checkouts/checkout-consignments/checkoutsconsignmentsbycheckoutidpost) to a checkout. 2. Assign a shipping option to the new consignment by sending a `PUT` request to update the consignment\'s `shipping_option_id` with a returned value from `data.consignments[N].available_shipping_option[N].id` in step one.
     * Update Checkout Consignment
     */
    async checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut(requestParameters: CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPutRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new consignment to a checkout.   There are two steps to create a new consignment with a shipping address, line items, and shipping option.  1. Add a new consignment to a checkout. Append the following query parameter to your `POST` request to also return `available_shipping_options` necessary for step two: `?include=consignments.available_shipping_options`.  2. [Update the consignment](https://developer.bigcommerce.com/api-reference/cart-checkout/server-server-checkout-api/checkout-consignments/checkoutsconsignmentsbycheckoutidandconsignmentidput) with one of the available shipping options returned from your `POST` request.  Though the only required `shipping_address` properties to create a consignment are `email` and `country_code`, to successfully [create an order](https://developer.bigcommerce.com/api-reference/store-management/checkouts/checkout-orders/createanorder) the `shipping_address` requires the following properties: * `first_name` * `last_name` * `address1` * `city` * `country` * `email` * `country_code`  Depending on the country, the following `shipping_address` properties can also be required:  * `postal_code` * `state_or_province`
     * Add Consignment to Checkout
     */
    async checkoutsConsignmentsByCheckoutIdPostRaw(requestParameters: CheckoutsConsignmentsByCheckoutIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsConsignmentsByCheckoutIdPost.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling checkoutsConsignmentsByCheckoutIdPost.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling checkoutsConsignmentsByCheckoutIdPost.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling checkoutsConsignmentsByCheckoutIdPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/checkouts/{checkoutId}/consignments`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateConsignmentRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a new consignment to a checkout.   There are two steps to create a new consignment with a shipping address, line items, and shipping option.  1. Add a new consignment to a checkout. Append the following query parameter to your `POST` request to also return `available_shipping_options` necessary for step two: `?include=consignments.available_shipping_options`.  2. [Update the consignment](https://developer.bigcommerce.com/api-reference/cart-checkout/server-server-checkout-api/checkout-consignments/checkoutsconsignmentsbycheckoutidandconsignmentidput) with one of the available shipping options returned from your `POST` request.  Though the only required `shipping_address` properties to create a consignment are `email` and `country_code`, to successfully [create an order](https://developer.bigcommerce.com/api-reference/store-management/checkouts/checkout-orders/createanorder) the `shipping_address` requires the following properties: * `first_name` * `last_name` * `address1` * `city` * `country` * `email` * `country_code`  Depending on the country, the following `shipping_address` properties can also be required:  * `postal_code` * `state_or_province`
     * Add Consignment to Checkout
     */
    async checkoutsConsignmentsByCheckoutIdPost(requestParameters: CheckoutsConsignmentsByCheckoutIdPostRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.checkoutsConsignmentsByCheckoutIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPutIncludeEnum {
    ConsignmentsAvailableShippingOptions = 'consignments.available_shipping_options'
}
/**
    * @export
    * @enum {string}
    */
export enum CheckoutsConsignmentsByCheckoutIdPostIncludeEnum {
    ConsignmentsAvailableShippingOptions = 'consignments.available_shipping_options'
}

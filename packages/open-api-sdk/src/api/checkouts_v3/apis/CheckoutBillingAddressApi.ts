/* tslint:disable */
/* eslint-disable */
/**
 * Checkouts
 * Create checkouts from existing carts using BigCommerce checkout logic.
 *
 * The version of the OpenAPI document: 3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddressProperties,
    AddressPropertiesFromJSON,
    AddressPropertiesToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
} from '../models';

export interface CheckoutsBillingAddressByCheckoutIdAndAddressIdPutRequest {
    checkoutId: string;
    accept: string;
    contentType: string;
    addressId: number;
    body: AddressProperties;
}

export interface CheckoutsBillingAddressByCheckoutIdPostRequest {
    checkoutId: string;
    accept: string;
    contentType: string;
    body: AddressProperties;
}

/**
 * 
 */
export class CheckoutBillingAddressApi extends runtime.BaseAPI {

    /**
     * Updates an existing billing address on *Checkout*.
     * Update Checkout Billing Address
     */
    async checkoutsBillingAddressByCheckoutIdAndAddressIdPutRaw(requestParameters: CheckoutsBillingAddressByCheckoutIdAndAddressIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut.');
        }

        if (requestParameters.addressId === null || requestParameters.addressId === undefined) {
            throw new runtime.RequiredError('addressId','Required parameter requestParameters.addressId was null or undefined when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/checkouts/{checkoutId}/billing-address/{addressId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters.addressId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddressPropertiesToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Updates an existing billing address on *Checkout*.
     * Update Checkout Billing Address
     */
    async checkoutsBillingAddressByCheckoutIdAndAddressIdPut(requestParameters: CheckoutsBillingAddressByCheckoutIdAndAddressIdPutRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.checkoutsBillingAddressByCheckoutIdAndAddressIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a billing address to an existing *Checkout*.  **Required Fields** * email * country_code
     * Add Checkout Billing Address
     */
    async checkoutsBillingAddressByCheckoutIdPostRaw(requestParameters: CheckoutsBillingAddressByCheckoutIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsBillingAddressByCheckoutIdPost.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling checkoutsBillingAddressByCheckoutIdPost.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling checkoutsBillingAddressByCheckoutIdPost.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling checkoutsBillingAddressByCheckoutIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/checkouts/{checkoutId}/billing-address`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressPropertiesToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Adds a billing address to an existing *Checkout*.  **Required Fields** * email * country_code
     * Add Checkout Billing Address
     */
    async checkoutsBillingAddressByCheckoutIdPost(requestParameters: CheckoutsBillingAddressByCheckoutIdPostRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.checkoutsBillingAddressByCheckoutIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Store Information
 * Get Store Information endpoint, manage store profile settings.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    StoreInformationFeatures,
    StoreInformationFeaturesFromJSON,
    StoreInformationFeaturesFromJSONTyped,
    StoreInformationFeaturesToJSON,
    StoreInformationLogo,
    StoreInformationLogoFromJSON,
    StoreInformationLogoFromJSONTyped,
    StoreInformationLogoToJSON,
    Timezone,
    TimezoneFromJSON,
    TimezoneFromJSONTyped,
    TimezoneToJSON,
} from './';

/**
 * 
 * @export
 * @interface StoreInformation
 */
export interface StoreInformation {
    /**
     * Unique store identifier.
     * @type {string}
     * @memberof StoreInformation
     */
    id?: string;
    /**
     * Primary domain name.
     * @type {string}
     * @memberof StoreInformation
     */
    domain?: string;
    /**
     * Store’s current HTTPS URL.
     * @type {string}
     * @memberof StoreInformation
     */
    secureURL?: string;
    /**
     * The secure hostname of the control panel.
     * @type {string}
     * @memberof StoreInformation
     */
    controlPanelBaseUrl?: string;
    /**
     * Store's name.
     * @type {string}
     * @memberof StoreInformation
     */
    name?: string;
    /**
     * Primary contact’s first name (as defined during the store sign-up process).
     * @type {string}
     * @memberof StoreInformation
     */
    firstName?: string;
    /**
     * Primary contact’s last name (as defined during the store sign-up process).
     * @type {string}
     * @memberof StoreInformation
     */
    lastName?: string;
    /**
     * Display address.
     * @type {string}
     * @memberof StoreInformation
     */
    address?: string;
    /**
     * Country where the store is located (as defined during the store sign-up process).
     * @type {string}
     * @memberof StoreInformation
     */
    country?: string;
    /**
     * Display phone number.
     * @type {string}
     * @memberof StoreInformation
     */
    phone?: string;
    /**
     * Email address of the store administrator/owner.
     * @type {string}
     * @memberof StoreInformation
     */
    adminEmail?: string;
    /**
     * Email address for orders and fulfillment.
     * @type {string}
     * @memberof StoreInformation
     */
    orderEmail?: string;
    /**
     * 
     * @type {Timezone}
     * @memberof StoreInformation
     */
    timezone?: Timezone;
    /**
     * Default language code.
     * @type {string}
     * @memberof StoreInformation
     */
    language?: string;
    /**
     * Default currency code
     * @type {string}
     * @memberof StoreInformation
     */
    currency?: string;
    /**
     * Default symbol for values in the currency.
     * @type {string}
     * @memberof StoreInformation
     */
    currencySymbol?: string;
    /**
     * Default decimal separator for values in the currency.
     * @type {string}
     * @memberof StoreInformation
     */
    decimalSeparator?: string;
    /**
     * Default thousands separator for values in the currency.
     * @type {string}
     * @memberof StoreInformation
     */
    thousandsSeparator?: string;
    /**
     * Default decimal places for values in the currency.
     * @type {number}
     * @memberof StoreInformation
     */
    decimalPlaces?: number;
    /**
     * Default position of the currency symbol (left or right).
     * @type {string}
     * @memberof StoreInformation
     */
    currencySymbolLocation?: string;
    /**
     * Default weight units (metric or imperial).
     * @type {string}
     * @memberof StoreInformation
     */
    weightUnits?: string;
    /**
     * Default dimension units (metric or imperial).
     * @type {string}
     * @memberof StoreInformation
     */
    dimensionUnits?: string;
    /**
     * The number of decimal places.
     * @type {number}
     * @memberof StoreInformation
     */
    dimensionDecimalPlaces?: number;
    /**
     * The symbol that separates the whole numbers from the decimal points.
     * @type {string}
     * @memberof StoreInformation
     */
    dimensionDecimalToken?: string;
    /**
     * The symbol used to denote thousands.
     * @type {string}
     * @memberof StoreInformation
     */
    dimensionThousandsToken?: string;
    /**
     * Name of the BigCommerce plan to which this store is subscribed.
     * @type {string}
     * @memberof StoreInformation
     */
    planName?: string;
    /**
     * Level of the BigCommerce plan to which this store is subscribed.
     * @type {string}
     * @memberof StoreInformation
     */
    planLevel?: string;
    /**
     * Industry, or vertical category, in which the business operates. (As selected from drop-down list during the store sign-up process.)
     * @type {string}
     * @memberof StoreInformation
     */
    industry?: string;
    /**
     * 
     * @type {StoreInformationLogo}
     * @memberof StoreInformation
     */
    logo?: StoreInformationLogo;
    /**
     * A Boolean value that indicates whether or not prices are entered with tax.
     * @type {boolean}
     * @memberof StoreInformation
     */
    isPriceEnteredWithTax?: boolean;
    /**
     * 
     * @type {Array<object>}
     * @memberof StoreInformation
     */
    activeComparisonModules?: Array<object>;
    /**
     * 
     * @type {StoreInformationFeatures}
     * @memberof StoreInformation
     */
    features?: StoreInformationFeatures;
}

export function StoreInformationFromJSON(json: any): StoreInformation {
    return StoreInformationFromJSONTyped(json, false);
}

export function StoreInformationFromJSONTyped(json: any, ignoreDiscriminator: boolean): StoreInformation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'secureURL': !exists(json, 'secure_URL') ? undefined : json['secure_URL'],
        'controlPanelBaseUrl': !exists(json, 'control_panel_base_url') ? undefined : json['control_panel_base_url'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'firstName': !exists(json, 'first_name') ? undefined : json['first_name'],
        'lastName': !exists(json, 'last_name') ? undefined : json['last_name'],
        'address': !exists(json, 'address') ? undefined : json['address'],
        'country': !exists(json, 'country') ? undefined : json['country'],
        'phone': !exists(json, 'phone') ? undefined : json['phone'],
        'adminEmail': !exists(json, 'admin_email') ? undefined : json['admin_email'],
        'orderEmail': !exists(json, 'order_email') ? undefined : json['order_email'],
        'timezone': !exists(json, 'timezone') ? undefined : TimezoneFromJSON(json['timezone']),
        'language': !exists(json, 'language') ? undefined : json['language'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'currencySymbol': !exists(json, 'currency_symbol') ? undefined : json['currency_symbol'],
        'decimalSeparator': !exists(json, 'decimal_separator') ? undefined : json['decimal_separator'],
        'thousandsSeparator': !exists(json, 'thousands_separator') ? undefined : json['thousands_separator'],
        'decimalPlaces': !exists(json, 'decimal_places') ? undefined : json['decimal_places'],
        'currencySymbolLocation': !exists(json, 'currency_symbol_location') ? undefined : json['currency_symbol_location'],
        'weightUnits': !exists(json, 'weight_units') ? undefined : json['weight_units'],
        'dimensionUnits': !exists(json, 'dimension_units') ? undefined : json['dimension_units'],
        'dimensionDecimalPlaces': !exists(json, 'dimension_decimal_places') ? undefined : json['dimension_decimal_places'],
        'dimensionDecimalToken': !exists(json, 'dimension_decimal_token') ? undefined : json['dimension_decimal_token'],
        'dimensionThousandsToken': !exists(json, 'dimension_thousands_token:') ? undefined : json['dimension_thousands_token:'],
        'planName': !exists(json, 'plan_name') ? undefined : json['plan_name'],
        'planLevel': !exists(json, 'plan_level') ? undefined : json['plan_level'],
        'industry': !exists(json, 'industry') ? undefined : json['industry'],
        'logo': !exists(json, 'logo') ? undefined : StoreInformationLogoFromJSON(json['logo']),
        'isPriceEnteredWithTax': !exists(json, 'is_price_entered_with_tax') ? undefined : json['is_price_entered_with_tax'],
        'activeComparisonModules': !exists(json, 'active_comparison_modules') ? undefined : json['active_comparison_modules'],
        'features': !exists(json, 'features') ? undefined : StoreInformationFeaturesFromJSON(json['features']),
    };
}

export function StoreInformationToJSON(value?: StoreInformation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'domain': value.domain,
        'secure_URL': value.secureURL,
        'control_panel_base_url': value.controlPanelBaseUrl,
        'name': value.name,
        'first_name': value.firstName,
        'last_name': value.lastName,
        'address': value.address,
        'country': value.country,
        'phone': value.phone,
        'admin_email': value.adminEmail,
        'order_email': value.orderEmail,
        'timezone': TimezoneToJSON(value.timezone),
        'language': value.language,
        'currency': value.currency,
        'currency_symbol': value.currencySymbol,
        'decimal_separator': value.decimalSeparator,
        'thousands_separator': value.thousandsSeparator,
        'decimal_places': value.decimalPlaces,
        'currency_symbol_location': value.currencySymbolLocation,
        'weight_units': value.weightUnits,
        'dimension_units': value.dimensionUnits,
        'dimension_decimal_places': value.dimensionDecimalPlaces,
        'dimension_decimal_token': value.dimensionDecimalToken,
        'dimension_thousands_token:': value.dimensionThousandsToken,
        'plan_name': value.planName,
        'plan_level': value.planLevel,
        'industry': value.industry,
        'logo': StoreInformationLogoToJSON(value.logo),
        'is_price_entered_with_tax': value.isPriceEnteredWithTax,
        'active_comparison_modules': value.activeComparisonModules,
        'features': StoreInformationFeaturesToJSON(value.features),
    };
}



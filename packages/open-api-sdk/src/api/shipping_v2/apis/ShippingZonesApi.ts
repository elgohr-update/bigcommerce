/* tslint:disable */
/* eslint-disable */
/**
 * Shipping V2
 * Manage shipping zones, shipping methods, and shipping carrier connections.  ### Shipping Zones The Shipping Zone object and endpoints manage shipping zones within countries.  ### Shipping Methods The Shipping Methods object and endpoints manage shipping rules within Shipping Zones. These rules determine the shipping rates displayed at checkout, and related parts of the control panel, such as the shipping of manual orders.  ### Shipping Carrier Connections Carrier connections refer to specific settings required to connect to a specific shipping carrier. Each carrier requires your app to supply a unique set of properties/fields to establish a connection with that carrier.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ShippingZone,
    ShippingZoneFromJSON,
    ShippingZoneToJSON,
    ShippingZone1,
    ShippingZone1FromJSON,
    ShippingZone1ToJSON,
    ShippingZone2,
    ShippingZone2FromJSON,
    ShippingZone2ToJSON,
} from '../models';

export interface CreateAShippingZonesRequest {
    accept: string;
    contentType: string;
    body: ShippingZone1;
}

export interface DeleteAShippingZoneRequest {
    id: number;
    accept: string;
    contentType: string;
}

export interface GetAShippingZoneRequest {
    id: number;
    accept: string;
    contentType: string;
}

export interface GetAllShippingZonesRequest {
    accept: string;
    contentType: string;
}

export interface UpdateAShippingZoneRequest {
    id: number;
    accept: string;
    contentType: string;
    body: ShippingZone2;
}

/**
 * 
 */
export class ShippingZonesApi extends runtime.BaseAPI {

    /**
     * Creates a *Shipping Zone*.  **Required Fields** * name
     * Create a Shipping Zone
     */
    async createAShippingZonesRaw(requestParameters: CreateAShippingZonesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ShippingZone1>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling createAShippingZones.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling createAShippingZones.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createAShippingZones.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/shipping/zones`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingZone1ToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingZone1FromJSON(jsonValue));
    }

    /**
     * Creates a *Shipping Zone*.  **Required Fields** * name
     * Create a Shipping Zone
     */
    async createAShippingZones(requestParameters: CreateAShippingZonesRequest, initOverrides?: RequestInit): Promise<ShippingZone1> {
        const response = await this.createAShippingZonesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a *Shipping Zone*.
     * Delete a Shipping Zone
     */
    async deleteAShippingZoneRaw(requestParameters: DeleteAShippingZoneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAShippingZone.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteAShippingZone.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteAShippingZone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/shipping/zones/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a *Shipping Zone*.
     * Delete a Shipping Zone
     */
    async deleteAShippingZone(requestParameters: DeleteAShippingZoneRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAShippingZoneRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a single *Shipping Zone*.
     * Get a Shipping Zones
     */
    async getAShippingZoneRaw(requestParameters: GetAShippingZoneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ShippingZone1>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAShippingZone.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getAShippingZone.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getAShippingZone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/shipping/zones/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingZone1FromJSON(jsonValue));
    }

    /**
     * Returns a single *Shipping Zone*.
     * Get a Shipping Zones
     */
    async getAShippingZone(requestParameters: GetAShippingZoneRequest, initOverrides?: RequestInit): Promise<ShippingZone1> {
        const response = await this.getAShippingZoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all *Shipping Zones*.
     * Get All Shipping Zones
     */
    async getAllShippingZonesRaw(requestParameters: GetAllShippingZonesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ShippingZone>>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getAllShippingZones.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getAllShippingZones.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/shipping/zones`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShippingZoneFromJSON));
    }

    /**
     * Returns a list of all *Shipping Zones*.
     * Get All Shipping Zones
     */
    async getAllShippingZones(requestParameters: GetAllShippingZonesRequest, initOverrides?: RequestInit): Promise<Array<ShippingZone>> {
        const response = await this.getAllShippingZonesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a *Shipping Zone*.  **Required Fields** * name  **Read Only Fields** * id
     * Update a Shipping Zone
     */
    async updateAShippingZoneRaw(requestParameters: UpdateAShippingZoneRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ShippingZone2>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAShippingZone.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling updateAShippingZone.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling updateAShippingZone.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateAShippingZone.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/shipping/zones/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingZone2ToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingZone2FromJSON(jsonValue));
    }

    /**
     * Updates a *Shipping Zone*.  **Required Fields** * name  **Read Only Fields** * id
     * Update a Shipping Zone
     */
    async updateAShippingZone(requestParameters: UpdateAShippingZoneRequest, initOverrides?: RequestInit): Promise<ShippingZone2> {
        const response = await this.updateAShippingZoneRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

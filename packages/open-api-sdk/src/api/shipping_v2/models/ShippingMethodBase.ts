/* tslint:disable */
/* eslint-disable */
/**
 * Shipping V2
 * Manage shipping zones, shipping methods, and shipping carrier connections.  ### Shipping Zones The Shipping Zone object and endpoints manage shipping zones within countries.  ### Shipping Methods The Shipping Methods object and endpoints manage shipping rules within Shipping Zones. These rules determine the shipping rates displayed at checkout, and related parts of the control panel, such as the shipping of manual orders.  ### Shipping Carrier Connections Carrier connections refer to specific settings required to connect to a specific shipping carrier. Each carrier requires your app to supply a unique set of properties/fields to establish a connection with that carrier.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ShippingMethodBaseSettings,
    ShippingMethodBaseSettingsFromJSON,
    ShippingMethodBaseSettingsFromJSONTyped,
    ShippingMethodBaseSettingsToJSON,
} from './';

/**
 * 
 * @export
 * @interface ShippingMethodBase
 */
export interface ShippingMethodBase {
    /**
     * Display name for shipping method.
     * @type {string}
     * @memberof ShippingMethodBase
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingMethodBase
     */
    type?: ShippingMethodBaseTypeEnum;
    /**
     * 
     * @type {ShippingMethodBaseSettings}
     * @memberof ShippingMethodBase
     */
    settings?: ShippingMethodBaseSettings;
    /**
     * Whether or not this shipping-zone method is enabled.
     * @type {boolean}
     * @memberof ShippingMethodBase
     */
    enabled?: boolean;
    /**
     * `fixed_surcharge`: flat-rate handling fee applied to shipping cost.
     * 
     * `percentage_surcharge`: percentage handling fee applied to shipping cost
     * @type {object}
     * @memberof ShippingMethodBase
     */
    handlingFees?: object;
    /**
     * Whether or not this shipping zone is the fallback if all others are not valid for the order.
     * @type {boolean}
     * @memberof ShippingMethodBase
     */
    isFallback?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum ShippingMethodBaseTypeEnum {
    Perorder = 'perorder',
    Peritem = 'peritem',
    Weight = 'weight',
    Total = 'total',
    Auspost = 'auspost',
    Canadapost = 'canadapost',
    Endicia = 'endicia',
    Usps = 'usps',
    Fedex = 'fedex',
    Royalmail = 'royalmail',
    Upsready = 'upsready'
}

export function ShippingMethodBaseFromJSON(json: any): ShippingMethodBase {
    return ShippingMethodBaseFromJSONTyped(json, false);
}

export function ShippingMethodBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShippingMethodBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'settings': !exists(json, 'settings') ? undefined : ShippingMethodBaseSettingsFromJSON(json['settings']),
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'handlingFees': !exists(json, 'handling_fees') ? undefined : json['handling_fees'],
        'isFallback': !exists(json, 'is_fallback') ? undefined : json['is_fallback'],
    };
}

export function ShippingMethodBaseToJSON(value?: ShippingMethodBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': value.type,
        'settings': ShippingMethodBaseSettingsToJSON(value.settings),
        'enabled': value.enabled,
        'handling_fees': value.handlingFees,
        'is_fallback': value.isFallback,
    };
}



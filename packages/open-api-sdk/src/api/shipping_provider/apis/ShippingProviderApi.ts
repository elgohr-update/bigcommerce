/* tslint:disable */
/* eslint-disable */
/**
 * Shipping Providers
 * Implement endpoints consumed by BigCommerce for custom shipping integrations. To learn more, see [Shipping Provider API Overview](/api-docs/store-management/shipping/shipping-provider-api).  <div class=\"otp\" id=\"no-index\">  ### On this Page - [Authentication](#authentication) - [Subresources](#subresources) - [Additional Information](#additional-information)  </div>  ## Authentication This specification file describes API requests BigCommerce will make to a registered shipping carrier\'s server to check connection options and retrieve rates. As such, the method of authentication is determined by the carrier\'s server.  ## Subresources  ### Check Connection Options The Check Connection Options request is made by BigCommerce when checking for available shipping options. Each Shipping Provider will have different configurations for the payload.  ### Rate The Rate request is made by BigCommerce to get shipping quotes from the provider.  ## Additional Information  **Webhooks** - [Shipment](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events#shipment)  **Related API Resources** - [Shipping Provider](/api-reference/store-management/shipping-provider-api) - [Shipping Zones](/api-reference/store-management/shipping-api/shipping-zones) - [Shipping Methods](/api-reference/store-management/shipping-api/shipping-method) - [Shipping Carriers](/api-reference/store-management/shipping-api/shipping-carrier)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CheckConnectionOptionsRequestPayload,
    CheckConnectionOptionsRequestPayloadFromJSON,
    CheckConnectionOptionsRequestPayloadToJSON,
    CheckConnectionOptionsResponsePayload,
    CheckConnectionOptionsResponsePayloadFromJSON,
    CheckConnectionOptionsResponsePayloadToJSON,
    RateRequestPayload,
    RateRequestPayloadFromJSON,
    RateRequestPayloadToJSON,
    RateResponsePayload,
    RateResponsePayloadFromJSON,
    RateResponsePayloadToJSON,
} from '../models';

export interface RequestShippingRatesRequest {
    body: RateRequestPayload;
}

export interface ValidateConnectionOptionsRequest {
    body: CheckConnectionOptionsRequestPayload;
}

/**
 * 
 */
export class ShippingProviderApi extends runtime.BaseAPI {

    /**
     * Request shipping rates.
     * Request shipping rates
     */
    async requestShippingRatesRaw(requestParameters: RequestShippingRatesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<RateResponsePayload>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling requestShippingRates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RateRequestPayloadToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RateResponsePayloadFromJSON(jsonValue));
    }

    /**
     * Request shipping rates.
     * Request shipping rates
     */
    async requestShippingRates(requestParameters: RequestShippingRatesRequest, initOverrides?: RequestInit): Promise<RateResponsePayload> {
        const response = await this.requestShippingRatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Validate connection options.
     * Validate connection options
     */
    async validateConnectionOptionsRaw(requestParameters: ValidateConnectionOptionsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckConnectionOptionsResponsePayload>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling validateConnectionOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/check_connection_options`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CheckConnectionOptionsRequestPayloadToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckConnectionOptionsResponsePayloadFromJSON(jsonValue));
    }

    /**
     * Validate connection options.
     * Validate connection options
     */
    async validateConnectionOptions(requestParameters: ValidateConnectionOptionsRequest, initOverrides?: RequestInit): Promise<CheckConnectionOptionsResponsePayload> {
        const response = await this.validateConnectionOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

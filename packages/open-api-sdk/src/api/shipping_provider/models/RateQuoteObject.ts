/* tslint:disable */
/* eslint-disable */
/**
 * Shipping Providers
 * Implement endpoints consumed by BigCommerce for custom shipping integrations. To learn more, see [Shipping Provider API Overview](/api-docs/store-management/shipping/shipping-provider-api).  <div class=\"otp\" id=\"no-index\">  ### On this Page - [Authentication](#authentication) - [Subresources](#subresources) - [Additional Information](#additional-information)  </div>  ## Authentication This specification file describes API requests BigCommerce will make to a registered shipping carrier\'s server to check connection options and retrieve rates. As such, the method of authentication is determined by the carrier\'s server.  ## Subresources  ### Check Connection Options The Check Connection Options request is made by BigCommerce when checking for available shipping options. Each Shipping Provider will have different configurations for the payload.  ### Rate The Rate request is made by BigCommerce to get shipping quotes from the provider.  ## Additional Information  **Webhooks** - [Shipment](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events#shipment)  **Related API Resources** - [Shipping Provider](/api-reference/store-management/shipping-provider-api) - [Shipping Zones](/api-reference/store-management/shipping-api/shipping-zones) - [Shipping Methods](/api-reference/store-management/shipping-api/shipping-method) - [Shipping Carriers](/api-reference/store-management/shipping-api/shipping-carrier)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Message1,
    Message1FromJSON,
    Message1FromJSONTyped,
    Message1ToJSON,
    MoneyValue,
    MoneyValueFromJSON,
    MoneyValueFromJSONTyped,
    MoneyValueToJSON,
    TransitTimeObject,
    TransitTimeObjectFromJSON,
    TransitTimeObjectFromJSONTyped,
    TransitTimeObjectToJSON,
} from './';

/**
 * A quote being returned as part of the rate request.
 * @export
 * @interface RateQuoteObject
 */
export interface RateQuoteObject {
    /**
     * A code describing the service
     * @type {string}
     * @memberof RateQuoteObject
     */
    code: string;
    /**
     * A display name for the service
     * @type {string}
     * @memberof RateQuoteObject
     */
    displayName: string;
    /**
     * 
     * @type {MoneyValue}
     * @memberof RateQuoteObject
     */
    cost: MoneyValue;
    /**
     * 
     * @type {Array<Message1>}
     * @memberof RateQuoteObject
     */
    messages?: Array<Message1>;
    /**
     * 
     * @type {string}
     * @memberof RateQuoteObject
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof RateQuoteObject
     */
    rateId?: string;
    /**
     * 
     * @type {MoneyValue}
     * @memberof RateQuoteObject
     */
    discountedCost?: MoneyValue;
    /**
     * 
     * @type {Date}
     * @memberof RateQuoteObject
     */
    dispatchDate?: Date;
    /**
     * 
     * @type {TransitTimeObject}
     * @memberof RateQuoteObject
     */
    transitTime?: TransitTimeObject;
}

export function RateQuoteObjectFromJSON(json: any): RateQuoteObject {
    return RateQuoteObjectFromJSONTyped(json, false);
}

export function RateQuoteObjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateQuoteObject {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': json['code'],
        'displayName': json['display_name'],
        'cost': MoneyValueFromJSON(json['cost']),
        'messages': !exists(json, 'messages') ? undefined : ((json['messages'] as Array<any>).map(Message1FromJSON)),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'rateId': !exists(json, 'rate_id') ? undefined : json['rate_id'],
        'discountedCost': !exists(json, 'discounted_cost') ? undefined : MoneyValueFromJSON(json['discounted_cost']),
        'dispatchDate': !exists(json, 'dispatch_date') ? undefined : (new Date(json['dispatch_date'])),
        'transitTime': !exists(json, 'transit_time') ? undefined : TransitTimeObjectFromJSON(json['transit_time']),
    };
}

export function RateQuoteObjectToJSON(value?: RateQuoteObject | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'display_name': value.displayName,
        'cost': MoneyValueToJSON(value.cost),
        'messages': value.messages === undefined ? undefined : ((value.messages as Array<any>).map(Message1ToJSON)),
        'description': value.description,
        'rate_id': value.rateId,
        'discounted_cost': MoneyValueToJSON(value.discountedCost),
        'dispatch_date': value.dispatchDate === undefined ? undefined : (value.dispatchDate.toISOString().substr(0,10)),
        'transit_time': TransitTimeObjectToJSON(value.transitTime),
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Shipping Providers
 * Implement endpoints consumed by BigCommerce for custom shipping integrations. To learn more, see [Shipping Provider API Overview](/api-docs/store-management/shipping/shipping-provider-api).  <div class=\"otp\" id=\"no-index\">  ### On this Page - [Authentication](#authentication) - [Subresources](#subresources) - [Additional Information](#additional-information)  </div>  ## Authentication This specification file describes API requests BigCommerce will make to a registered shipping carrier\'s server to check connection options and retrieve rates. As such, the method of authentication is determined by the carrier\'s server.  ## Subresources  ### Check Connection Options The Check Connection Options request is made by BigCommerce when checking for available shipping options. Each Shipping Provider will have different configurations for the payload.  ### Rate The Rate request is made by BigCommerce to get shipping quotes from the provider.  ## Additional Information  **Webhooks** - [Shipment](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events#shipment)  **Related API Resources** - [Shipping Provider](/api-reference/store-management/shipping-provider-api) - [Shipping Zones](/api-reference/store-management/shipping-api/shipping-zones) - [Shipping Methods](/api-reference/store-management/shipping-api/shipping-method) - [Shipping Carriers](/api-reference/store-management/shipping-api/shipping-carrier)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AttributeValue,
    AttributeValueFromJSON,
    AttributeValueFromJSONTyped,
    AttributeValueToJSON,
    DimensionValue,
    DimensionValueFromJSON,
    DimensionValueFromJSONTyped,
    DimensionValueToJSON,
    MoneyValue,
    MoneyValueFromJSON,
    MoneyValueFromJSONTyped,
    MoneyValueToJSON,
    WeightValue,
    WeightValueFromJSON,
    WeightValueFromJSONTyped,
    WeightValueToJSON,
} from './';

/**
 * A cart item along with it's shipping specific attributes
 * @export
 * @interface RateRequestItem
 */
export interface RateRequestItem {
    /**
     * The variant SKU
     * @type {string}
     * @memberof RateRequestItem
     */
    sku?: string;
    /**
     * 
     * @type {string}
     * @memberof RateRequestItem
     */
    variantId?: string;
    /**
     * 
     * @type {string}
     * @memberof RateRequestItem
     */
    productId?: string;
    /**
     * 
     * @type {string}
     * @memberof RateRequestItem
     */
    name?: string;
    /**
     * 
     * @type {DimensionValue}
     * @memberof RateRequestItem
     */
    length?: DimensionValue;
    /**
     * 
     * @type {DimensionValue}
     * @memberof RateRequestItem
     */
    width?: DimensionValue;
    /**
     * 
     * @type {DimensionValue}
     * @memberof RateRequestItem
     */
    height?: DimensionValue;
    /**
     * 
     * @type {WeightValue}
     * @memberof RateRequestItem
     */
    weight?: WeightValue;
    /**
     * 
     * @type {MoneyValue}
     * @memberof RateRequestItem
     */
    discountedPrice?: MoneyValue;
    /**
     * 
     * @type {MoneyValue}
     * @memberof RateRequestItem
     */
    declaredValue?: MoneyValue;
    /**
     * 
     * @type {number}
     * @memberof RateRequestItem
     */
    quantity?: number;
    /**
     * A list of arbitrary properties stored as part of the product or product variant meta fields. These consist of public fields specific to the carrier integration.
     * @type {Array<AttributeValue>}
     * @memberof RateRequestItem
     */
    attributes?: Array<AttributeValue>;
}

export function RateRequestItemFromJSON(json: any): RateRequestItem {
    return RateRequestItemFromJSONTyped(json, false);
}

export function RateRequestItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): RateRequestItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sku': !exists(json, 'sku') ? undefined : json['sku'],
        'variantId': !exists(json, 'variant_id') ? undefined : json['variant_id'],
        'productId': !exists(json, 'product_id') ? undefined : json['product_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'length': !exists(json, 'length') ? undefined : DimensionValueFromJSON(json['length']),
        'width': !exists(json, 'width') ? undefined : DimensionValueFromJSON(json['width']),
        'height': !exists(json, 'height') ? undefined : DimensionValueFromJSON(json['height']),
        'weight': !exists(json, 'weight') ? undefined : WeightValueFromJSON(json['weight']),
        'discountedPrice': !exists(json, 'discounted_price') ? undefined : MoneyValueFromJSON(json['discounted_price']),
        'declaredValue': !exists(json, 'declared_value') ? undefined : MoneyValueFromJSON(json['declared_value']),
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'attributes': !exists(json, 'attributes') ? undefined : ((json['attributes'] as Array<any>).map(AttributeValueFromJSON)),
    };
}

export function RateRequestItemToJSON(value?: RateRequestItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sku': value.sku,
        'variant_id': value.variantId,
        'product_id': value.productId,
        'name': value.name,
        'length': DimensionValueToJSON(value.length),
        'width': DimensionValueToJSON(value.width),
        'height': DimensionValueToJSON(value.height),
        'weight': WeightValueToJSON(value.weight),
        'discounted_price': MoneyValueToJSON(value.discountedPrice),
        'declared_value': MoneyValueToJSON(value.declaredValue),
        'quantity': value.quantity,
        'attributes': value.attributes === undefined ? undefined : ((value.attributes as Array<any>).map(AttributeValueToJSON)),
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Shipping Providers
 * Implement endpoints consumed by BigCommerce for custom shipping integrations. To learn more, see [Shipping Provider API Overview](/api-docs/store-management/shipping/shipping-provider-api).  <div class=\"otp\" id=\"no-index\">  ### On this Page - [Authentication](#authentication) - [Subresources](#subresources) - [Additional Information](#additional-information)  </div>  ## Authentication This specification file describes API requests BigCommerce will make to a registered shipping carrier\'s server to check connection options and retrieve rates. As such, the method of authentication is determined by the carrier\'s server.  ## Subresources  ### Check Connection Options The Check Connection Options request is made by BigCommerce when checking for available shipping options. Each Shipping Provider will have different configurations for the payload.  ### Rate The Rate request is made by BigCommerce to get shipping quotes from the provider.  ## Additional Information  **Webhooks** - [Shipment](https://developer.bigcommerce.com/api-docs/getting-started/webhooks/webhook-events#shipment)  **Related API Resources** - [Shipping Provider](/api-reference/store-management/shipping-provider-api) - [Shipping Zones](/api-reference/store-management/shipping-api/shipping-zones) - [Shipping Methods](/api-reference/store-management/shipping-api/shipping-method) - [Shipping Carriers](/api-reference/store-management/shipping-api/shipping-carrier)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CustomerDetails,
    CustomerDetailsFromJSON,
    CustomerDetailsFromJSONTyped,
    CustomerDetailsToJSON,
    ModelRequestContext,
    ModelRequestContextFromJSON,
    ModelRequestContextFromJSONTyped,
    ModelRequestContextToJSON,
    RateRequestItem,
    RateRequestItemFromJSON,
    RateRequestItemFromJSONTyped,
    RateRequestItemToJSON,
    ShippingAddress,
    ShippingAddressFromJSON,
    ShippingAddressFromJSONTyped,
    ShippingAddressToJSON,
} from './';

/**
 * The minimum required payload that is sent to retrieve rates
 * @export
 * @interface BaseOptions
 */
export interface BaseOptions {
    /**
     * 
     * @type {ShippingAddress}
     * @memberof BaseOptions
     */
    origin: ShippingAddress;
    /**
     * 
     * @type {ShippingAddress}
     * @memberof BaseOptions
     */
    destination: ShippingAddress;
    /**
     * 
     * @type {Array<RateRequestItem>}
     * @memberof BaseOptions
     */
    items: Array<RateRequestItem>;
    /**
     * 
     * @type {CustomerDetails}
     * @memberof BaseOptions
     */
    customer?: CustomerDetails;
    /**
     * 
     * @type {string}
     * @memberof BaseOptions
     */
    cartId?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseOptions
     */
    storeId: string;
    /**
     * 
     * @type {ModelRequestContext}
     * @memberof BaseOptions
     */
    requestContext?: ModelRequestContext;
}

export function BaseOptionsFromJSON(json: any): BaseOptions {
    return BaseOptionsFromJSONTyped(json, false);
}

export function BaseOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BaseOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'origin': ShippingAddressFromJSON(json['origin']),
        'destination': ShippingAddressFromJSON(json['destination']),
        'items': ((json['items'] as Array<any>).map(RateRequestItemFromJSON)),
        'customer': !exists(json, 'customer') ? undefined : CustomerDetailsFromJSON(json['customer']),
        'cartId': !exists(json, 'cart_id') ? undefined : json['cart_id'],
        'storeId': json['store_id'],
        'requestContext': !exists(json, 'request_context') ? undefined : ModelRequestContextFromJSON(json['request_context']),
    };
}

export function BaseOptionsToJSON(value?: BaseOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'origin': ShippingAddressToJSON(value.origin),
        'destination': ShippingAddressToJSON(value.destination),
        'items': ((value.items as Array<any>).map(RateRequestItemToJSON)),
        'customer': CustomerDetailsToJSON(value.customer),
        'cart_id': value.cartId,
        'store_id': value.storeId,
        'request_context': ModelRequestContextToJSON(value.requestContext),
    };
}



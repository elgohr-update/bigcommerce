/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Checkouts
 * Manage checkout operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AppliedCoupon,
    AppliedCouponFromJSON,
    AppliedCouponFromJSONTyped,
    AppliedCouponToJSON,
    AppliedDiscount,
    AppliedDiscountFromJSON,
    AppliedDiscountFromJSONTyped,
    AppliedDiscountToJSON,
    Currency,
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    LineItem,
    LineItemFromJSON,
    LineItemFromJSONTyped,
    LineItemToJSON,
} from './';

/**
 * A cart contains a collection of items, prices, discounts, etc. It does not contain customer-related data.
 * @export
 * @interface Cart
 */
export interface Cart {
    /**
     * Cart ID, provided after creating a cart with a POST.
     * @type {string}
     * @memberof Cart
     */
    id?: string;
    /**
     * ID of the customer to which the cart belongs.
     * @type {number}
     * @memberof Cart
     */
    customerId?: number;
    /**
     * The cart's email. This is the same email that is used in the billing address
     * @type {string}
     * @memberof Cart
     */
    email?: string;
    /**
     * 
     * @type {Currency}
     * @memberof Cart
     */
    currency?: Currency;
    /**
     * Boolean representing whether tax information is included.
     * @type {boolean}
     * @memberof Cart
     */
    istaxIncluded?: boolean;
    /**
     * Cost of cart's contents, before applying discounts.
     * @type {number}
     * @memberof Cart
     */
    baseAmount?: number;
    /**
     * Discounted amount.
     * @type {number}
     * @memberof Cart
     */
    discountAmount?: number;
    /**
     * Sum of line-items amounts, minus cart-level discounts and coupons. This amount includes taxes (where applicable).
     * @type {number}
     * @memberof Cart
     */
    cartAmount?: number;
    /**
     * 
     * @type {Array<AppliedCoupon>}
     * @memberof Cart
     */
    coupons?: Array<AppliedCoupon>;
    /**
     * 
     * @type {Array<AppliedDiscount>}
     * @memberof Cart
     */
    discounts?: Array<AppliedDiscount>;
    /**
     * 
     * @type {Array<LineItem>}
     * @memberof Cart
     */
    lineItems?: Array<LineItem>;
    /**
     * Time when the cart was created.
     * @type {string}
     * @memberof Cart
     */
    createdTime?: string;
    /**
     * Time when the cart was last updated.
     * @type {string}
     * @memberof Cart
     */
    updatedTime?: string;
}

export function CartFromJSON(json: any): Cart {
    return CartFromJSONTyped(json, false);
}

export function CartFromJSONTyped(json: any, ignoreDiscriminator: boolean): Cart {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'customerId': !exists(json, 'customer_id') ? undefined : json['customer_id'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'currency': !exists(json, 'currency') ? undefined : CurrencyFromJSON(json['currency']),
        'istaxIncluded': !exists(json, 'istaxIncluded') ? undefined : json['istaxIncluded'],
        'baseAmount': !exists(json, 'baseAmount') ? undefined : json['baseAmount'],
        'discountAmount': !exists(json, 'discountAmount') ? undefined : json['discountAmount'],
        'cartAmount': !exists(json, 'cartAmount') ? undefined : json['cartAmount'],
        'coupons': !exists(json, 'coupons') ? undefined : ((json['coupons'] as Array<any>).map(AppliedCouponFromJSON)),
        'discounts': !exists(json, 'discounts') ? undefined : ((json['discounts'] as Array<any>).map(AppliedDiscountFromJSON)),
        'lineItems': !exists(json, 'lineItems') ? undefined : ((json['lineItems'] as Array<any>).map(LineItemFromJSON)),
        'createdTime': !exists(json, 'createdTime') ? undefined : json['createdTime'],
        'updatedTime': !exists(json, 'updatedTime') ? undefined : json['updatedTime'],
    };
}

export function CartToJSON(value?: Cart | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'customer_id': value.customerId,
        'email': value.email,
        'currency': CurrencyToJSON(value.currency),
        'istaxIncluded': value.istaxIncluded,
        'baseAmount': value.baseAmount,
        'discountAmount': value.discountAmount,
        'cartAmount': value.cartAmount,
        'coupons': value.coupons === undefined ? undefined : ((value.coupons as Array<any>).map(AppliedCouponToJSON)),
        'discounts': value.discounts === undefined ? undefined : ((value.discounts as Array<any>).map(AppliedDiscountToJSON)),
        'lineItems': value.lineItems === undefined ? undefined : ((value.lineItems as Array<any>).map(LineItemToJSON)),
        'createdTime': value.createdTime,
        'updatedTime': value.updatedTime,
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Checkouts
 * Manage checkout operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The values presented here are projections of how much we would be using out of an existent gift certificate
 * @export
 * @interface GiftCertificate
 */
export interface GiftCertificate {
    /**
     * 
     * @type {number}
     * @memberof GiftCertificate
     */
    balance?: number;
    /**
     * 
     * @type {string}
     * @memberof GiftCertificate
     */
    code?: string;
    /**
     * 
     * @type {Date}
     * @memberof GiftCertificate
     */
    purchaseDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof GiftCertificate
     */
    remaining?: number;
    /**
     * 
     * @type {number}
     * @memberof GiftCertificate
     */
    used?: number;
}

export function GiftCertificateFromJSON(json: any): GiftCertificate {
    return GiftCertificateFromJSONTyped(json, false);
}

export function GiftCertificateFromJSONTyped(json: any, ignoreDiscriminator: boolean): GiftCertificate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'balance': !exists(json, 'balance') ? undefined : json['balance'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'purchaseDate': !exists(json, 'purchaseDate') ? undefined : (new Date(json['purchaseDate'])),
        'remaining': !exists(json, 'remaining') ? undefined : json['remaining'],
        'used': !exists(json, 'used') ? undefined : json['used'],
    };
}

export function GiftCertificateToJSON(value?: GiftCertificate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'balance': value.balance,
        'code': value.code,
        'purchaseDate': value.purchaseDate === undefined ? undefined : (value.purchaseDate.toISOString().substr(0,10)),
        'remaining': value.remaining,
        'used': value.used,
    };
}



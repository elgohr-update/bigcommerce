/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Checkouts
 * Manage checkout operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ContactEntity,
    ContactEntityFromJSON,
    ContactEntityFromJSONTyped,
    ContactEntityToJSON,
} from './';

/**
 * 
 * @export
 * @interface ItemGiftCertificate
 */
export interface ItemGiftCertificate {
    /**
     * Gift certificate identifier
     * @type {string}
     * @memberof ItemGiftCertificate
     */
    id?: string;
    /**
     * Name of the purchased gift certificate e.g. $20 Gift Certificate
     * @type {string}
     * @memberof ItemGiftCertificate
     */
    name?: string;
    /**
     * Currently supports `Birthday`, `Boy`, `Celebration`, `Christmas`, `General`, and `Girl`.
     * @type {string}
     * @memberof ItemGiftCertificate
     */
    theme: string;
    /**
     * Value must be between $1.00 and $1,000.00.
     * @type {number}
     * @memberof ItemGiftCertificate
     */
    amount: number;
    /**
     * 
     * @type {boolean}
     * @memberof ItemGiftCertificate
     */
    taxable?: boolean;
    /**
     * 
     * @type {ContactEntity}
     * @memberof ItemGiftCertificate
     */
    sender: ContactEntity;
    /**
     * 
     * @type {ContactEntity}
     * @memberof ItemGiftCertificate
     */
    recipient: ContactEntity;
    /**
     * Limited to 200 characters.
     * @type {string}
     * @memberof ItemGiftCertificate
     */
    message?: string;
    /**
     * Explicitly specifying the gift certificate type
     * @type {string}
     * @memberof ItemGiftCertificate
     */
    type?: string;
}

export function ItemGiftCertificateFromJSON(json: any): ItemGiftCertificate {
    return ItemGiftCertificateFromJSONTyped(json, false);
}

export function ItemGiftCertificateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemGiftCertificate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'theme': json['theme'],
        'amount': json['amount'],
        'taxable': !exists(json, 'taxable') ? undefined : json['taxable'],
        'sender': ContactEntityFromJSON(json['sender']),
        'recipient': ContactEntityFromJSON(json['recipient']),
        'message': !exists(json, 'message') ? undefined : json['message'],
        'type': !exists(json, 'type') ? undefined : json['type'],
    };
}

export function ItemGiftCertificateToJSON(value?: ItemGiftCertificate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'theme': value.theme,
        'amount': value.amount,
        'taxable': value.taxable,
        'sender': ContactEntityToJSON(value.sender),
        'recipient': ContactEntityToJSON(value.recipient),
        'message': value.message,
        'type': value.type,
    };
}



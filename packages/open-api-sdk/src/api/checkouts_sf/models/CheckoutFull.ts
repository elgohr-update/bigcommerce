/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Checkouts
 * Manage checkout operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressBase,
    AddressBaseFromJSON,
    AddressBaseFromJSONTyped,
    AddressBaseToJSON,
    AppliedCoupon,
    AppliedCouponFromJSON,
    AppliedCouponFromJSONTyped,
    AppliedCouponToJSON,
    CheckoutCart,
    CheckoutCartFromJSON,
    CheckoutCartFromJSONTyped,
    CheckoutCartToJSON,
    CheckoutTax,
    CheckoutTaxFromJSON,
    CheckoutTaxFromJSONTyped,
    CheckoutTaxToJSON,
    ConsignmentFull,
    ConsignmentFullFromJSON,
    ConsignmentFullFromJSONTyped,
    ConsignmentFullToJSON,
} from './';

/**
 * 
 * @export
 * @interface CheckoutFull
 */
export interface CheckoutFull {
    /**
     * 
     * @type {string}
     * @memberof CheckoutFull
     */
    id?: string;
    /**
     * 
     * @type {CheckoutCart}
     * @memberof CheckoutFull
     */
    cart?: CheckoutCart;
    /**
     * 
     * @type {AddressBase}
     * @memberof CheckoutFull
     */
    billingAddress?: AddressBase;
    /**
     * 
     * @type {Array<ConsignmentFull>}
     * @memberof CheckoutFull
     */
    consignments?: Array<ConsignmentFull>;
    /**
     * Coupons applied at checkout level.
     * @type {Array<AppliedCoupon>}
     * @memberof CheckoutFull
     */
    coupons?: Array<AppliedCoupon>;
    /**
     * ""
     * @type {string}
     * @memberof CheckoutFull
     */
    orderId?: string;
    /**
     * Shipping cost before any discounts are applied.
     * @type {number}
     * @memberof CheckoutFull
     */
    shippingCostTotal?: number;
    /**
     * Gift wrapping cost for all items, including or excluding tax.
     * @type {number}
     * @memberof CheckoutFull
     */
    giftWrappingCostTotal?: number;
    /**
     * Handling cost for all consignments including or excluding tax.
     * @type {number}
     * @memberof CheckoutFull
     */
    handlingCostTotal?: number;
    /**
     * 
     * @type {number}
     * @memberof CheckoutFull
     */
    taxTotal?: number;
    /**
     * 
     * @type {Array<CheckoutTax>}
     * @memberof CheckoutFull
     */
    taxes?: Array<CheckoutTax>;
    /**
     * Subtotal of the checkout before applying item level discounts. Tax inclusive based on the store settings.
     * @type {number}
     * @memberof CheckoutFull
     */
    subtotal?: number;
    /**
     * The total payable amount, before applying any store credit or gift certificate.
     * @type {number}
     * @memberof CheckoutFull
     */
    grandTotal?: number;
    /**
     * Applied gift certificate (as a payment method).
     * @type {Array<Array<object>>}
     * @memberof CheckoutFull
     */
    giftCertificates?: Array<Array<object>>;
    /**
     * Time when the cart was created.
     * @type {string}
     * @memberof CheckoutFull
     */
    createdTime?: string;
    /**
     * Time when the cart was last updated.
     * @type {string}
     * @memberof CheckoutFull
     */
    updatedTime?: string;
    /**
     * Shopper's message provided as details for the order to be created from this cart
     * @type {string}
     * @memberof CheckoutFull
     */
    customerMessage?: string;
    /**
     * `grandTotal` subtract the store-credit amount
     * @type {number}
     * @memberof CheckoutFull
     */
    outstandingBalance?: number;
    /**
     * `true` value indicates StoreCredit has been applied.
     * @type {boolean}
     * @memberof CheckoutFull
     */
    isStoreCreditApplied?: boolean;
}

export function CheckoutFullFromJSON(json: any): CheckoutFull {
    return CheckoutFullFromJSONTyped(json, false);
}

export function CheckoutFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): CheckoutFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'cart': !exists(json, 'cart') ? undefined : CheckoutCartFromJSON(json['cart']),
        'billingAddress': !exists(json, 'billingAddress') ? undefined : AddressBaseFromJSON(json['billingAddress']),
        'consignments': !exists(json, 'consignments') ? undefined : ((json['consignments'] as Array<any>).map(ConsignmentFullFromJSON)),
        'coupons': !exists(json, 'coupons') ? undefined : ((json['coupons'] as Array<any>).map(AppliedCouponFromJSON)),
        'orderId': !exists(json, 'orderId') ? undefined : json['orderId'],
        'shippingCostTotal': !exists(json, 'shippingCostTotal') ? undefined : json['shippingCostTotal'],
        'giftWrappingCostTotal': !exists(json, 'giftWrappingCostTotal') ? undefined : json['giftWrappingCostTotal'],
        'handlingCostTotal': !exists(json, 'handlingCostTotal') ? undefined : json['handlingCostTotal'],
        'taxTotal': !exists(json, 'taxTotal') ? undefined : json['taxTotal'],
        'taxes': !exists(json, 'taxes') ? undefined : ((json['taxes'] as Array<any>).map(CheckoutTaxFromJSON)),
        'subtotal': !exists(json, 'subtotal') ? undefined : json['subtotal'],
        'grandTotal': !exists(json, 'grandTotal') ? undefined : json['grandTotal'],
        'giftCertificates': !exists(json, 'giftCertificates') ? undefined : json['giftCertificates'],
        'createdTime': !exists(json, 'createdTime') ? undefined : json['createdTime'],
        'updatedTime': !exists(json, 'updatedTime') ? undefined : json['updatedTime'],
        'customerMessage': !exists(json, 'customerMessage') ? undefined : json['customerMessage'],
        'outstandingBalance': !exists(json, 'outstandingBalance') ? undefined : json['outstandingBalance'],
        'isStoreCreditApplied': !exists(json, 'isStoreCreditApplied') ? undefined : json['isStoreCreditApplied'],
    };
}

export function CheckoutFullToJSON(value?: CheckoutFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'cart': CheckoutCartToJSON(value.cart),
        'billingAddress': AddressBaseToJSON(value.billingAddress),
        'consignments': value.consignments === undefined ? undefined : ((value.consignments as Array<any>).map(ConsignmentFullToJSON)),
        'coupons': value.coupons === undefined ? undefined : ((value.coupons as Array<any>).map(AppliedCouponToJSON)),
        'orderId': value.orderId,
        'shippingCostTotal': value.shippingCostTotal,
        'giftWrappingCostTotal': value.giftWrappingCostTotal,
        'handlingCostTotal': value.handlingCostTotal,
        'taxTotal': value.taxTotal,
        'taxes': value.taxes === undefined ? undefined : ((value.taxes as Array<any>).map(CheckoutTaxToJSON)),
        'subtotal': value.subtotal,
        'grandTotal': value.grandTotal,
        'giftCertificates': value.giftCertificates,
        'createdTime': value.createdTime,
        'updatedTime': value.updatedTime,
        'customerMessage': value.customerMessage,
        'outstandingBalance': value.outstandingBalance,
        'isStoreCreditApplied': value.isStoreCreditApplied,
    };
}



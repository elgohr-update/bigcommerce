/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Checkouts
 * Manage checkout operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AppliedCoupon,
    AppliedCouponFromJSON,
    AppliedCouponFromJSONTyped,
    AppliedCouponToJSON,
    Cart,
    CartFromJSON,
    CartFromJSONTyped,
    CartToJSON,
    CheckoutTaxes,
    CheckoutTaxesFromJSON,
    CheckoutTaxesFromJSONTyped,
    CheckoutTaxesToJSON,
    Consignment,
    ConsignmentFromJSON,
    ConsignmentFromJSONTyped,
    ConsignmentToJSON,
    GiftCertificate,
    GiftCertificateFromJSON,
    GiftCertificateFromJSONTyped,
    GiftCertificateToJSON,
} from './';

/**
 * 
 * @export
 * @interface Checkout
 */
export interface Checkout {
    /**
     * 
     * @type {string}
     * @memberof Checkout
     */
    id?: string;
    /**
     * 
     * @type {Cart}
     * @memberof Checkout
     */
    cart?: Cart;
    /**
     * 
     * @type {object}
     * @memberof Checkout
     */
    billingAddress?: object;
    /**
     * This allows us to have multiple shipping addresses. Where there is only one shipping address, this array will contain only one value, with all the items.
     * @type {Array<Consignment>}
     * @memberof Checkout
     */
    consignments?: Array<Consignment>;
    /**
     * Coupons applied at checkout level.
     * @type {Array<AppliedCoupon>}
     * @memberof Checkout
     */
    coupons?: Array<AppliedCoupon>;
    /**
     * 
     * @type {string}
     * @memberof Checkout
     */
    orderId?: string;
    /**
     * Shipping cost before any discounts are applied.
     * @type {number}
     * @memberof Checkout
     */
    shippingCostTotal?: number;
    /**
     * Gift wrapping for all items, including or excluding tax.
     * @type {number}
     * @memberof Checkout
     */
    giftWrappingCostTotal?: number;
    /**
     * Handling cost for all consignments including or excluding tax.
     * @type {number}
     * @memberof Checkout
     */
    handlingCostTotal?: number;
    /**
     * 
     * @type {number}
     * @memberof Checkout
     */
    taxTotal?: number;
    /**
     * 
     * @type {Array<CheckoutTaxes>}
     * @memberof Checkout
     */
    taxes?: Array<CheckoutTaxes>;
    /**
     * Subtotal of the checkout before applying item level discounts. Tax inclusive based on the store settings.
     * @type {number}
     * @memberof Checkout
     */
    subtotal?: number;
    /**
     * The total payable amount, before applying any store credit or gift certificate.
     * @type {number}
     * @memberof Checkout
     */
    grandTotal?: number;
    /**
     * Applied gift certificate (as a payment method).
     * @type {Array<GiftCertificate>}
     * @memberof Checkout
     */
    giftCertificates?: Array<GiftCertificate>;
    /**
     * Time when the cart was created.
     * @type {string}
     * @memberof Checkout
     */
    createdTime?: string;
    /**
     * Time when the cart was last updated.
     * @type {string}
     * @memberof Checkout
     */
    updatedTime?: string;
    /**
     * Shopper's message provided as details for the order to be created from this cart
     * @type {string}
     * @memberof Checkout
     */
    customerMessage?: string;
    /**
     * `grandTotal` subtract the store-credit amount
     * @type {number}
     * @memberof Checkout
     */
    outstandingBalance?: number;
    /**
     * `true` value indicates StoreCredit has been applied.
     * @type {boolean}
     * @memberof Checkout
     */
    isStoreCreditApplied?: boolean;
}

export function CheckoutFromJSON(json: any): Checkout {
    return CheckoutFromJSONTyped(json, false);
}

export function CheckoutFromJSONTyped(json: any, ignoreDiscriminator: boolean): Checkout {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'cart': !exists(json, 'cart') ? undefined : CartFromJSON(json['cart']),
        'billingAddress': !exists(json, 'billingAddress') ? undefined : json['billingAddress'],
        'consignments': !exists(json, 'consignments') ? undefined : ((json['consignments'] as Array<any>).map(ConsignmentFromJSON)),
        'coupons': !exists(json, 'coupons') ? undefined : ((json['coupons'] as Array<any>).map(AppliedCouponFromJSON)),
        'orderId': !exists(json, 'orderId') ? undefined : json['orderId'],
        'shippingCostTotal': !exists(json, 'shippingCostTotal') ? undefined : json['shippingCostTotal'],
        'giftWrappingCostTotal': !exists(json, 'giftWrappingCostTotal') ? undefined : json['giftWrappingCostTotal'],
        'handlingCostTotal': !exists(json, 'handlingCostTotal') ? undefined : json['handlingCostTotal'],
        'taxTotal': !exists(json, 'taxTotal') ? undefined : json['taxTotal'],
        'taxes': !exists(json, 'taxes') ? undefined : ((json['taxes'] as Array<any>).map(CheckoutTaxesFromJSON)),
        'subtotal': !exists(json, 'subtotal') ? undefined : json['subtotal'],
        'grandTotal': !exists(json, 'grandTotal') ? undefined : json['grandTotal'],
        'giftCertificates': !exists(json, 'giftCertificates') ? undefined : ((json['giftCertificates'] as Array<any>).map(GiftCertificateFromJSON)),
        'createdTime': !exists(json, 'createdTime') ? undefined : json['createdTime'],
        'updatedTime': !exists(json, 'updatedTime') ? undefined : json['updatedTime'],
        'customerMessage': !exists(json, 'customerMessage') ? undefined : json['customerMessage'],
        'outstandingBalance': !exists(json, 'outstandingBalance') ? undefined : json['outstandingBalance'],
        'isStoreCreditApplied': !exists(json, 'isStoreCreditApplied') ? undefined : json['isStoreCreditApplied'],
    };
}

export function CheckoutToJSON(value?: Checkout | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'cart': CartToJSON(value.cart),
        'billingAddress': value.billingAddress,
        'consignments': value.consignments === undefined ? undefined : ((value.consignments as Array<any>).map(ConsignmentToJSON)),
        'coupons': value.coupons === undefined ? undefined : ((value.coupons as Array<any>).map(AppliedCouponToJSON)),
        'orderId': value.orderId,
        'shippingCostTotal': value.shippingCostTotal,
        'giftWrappingCostTotal': value.giftWrappingCostTotal,
        'handlingCostTotal': value.handlingCostTotal,
        'taxTotal': value.taxTotal,
        'taxes': value.taxes === undefined ? undefined : ((value.taxes as Array<any>).map(CheckoutTaxesToJSON)),
        'subtotal': value.subtotal,
        'grandTotal': value.grandTotal,
        'giftCertificates': value.giftCertificates === undefined ? undefined : ((value.giftCertificates as Array<any>).map(GiftCertificateToJSON)),
        'createdTime': value.createdTime,
        'updatedTime': value.updatedTime,
        'customerMessage': value.customerMessage,
        'outstandingBalance': value.outstandingBalance,
        'isStoreCreditApplied': value.isStoreCreditApplied,
    };
}



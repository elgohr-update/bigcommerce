/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Checkouts
 * Manage checkout operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AppliedDiscount,
    AppliedDiscountFromJSON,
    AppliedDiscountFromJSONTyped,
    AppliedDiscountToJSON,
} from './';

/**
 * 
 * @export
 * @interface ItemDigital1
 */
export interface ItemDigital1 {
    /**
     * The line-item ID.
     * @type {string}
     * @memberof ItemDigital1
     */
    id?: string;
    /**
     * Bundled items will have their parent's item Id.
     * @type {string}
     * @memberof ItemDigital1
     */
    parentId?: string;
    /**
     * ID of the variant.
     * @type {number}
     * @memberof ItemDigital1
     */
    variantId?: number;
    /**
     * ID of the product.
     * @type {number}
     * @memberof ItemDigital1
     */
    productId?: number;
    /**
     * SKU of the variant.
     * @type {string}
     * @memberof ItemDigital1
     */
    sku?: string;
    /**
     * The item's product name.
     * @type {string}
     * @memberof ItemDigital1
     */
    name?: string;
    /**
     * The product URL.
     * @type {string}
     * @memberof ItemDigital1
     */
    url?: string;
    /**
     * Quantity of this item.
     * @type {number}
     * @memberof ItemDigital1
     */
    quantity: number;
    /**
     * Whether the item is taxable.
     * @type {boolean}
     * @memberof ItemDigital1
     */
    isTaxable?: boolean;
    /**
     * URL of an image of this item, accessible on the internet.
     * @type {string}
     * @memberof ItemDigital1
     */
    imageUrl?: string;
    /**
     * List of discounts applied to this item, as an array of AppliedDiscount objects.
     * @type {Array<AppliedDiscount>}
     * @memberof ItemDigital1
     */
    discounts?: Array<AppliedDiscount>;
    /**
     * The total value of all discounts applied to this item (excluding coupon).
     * @type {number}
     * @memberof ItemDigital1
     */
    discountAmount?: number;
    /**
     * The total value of all coupons applied to this item.
     * @type {number}
     * @memberof ItemDigital1
     */
    couponAmount?: number;
    /**
     * Item's list price, as quoted by the manufacturer/distributor.
     * @type {number}
     * @memberof ItemDigital1
     */
    listPrice?: number;
    /**
     * Item's price after all discounts are applied. (The final price before tax calculation.)
     * @type {number}
     * @memberof ItemDigital1
     */
    salePrice?: number;
    /**
     * Item's list price multiplied by the quantity.
     * @type {number}
     * @memberof ItemDigital1
     */
    extendedListPrice?: number;
    /**
     * Item's sale price multiplied by the quantity.
     * @type {number}
     * @memberof ItemDigital1
     */
    extendedSalePrice?: number;
    /**
     * the product type - physical or digital
     * @type {string}
     * @memberof ItemDigital1
     */
    type?: string;
    /**
     * Whether this item requires shipping to a physical address.
     * @type {boolean}
     * @memberof ItemDigital1
     */
    isShippingRequired?: boolean;
    /**
     * URLs to download all product files.
     * @type {Array<string>}
     * @memberof ItemDigital1
     */
    downloadFileUrls?: Array<string>;
    /**
     * The URL for the combined downloads page.
     * @type {string}
     * @memberof ItemDigital1
     */
    downloadPageUrl?: string;
    /**
     * Combined download size, in human-readable style. E.g.: `30MB`.
     * @type {string}
     * @memberof ItemDigital1
     */
    downloadSize?: string;
}

export function ItemDigital1FromJSON(json: any): ItemDigital1 {
    return ItemDigital1FromJSONTyped(json, false);
}

export function ItemDigital1FromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemDigital1 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'parentId': !exists(json, 'parentId') ? undefined : json['parentId'],
        'variantId': !exists(json, 'variantId') ? undefined : json['variantId'],
        'productId': !exists(json, 'productId') ? undefined : json['productId'],
        'sku': !exists(json, 'sku') ? undefined : json['sku'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'quantity': json['quantity'],
        'isTaxable': !exists(json, 'isTaxable') ? undefined : json['isTaxable'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'discounts': !exists(json, 'discounts') ? undefined : ((json['discounts'] as Array<any>).map(AppliedDiscountFromJSON)),
        'discountAmount': !exists(json, 'discountAmount') ? undefined : json['discountAmount'],
        'couponAmount': !exists(json, 'couponAmount') ? undefined : json['couponAmount'],
        'listPrice': !exists(json, 'listPrice') ? undefined : json['listPrice'],
        'salePrice': !exists(json, 'salePrice') ? undefined : json['salePrice'],
        'extendedListPrice': !exists(json, 'extendedListPrice') ? undefined : json['extendedListPrice'],
        'extendedSalePrice': !exists(json, 'extendedSalePrice') ? undefined : json['extendedSalePrice'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'isShippingRequired': !exists(json, 'isShippingRequired') ? undefined : json['isShippingRequired'],
        'downloadFileUrls': !exists(json, 'downloadFileUrls') ? undefined : json['downloadFileUrls'],
        'downloadPageUrl': !exists(json, 'downloadPageUrl') ? undefined : json['downloadPageUrl'],
        'downloadSize': !exists(json, 'downloadSize') ? undefined : json['downloadSize'],
    };
}

export function ItemDigital1ToJSON(value?: ItemDigital1 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'parentId': value.parentId,
        'variantId': value.variantId,
        'productId': value.productId,
        'sku': value.sku,
        'name': value.name,
        'url': value.url,
        'quantity': value.quantity,
        'isTaxable': value.isTaxable,
        'imageUrl': value.imageUrl,
        'discounts': value.discounts === undefined ? undefined : ((value.discounts as Array<any>).map(AppliedDiscountToJSON)),
        'discountAmount': value.discountAmount,
        'couponAmount': value.couponAmount,
        'listPrice': value.listPrice,
        'salePrice': value.salePrice,
        'extendedListPrice': value.extendedListPrice,
        'extendedSalePrice': value.extendedSalePrice,
        'type': value.type,
        'isShippingRequired': value.isShippingRequired,
        'downloadFileUrls': value.downloadFileUrls,
        'downloadPageUrl': value.downloadPageUrl,
        'downloadSize': value.downloadSize,
    };
}



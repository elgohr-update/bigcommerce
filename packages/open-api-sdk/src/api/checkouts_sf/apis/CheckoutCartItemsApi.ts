/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Checkouts
 * Manage checkout operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CartPut,
    CartPutFromJSON,
    CartPutToJSON,
    CheckoutFull,
    CheckoutFullFromJSON,
    CheckoutFullToJSON,
} from '../models';

export interface CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdDeleteRequest {
    checkoutId: string;
    cartId: string;
    itemId: string;
}

export interface CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdPutRequest {
    checkoutId: string;
    cartId: string;
    itemId: string;
    body: CartPut;
}

/**
 * 
 */
export class CheckoutCartItemsApi extends runtime.BaseAPI {

    /**
     * Deletes a *Line Item* from the *Cart*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Delete a Line Item
     */
    async checkoutsCartsItemsItemIdByCheckoutIdAndCartIdDeleteRaw(requestParameters: CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckoutFull>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsCartsItemsItemIdByCheckoutIdAndCartIdDelete.');
        }

        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling checkoutsCartsItemsItemIdByCheckoutIdAndCartIdDelete.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling checkoutsCartsItemsItemIdByCheckoutIdAndCartIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/checkouts/{checkoutId}/carts/{cartId}/items/{itemId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFullFromJSON(jsonValue));
    }

    /**
     * Deletes a *Line Item* from the *Cart*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Delete a Line Item
     */
    async checkoutsCartsItemsItemIdByCheckoutIdAndCartIdDelete(requestParameters: CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdDeleteRequest, initOverrides?: RequestInit): Promise<CheckoutFull> {
        const response = await this.checkoutsCartsItemsItemIdByCheckoutIdAndCartIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a *Checkout Line Item*. Updates an existing, single line item in the cart.  If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the [Add Cart Line Items](/api-reference/cart-checkout/storefront-cart-api/cart-items/addcartlineitem) endpoint.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Update a Line Item
     */
    async checkoutsCartsItemsItemIdByCheckoutIdAndCartIdPutRaw(requestParameters: CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckoutFull>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsCartsItemsItemIdByCheckoutIdAndCartIdPut.');
        }

        if (requestParameters.cartId === null || requestParameters.cartId === undefined) {
            throw new runtime.RequiredError('cartId','Required parameter requestParameters.cartId was null or undefined when calling checkoutsCartsItemsItemIdByCheckoutIdAndCartIdPut.');
        }

        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling checkoutsCartsItemsItemIdByCheckoutIdAndCartIdPut.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling checkoutsCartsItemsItemIdByCheckoutIdAndCartIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/checkouts/{checkoutId}/carts/{cartId}/items/{itemId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"cartId"}}`, encodeURIComponent(String(requestParameters.cartId))).replace(`{${"itemId"}}`, encodeURIComponent(String(requestParameters.itemId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CartPutToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFullFromJSON(jsonValue));
    }

    /**
     * Updates a *Checkout Line Item*. Updates an existing, single line item in the cart.  If a variant needs to be changed or updated, the product will need to be removed and re-added to the cart with the correct variants using the [Add Cart Line Items](/api-reference/cart-checkout/storefront-cart-api/cart-items/addcartlineitem) endpoint.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Update a Line Item
     */
    async checkoutsCartsItemsItemIdByCheckoutIdAndCartIdPut(requestParameters: CheckoutsCartsItemsItemIdByCheckoutIdAndCartIdPutRequest, initOverrides?: RequestInit): Promise<CheckoutFull> {
        const response = await this.checkoutsCartsItemsItemIdByCheckoutIdAndCartIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

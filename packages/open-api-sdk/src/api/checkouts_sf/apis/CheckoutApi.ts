/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Checkouts
 * Manage checkout operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CheckoutError,
    CheckoutErrorFromJSON,
    CheckoutErrorToJSON,
    CheckoutPut,
    CheckoutPutFromJSON,
    CheckoutPutToJSON,
    CheckoutsResp,
    CheckoutsRespFromJSON,
    CheckoutsRespToJSON,
} from '../models';

export interface CheckoutsByCheckoutIdGetRequest {
    checkoutId: string;
    include?: CheckoutsByCheckoutIdGetIncludeEnum;
}

export interface CheckoutsByCheckoutIdPutRequest {
    checkoutId: string;
    body: CheckoutPut;
}

/**
 * 
 */
export class CheckoutApi extends runtime.BaseAPI {

    /**
     * Returns a *Checkout*.  The cart ID and checkout ID are the same.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Get a Checkout
     */
    async checkoutsByCheckoutIdGetRaw(requestParameters: CheckoutsByCheckoutIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckoutsResp>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsByCheckoutIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/checkouts/{checkoutId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutsRespFromJSON(jsonValue));
    }

    /**
     * Returns a *Checkout*.  The cart ID and checkout ID are the same.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Get a Checkout
     */
    async checkoutsByCheckoutIdGet(requestParameters: CheckoutsByCheckoutIdGetRequest, initOverrides?: RequestInit): Promise<CheckoutsResp> {
        const response = await this.checkoutsByCheckoutIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates *Checkout* customer messages.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Update Customer Messages
     */
    async checkoutsByCheckoutIdPutRaw(requestParameters: CheckoutsByCheckoutIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckoutsResp>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsByCheckoutIdPut.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling checkoutsByCheckoutIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/checkouts/{checkoutId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CheckoutPutToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutsRespFromJSON(jsonValue));
    }

    /**
     * Updates *Checkout* customer messages.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Update Customer Messages
     */
    async checkoutsByCheckoutIdPut(requestParameters: CheckoutsByCheckoutIdPutRequest, initOverrides?: RequestInit): Promise<CheckoutsResp> {
        const response = await this.checkoutsByCheckoutIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CheckoutsByCheckoutIdGetIncludeEnum {
    CartLineItemsPhysicalItemsOptions = 'cart.lineItems.physicalItems.options',
    CartLineItemsDigitalItemsOptions = 'cart.lineItems.digitalItems.options',
    CartLineItemsPhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',
    CartLineItemsDigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',
    CartLineItemsCustomItemsCategoryNames = 'cart.lineItems.customItems.categoryNames',
    Customer = 'customer',
    CustomerCustomerGroup = 'customer.customerGroup',
    Payments = 'payments',
    Promotions = 'promotions',
    ConsignmentsAvailableShippingOptions = 'consignments.availableShippingOptions'
}

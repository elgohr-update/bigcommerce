/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Checkouts
 * Manage checkout operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CheckoutFull,
    CheckoutFullFromJSON,
    CheckoutFullToJSON,
    CreateConsignmentRequest,
    CreateConsignmentRequestFromJSON,
    CreateConsignmentRequestToJSON,
    NewUpdateConsignment,
    NewUpdateConsignmentFromJSON,
    NewUpdateConsignmentToJSON,
} from '../models';

export interface CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRequest {
    checkoutId: string;
    consignmentId: string;
}

export interface CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPutRequest {
    checkoutId: string;
    consignmentId: string;
    body: NewUpdateConsignment;
    include?: string;
}

export interface CheckoutsConsignmentsByCheckoutIdPostRequest {
    checkoutId: string;
    body: Array<CreateConsignmentRequest>;
    include?: string;
}

/**
 * 
 */
export class CheckoutConsignmentsApi extends runtime.BaseAPI {

    /**
     * Removes an existing *Consignment* from *Checkout*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Delete a Consignment
     */
    async checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRaw(requestParameters: CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckoutFull>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete.');
        }

        if (requestParameters.consignmentId === null || requestParameters.consignmentId === undefined) {
            throw new runtime.RequiredError('consignmentId','Required parameter requestParameters.consignmentId was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/checkouts/{checkoutId}/consignments/{consignmentId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"consignmentId"}}`, encodeURIComponent(String(requestParameters.consignmentId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFullFromJSON(jsonValue));
    }

    /**
     * Removes an existing *Consignment* from *Checkout*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Delete a Consignment
     */
    async checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete(requestParameters: CheckoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRequest, initOverrides?: RequestInit): Promise<CheckoutFull> {
        const response = await this.checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing consignment. Shipping address, line item IDs or the shipping option ID can be updated using this endpoint.  There are two steps to add a new shipping address and shipping options with line items.  1. Add a new Consignment to Checkout. 2. Update the Consignment with Shipping Options. *   Update each *Consignment* `shippingOptionId` (shipping address and line items) with the `availableShippingOption > id` from Step One.   **Required Fields** * shippingOptionId  To learn more about creating a Checkout Consignment see [Working with the Fetch API](/api-docs/cart-and-checkout/working-sf-apis).  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">   > ### Note > * You cannot pass both a `shippingAddress` and `shippingOptionId` because the shipping option may not be able to be applied to the given address  > * The Send a Test Request feature is not currently supported for this endpoint.   </div> </div> </div>
     * Update a Consignment
     */
    async checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutRaw(requestParameters: CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckoutFull>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut.');
        }

        if (requestParameters.consignmentId === null || requestParameters.consignmentId === undefined) {
            throw new runtime.RequiredError('consignmentId','Required parameter requestParameters.consignmentId was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/checkouts/{checkoutId}/consignments/{consignmentId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"consignmentId"}}`, encodeURIComponent(String(requestParameters.consignmentId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NewUpdateConsignmentToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFullFromJSON(jsonValue));
    }

    /**
     * Updates an existing consignment. Shipping address, line item IDs or the shipping option ID can be updated using this endpoint.  There are two steps to add a new shipping address and shipping options with line items.  1. Add a new Consignment to Checkout. 2. Update the Consignment with Shipping Options. *   Update each *Consignment* `shippingOptionId` (shipping address and line items) with the `availableShippingOption > id` from Step One.   **Required Fields** * shippingOptionId  To learn more about creating a Checkout Consignment see [Working with the Fetch API](/api-docs/cart-and-checkout/working-sf-apis).  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">   > ### Note > * You cannot pass both a `shippingAddress` and `shippingOptionId` because the shipping option may not be able to be applied to the given address  > * The Send a Test Request feature is not currently supported for this endpoint.   </div> </div> </div>
     * Update a Consignment
     */
    async checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut(requestParameters: CheckoutsConsignmentsByCheckoutIdAndConsignmentIdPutRequest, initOverrides?: RequestInit): Promise<CheckoutFull> {
        const response = await this.checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a new *Consignment* to *Checkout*.  There are two steps to add a new shipping address and shipping options with line items.  1. Add a new Consignment to Checkout. *  Send a POST to Consignments with each shipping address and line items IDs. Each address can have its own line item IDs. *  As part of the request URL make sure to add `include=consignments.availableShippingOptions` to return the available shipping options based on line items and shipping locations. This will return `availableShippingOptions` in the response. 2. [Update the Consignment](/api-reference/cart-checkout/storefront-checkout-api/checkout-consignments/checkoutsconsignmentsbycheckoutidandconsignmentidput) with Shipping Options.  **Required Query** * consignments.availableShippingOptions  **Required Fields** * shipping_address * line_items  To learn more about creating a Checkout Consignment see [Working with the Fetch API](/api-docs/cart-and-checkout/working-sf-apis).  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">   > ### Note > The Send a Test Request feature is not currently supported for this endpoint.   </div> </div> </div>
     * Create a Consignment
     */
    async checkoutsConsignmentsByCheckoutIdPostRaw(requestParameters: CheckoutsConsignmentsByCheckoutIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckoutFull>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsConsignmentsByCheckoutIdPost.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling checkoutsConsignmentsByCheckoutIdPost.');
        }

        const queryParameters: any = {};

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/checkouts/{checkoutId}/consignments`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(CreateConsignmentRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFullFromJSON(jsonValue));
    }

    /**
     * Adds a new *Consignment* to *Checkout*.  There are two steps to add a new shipping address and shipping options with line items.  1. Add a new Consignment to Checkout. *  Send a POST to Consignments with each shipping address and line items IDs. Each address can have its own line item IDs. *  As part of the request URL make sure to add `include=consignments.availableShippingOptions` to return the available shipping options based on line items and shipping locations. This will return `availableShippingOptions` in the response. 2. [Update the Consignment](/api-reference/cart-checkout/storefront-checkout-api/checkout-consignments/checkoutsconsignmentsbycheckoutidandconsignmentidput) with Shipping Options.  **Required Query** * consignments.availableShippingOptions  **Required Fields** * shipping_address * line_items  To learn more about creating a Checkout Consignment see [Working with the Fetch API](/api-docs/cart-and-checkout/working-sf-apis).  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">   > ### Note > The Send a Test Request feature is not currently supported for this endpoint.   </div> </div> </div>
     * Create a Consignment
     */
    async checkoutsConsignmentsByCheckoutIdPost(requestParameters: CheckoutsConsignmentsByCheckoutIdPostRequest, initOverrides?: RequestInit): Promise<CheckoutFull> {
        const response = await this.checkoutsConsignmentsByCheckoutIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Checkouts
 * Manage checkout operations and data via front-end JavaScript on BigCommerce stencil powered storefronts.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddressBase,
    AddressBaseFromJSON,
    AddressBaseToJSON,
    CheckoutFull,
    CheckoutFullFromJSON,
    CheckoutFullToJSON,
} from '../models';

export interface CheckoutsBillingAddressByCheckoutIdAndAddressIdPutRequest {
    checkoutId: string;
    addressId: number;
    body: AddressBase;
}

export interface CheckoutsBillingAddressByCheckoutIdPostRequest {
    checkoutId: string;
    body: AddressBase;
}

/**
 * 
 */
export class CheckoutBillingAddressApi extends runtime.BaseAPI {

    /**
     * Updates an existing billing address on *Checkout*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Update Checkout Billing Address
     */
    async checkoutsBillingAddressByCheckoutIdAndAddressIdPutRaw(requestParameters: CheckoutsBillingAddressByCheckoutIdAndAddressIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckoutFull>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut.');
        }

        if (requestParameters.addressId === null || requestParameters.addressId === undefined) {
            throw new runtime.RequiredError('addressId','Required parameter requestParameters.addressId was null or undefined when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/checkouts/{checkoutId}/billing-address/{addressId}`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))).replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters.addressId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddressBaseToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFullFromJSON(jsonValue));
    }

    /**
     * Updates an existing billing address on *Checkout*.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Update Checkout Billing Address
     */
    async checkoutsBillingAddressByCheckoutIdAndAddressIdPut(requestParameters: CheckoutsBillingAddressByCheckoutIdAndAddressIdPutRequest, initOverrides?: RequestInit): Promise<CheckoutFull> {
        const response = await this.checkoutsBillingAddressByCheckoutIdAndAddressIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Adds a billing address to an existing *Checkout*.  **Required Fields** * country_code  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > * The `email` property is only required if the customer is a guest shopper. Otherwise, it is set automatically. > * Sending `email` property as a payload in POST request triggers the abandoned cart notification process. > * The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Add Checkout Billing Address
     */
    async checkoutsBillingAddressByCheckoutIdPostRaw(requestParameters: CheckoutsBillingAddressByCheckoutIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CheckoutFull>> {
        if (requestParameters.checkoutId === null || requestParameters.checkoutId === undefined) {
            throw new runtime.RequiredError('checkoutId','Required parameter requestParameters.checkoutId was null or undefined when calling checkoutsBillingAddressByCheckoutIdPost.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling checkoutsBillingAddressByCheckoutIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/checkouts/{checkoutId}/billing-address`.replace(`{${"checkoutId"}}`, encodeURIComponent(String(requestParameters.checkoutId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressBaseToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckoutFullFromJSON(jsonValue));
    }

    /**
     * Adds a billing address to an existing *Checkout*.  **Required Fields** * country_code  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">  > ### Note > * The `email` property is only required if the customer is a guest shopper. Otherwise, it is set automatically. > * Sending `email` property as a payload in POST request triggers the abandoned cart notification process. > * The Send a Test Request feature is not currently supported for this endpoint.  </div> </div> </div>
     * Add Checkout Billing Address
     */
    async checkoutsBillingAddressByCheckoutIdPost(requestParameters: CheckoutsBillingAddressByCheckoutIdPostRequest, initOverrides?: RequestInit): Promise<CheckoutFull> {
        const response = await this.checkoutsBillingAddressByCheckoutIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

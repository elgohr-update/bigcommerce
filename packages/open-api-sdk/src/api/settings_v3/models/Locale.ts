/* tslint:disable */
/* eslint-disable */
/**
 * Settings V3
 * Manage settings and configuration for BigCommerce hosted stores and headless storefronts.  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET /stores/{{STORE_HASH}}/v3/settings/storefront/status host: api.bigcommerce.com Accept: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | |-|-|-| |  Information & Settings | modify | `store_v2_information` | |  Information & Settings | read-only | `store_v2_information_read_only` |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@bigcommerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * The basic locale settings for a store, used to give shopper information about languages, countries, etc.
 * @export
 * @interface Locale
 */
export interface Locale {
    /**
     * 
     * @type {string}
     * @memberof Locale
     */
    defaultShopperLanguage?: string;
    /**
     * 
     * @type {string}
     * @memberof Locale
     */
    storeCountry?: string;
    /**
     * Determines whether to display the storefront content in the shopper's browser language or the shopper's selected default language.
     * 
     * Available values:
     * * `browser` - language updates automatically based on the shopper browser language. Multiple languages are supported.
     * * `default_shopper_language` - content is displayed in a single language based on the set `default_shopper_language`. Only the selected language is supported.
     * @type {string}
     * @memberof Locale
     */
    shopperLanguageSelectionMethod?: LocaleShopperLanguageSelectionMethodEnum;
}

/**
* @export
* @enum {string}
*/
export enum LocaleShopperLanguageSelectionMethodEnum {
    Browser = 'browser',
    DefaultShopperLanguage = 'default_shopper_language'
}

export function LocaleFromJSON(json: any): Locale {
    return LocaleFromJSONTyped(json, false);
}

export function LocaleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Locale {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'defaultShopperLanguage': !exists(json, 'default_shopper_language') ? undefined : json['default_shopper_language'],
        'storeCountry': !exists(json, 'store_country') ? undefined : json['store_country'],
        'shopperLanguageSelectionMethod': !exists(json, 'shopper_language_selection_method') ? undefined : json['shopper_language_selection_method'],
    };
}

export function LocaleToJSON(value?: Locale | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'default_shopper_language': value.defaultShopperLanguage,
        'store_country': value.storeCountry,
        'shopper_language_selection_method': value.shopperLanguageSelectionMethod,
    };
}



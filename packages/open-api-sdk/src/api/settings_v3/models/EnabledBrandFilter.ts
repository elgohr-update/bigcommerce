/* tslint:disable */
/* eslint-disable */
/**
 * Settings V3
 * Manage settings and configuration for BigCommerce hosted stores and headless storefronts.  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET /stores/{{STORE_HASH}}/v3/settings/storefront/status host: api.bigcommerce.com Accept: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | |-|-|-| |  Information & Settings | modify | `store_v2_information` | |  Information & Settings | read-only | `store_v2_information_read_only` |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@bigcommerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A storefront filter for product brand
 * @export
 * @interface EnabledBrandFilter
 */
export interface EnabledBrandFilter {
    /**
     * 
     * @type {number}
     * @memberof EnabledBrandFilter
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof EnabledBrandFilter
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof EnabledBrandFilter
     */
    type?: EnabledBrandFilterTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof EnabledBrandFilter
     */
    sortBy?: EnabledBrandFilterSortByEnum;
    /**
     * 
     * @type {number}
     * @memberof EnabledBrandFilter
     */
    itemsToShow?: EnabledBrandFilterItemsToShowEnum;
    /**
     * 
     * @type {boolean}
     * @memberof EnabledBrandFilter
     */
    collapsedByDefault?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EnabledBrandFilter
     */
    displayProductCount?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum EnabledBrandFilterTypeEnum {
    Brand = 'brand'
}/**
* @export
* @enum {string}
*/
export enum EnabledBrandFilterSortByEnum {
    Alpha = 'alpha',
    ItemCount = 'item_count'
}/**
* @export
* @enum {string}
*/
export enum EnabledBrandFilterItemsToShowEnum {
    NUMBER_5 = 5,
    NUMBER_10 = 10,
    NUMBER_15 = 15
}

export function EnabledBrandFilterFromJSON(json: any): EnabledBrandFilter {
    return EnabledBrandFilterFromJSONTyped(json, false);
}

export function EnabledBrandFilterFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnabledBrandFilter {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'displayName': !exists(json, 'display_name') ? undefined : json['display_name'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'sortBy': !exists(json, 'sort_by') ? undefined : json['sort_by'],
        'itemsToShow': !exists(json, 'items_to_show') ? undefined : json['items_to_show'],
        'collapsedByDefault': !exists(json, 'collapsed_by_default') ? undefined : json['collapsed_by_default'],
        'displayProductCount': !exists(json, 'display_product_count') ? undefined : json['display_product_count'],
    };
}

export function EnabledBrandFilterToJSON(value?: EnabledBrandFilter | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'display_name': value.displayName,
        'type': value.type,
        'sort_by': value.sortBy,
        'items_to_show': value.itemsToShow,
        'collapsed_by_default': value.collapsedByDefault,
        'display_product_count': value.displayProductCount,
    };
}



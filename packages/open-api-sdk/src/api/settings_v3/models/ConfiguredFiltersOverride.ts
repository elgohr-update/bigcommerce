/* tslint:disable */
/* eslint-disable */
/**
 * Settings V3
 * Manage settings and configuration for BigCommerce hosted stores and headless storefronts.  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET /stores/{{STORE_HASH}}/v3/settings/storefront/status host: api.bigcommerce.com Accept: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | |-|-|-| |  Information & Settings | modify | `store_v2_information` | |  Information & Settings | read-only | `store_v2_information_read_only` |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@bigcommerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ConfiguredFilter,
    ConfiguredFilterFromJSON,
    ConfiguredFilterFromJSONTyped,
    ConfiguredFilterToJSON,
    SearchFilterOverrideContextIdentifier,
    SearchFilterOverrideContextIdentifierFromJSON,
    SearchFilterOverrideContextIdentifierFromJSONTyped,
    SearchFilterOverrideContextIdentifierToJSON,
} from './';

/**
 * A new set of enabled Product Filtering filters which should display in a particular context, such as on a particular Channel, or while viewing a particular Category. Array order indicates the display order on the storefront.
 * @export
 * @interface ConfiguredFiltersOverride
 */
export interface ConfiguredFiltersOverride {
    /**
     * 
     * @type {Array<ConfiguredFilter>}
     * @memberof ConfiguredFiltersOverride
     */
    data?: Array<ConfiguredFilter>;
    /**
     * 
     * @type {SearchFilterOverrideContextIdentifier}
     * @memberof ConfiguredFiltersOverride
     */
    context?: SearchFilterOverrideContextIdentifier;
}

export function ConfiguredFiltersOverrideFromJSON(json: any): ConfiguredFiltersOverride {
    return ConfiguredFiltersOverrideFromJSONTyped(json, false);
}

export function ConfiguredFiltersOverrideFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfiguredFiltersOverride {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : ((json['data'] as Array<any>).map(ConfiguredFilterFromJSON)),
        'context': !exists(json, 'context') ? undefined : SearchFilterOverrideContextIdentifierFromJSON(json['context']),
    };
}

export function ConfiguredFiltersOverrideToJSON(value?: ConfiguredFiltersOverride | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': value.data === undefined ? undefined : ((value.data as Array<any>).map(ConfiguredFilterToJSON)),
        'context': SearchFilterOverrideContextIdentifierToJSON(value.context),
    };
}



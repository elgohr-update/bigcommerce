/* tslint:disable */
/* eslint-disable */
/**
 * Settings V3
 * Manage settings and configuration for BigCommerce hosted stores and headless storefronts.  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET /stores/{{STORE_HASH}}/v3/settings/storefront/status host: api.bigcommerce.com Accept: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | |-|-|-| |  Information & Settings | modify | `store_v2_information` | |  Information & Settings | read-only | `store_v2_information_read_only` |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@bigcommerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ContentSortEnumValues,
    ContentSortEnumValuesFromJSON,
    ContentSortEnumValuesFromJSONTyped,
    ContentSortEnumValuesToJSON,
    ProductSortEnumValues,
    ProductSortEnumValuesFromJSON,
    ProductSortEnumValuesFromJSONTyped,
    ProductSortEnumValuesToJSON,
} from './';

/**
 * 
 * @export
 * @interface StorefrontSearchSettings
 */
export interface StorefrontSearchSettings {
    /**
     * 
     * @type {ProductSortEnumValues}
     * @memberof StorefrontSearchSettings
     */
    defaultProductSort?: ProductSortEnumValues;
    /**
     * 
     * @type {ContentSortEnumValues}
     * @memberof StorefrontSearchSettings
     */
    contentProductSort?: ContentSortEnumValues;
    /**
     * Controls whether Product Filtering feature is active on the storefront. Only supports manipulation on a global level.
     * @type {boolean}
     * @memberof StorefrontSearchSettings
     */
    productFilteringEnabled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StorefrontSearchSettings
     */
    searchSuggest?: boolean;
}

export function StorefrontSearchSettingsFromJSON(json: any): StorefrontSearchSettings {
    return StorefrontSearchSettingsFromJSONTyped(json, false);
}

export function StorefrontSearchSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): StorefrontSearchSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'defaultProductSort': !exists(json, 'default_product_sort') ? undefined : ProductSortEnumValuesFromJSON(json['default_product_sort']),
        'contentProductSort': !exists(json, 'content_product_sort') ? undefined : ContentSortEnumValuesFromJSON(json['content_product_sort']),
        'productFilteringEnabled': !exists(json, 'product_filtering_enabled') ? undefined : json['product_filtering_enabled'],
        'searchSuggest': !exists(json, 'search_suggest') ? undefined : json['search_suggest'],
    };
}

export function StorefrontSearchSettingsToJSON(value?: StorefrontSearchSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'default_product_sort': ProductSortEnumValuesToJSON(value.defaultProductSort),
        'content_product_sort': ContentSortEnumValuesToJSON(value.contentProductSort),
        'product_filtering_enabled': value.productFilteringEnabled,
        'search_suggest': value.searchSuggest,
    };
}



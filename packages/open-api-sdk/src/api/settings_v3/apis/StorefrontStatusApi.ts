/* tslint:disable */
/* eslint-disable */
/**
 * Settings V3
 * Manage settings and configuration for BigCommerce hosted stores and headless storefronts.  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET /stores/{{STORE_HASH}}/v3/settings/storefront/status host: api.bigcommerce.com Accept: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | |-|-|-| |  Information & Settings | modify | `store_v2_information` | |  Information & Settings | read-only | `store_v2_information_read_only` |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@bigcommerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    StorefrontStatus,
    StorefrontStatusFromJSON,
    StorefrontStatusToJSON,
} from '../models';

export interface SettingsStorefrontStatusGetRequest {
    channelId?: number;
}

export interface SettingsStorefrontStatusPutRequest {
    channelId?: number;
    storefrontStatus?: StorefrontStatus;
}

/**
 * 
 */
export class StorefrontStatusApi extends runtime.BaseAPI {

    /**
     * Get storefront status.
     * Get Status
     */
    async settingsStorefrontStatusGetRaw(requestParameters: SettingsStorefrontStatusGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.channelId !== undefined) {
            queryParameters['channel_id'] = requestParameters.channelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/settings/storefront/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Get storefront status.
     * Get Status
     */
    async settingsStorefrontStatusGet(requestParameters: SettingsStorefrontStatusGetRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.settingsStorefrontStatusGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update storefront status.
     * Update Status
     */
    async settingsStorefrontStatusPutRaw(requestParameters: SettingsStorefrontStatusPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.channelId !== undefined) {
            queryParameters['channel_id'] = requestParameters.channelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/settings/storefront/status`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StorefrontStatusToJSON(requestParameters.storefrontStatus),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Update storefront status.
     * Update Status
     */
    async settingsStorefrontStatusPut(requestParameters: SettingsStorefrontStatusPutRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.settingsStorefrontStatusPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

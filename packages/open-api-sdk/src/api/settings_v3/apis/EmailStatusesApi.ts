/* tslint:disable */
/* eslint-disable */
/**
 * Settings V3
 * Manage settings and configuration for BigCommerce hosted stores and headless storefronts.  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET /stores/{{STORE_HASH}}/v3/settings/storefront/status host: api.bigcommerce.com Accept: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | |-|-|-| |  Information & Settings | modify | `store_v2_information` | |  Information & Settings | read-only | `store_v2_information_read_only` |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@bigcommerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EnabledTransactionalEmails,
    EnabledTransactionalEmailsFromJSON,
    EnabledTransactionalEmailsToJSON,
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineResponse2008,
    InlineResponse2008FromJSON,
    InlineResponse2008ToJSON,
} from '../models';

export interface DeleteSettingsTransactionalEmailsEnabledRequest {
    channelId?: number;
    inlineObject?: InlineObject;
}

export interface GetSettingsEmailsEnabledRequest {
    channelId?: number;
}

export interface PutSettingsTransactionalEmailsEnabledRequest {
    channelId?: number;
    enabledTransactionalEmails?: EnabledTransactionalEmails;
}

/**
 * 
 */
export class EmailStatusesApi extends runtime.BaseAPI {

    /**
     * Delete overrides for email settings. Provide email types that should be deleted.   If `channel_id` is supplied as a query parameter, email template overrides are deleted per given channel. If no `channel_id` is supplied, global level template are reset to default.
     * Delete Email Statuses
     */
    async deleteSettingsTransactionalEmailsEnabledRaw(requestParameters: DeleteSettingsTransactionalEmailsEnabledRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.channelId !== undefined) {
            queryParameters['channel_id'] = requestParameters.channelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/settings/email-statuses`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.inlineObject),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete overrides for email settings. Provide email types that should be deleted.   If `channel_id` is supplied as a query parameter, email template overrides are deleted per given channel. If no `channel_id` is supplied, global level template are reset to default.
     * Delete Email Statuses
     */
    async deleteSettingsTransactionalEmailsEnabled(requestParameters: DeleteSettingsTransactionalEmailsEnabledRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteSettingsTransactionalEmailsEnabledRaw(requestParameters, initOverrides);
    }

    /**
     * Get global transactional email settings or channel specific overrides by `channel_id`.
     * Get Email Statuses
     */
    async getSettingsEmailsEnabledRaw(requestParameters: GetSettingsEmailsEnabledRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2008>> {
        const queryParameters: any = {};

        if (requestParameters.channelId !== undefined) {
            queryParameters['channel_id'] = requestParameters.channelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/settings/email-statuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2008FromJSON(jsonValue));
    }

    /**
     * Get global transactional email settings or channel specific overrides by `channel_id`.
     * Get Email Statuses
     */
    async getSettingsEmailsEnabled(requestParameters: GetSettingsEmailsEnabledRequest, initOverrides?: RequestInit): Promise<InlineResponse2008> {
        const response = await this.getSettingsEmailsEnabledRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update global transactional email settings or create channel specific overrides by `channel_id`.
     * Update Email Statuses
     */
    async putSettingsTransactionalEmailsEnabledRaw(requestParameters: PutSettingsTransactionalEmailsEnabledRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2008>> {
        const queryParameters: any = {};

        if (requestParameters.channelId !== undefined) {
            queryParameters['channel_id'] = requestParameters.channelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/settings/email-statuses`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EnabledTransactionalEmailsToJSON(requestParameters.enabledTransactionalEmails),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2008FromJSON(jsonValue));
    }

    /**
     * Update global transactional email settings or create channel specific overrides by `channel_id`.
     * Update Email Statuses
     */
    async putSettingsTransactionalEmailsEnabled(requestParameters: PutSettingsTransactionalEmailsEnabledRequest, initOverrides?: RequestInit): Promise<InlineResponse2008> {
        const response = await this.putSettingsTransactionalEmailsEnabledRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

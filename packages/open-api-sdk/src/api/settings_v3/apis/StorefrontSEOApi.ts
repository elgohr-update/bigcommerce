/* tslint:disable */
/* eslint-disable */
/**
 * Settings V3
 * Manage settings and configuration for BigCommerce hosted stores and headless storefronts.  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET /stores/{{STORE_HASH}}/v3/settings/storefront/status host: api.bigcommerce.com Accept: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | |-|-|-| |  Information & Settings | modify | `store_v2_information` | |  Information & Settings | read-only | `store_v2_information_read_only` |
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: support@bigcommerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    SEOSettings,
    SEOSettingsFromJSON,
    SEOSettingsToJSON,
} from '../models';

export interface DeleteSettingsSeoRequest {
    channelId: number;
    keys: Array<string>;
}

export interface SettingsStorefrontSeoGetRequest {
    channelId?: number;
}

export interface SettingsStorefrontSeoPutRequest {
    channelId?: number;
    sEOSettings?: SEOSettings;
}

/**
 * 
 */
export class StorefrontSEOApi extends runtime.BaseAPI {

    /**
     * Delete storefront SEO settings.
     * Delete  SEO Settings
     */
    async deleteSettingsSeoRaw(requestParameters: DeleteSettingsSeoRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.channelId === null || requestParameters.channelId === undefined) {
            throw new runtime.RequiredError('channelId','Required parameter requestParameters.channelId was null or undefined when calling deleteSettingsSeo.');
        }

        if (requestParameters.keys === null || requestParameters.keys === undefined) {
            throw new runtime.RequiredError('keys','Required parameter requestParameters.keys was null or undefined when calling deleteSettingsSeo.');
        }

        const queryParameters: any = {};

        if (requestParameters.channelId !== undefined) {
            queryParameters['channel_id'] = requestParameters.channelId;
        }

        if (requestParameters.keys) {
            queryParameters['keys'] = requestParameters.keys;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/settings/storefront/seo`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete storefront SEO settings.
     * Delete  SEO Settings
     */
    async deleteSettingsSeo(requestParameters: DeleteSettingsSeoRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteSettingsSeoRaw(requestParameters, initOverrides);
    }

    /**
     * Get storefront SEO settings.
     * Get SEO Settings
     */
    async settingsStorefrontSeoGetRaw(requestParameters: SettingsStorefrontSeoGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: any = {};

        if (requestParameters.channelId !== undefined) {
            queryParameters['channel_id'] = requestParameters.channelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/settings/storefront/seo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Get storefront SEO settings.
     * Get SEO Settings
     */
    async settingsStorefrontSeoGet(requestParameters: SettingsStorefrontSeoGetRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.settingsStorefrontSeoGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update storefront SEO settings.
     * Update SEO Settings
     */
    async settingsStorefrontSeoPutRaw(requestParameters: SettingsStorefrontSeoPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: any = {};

        if (requestParameters.channelId !== undefined) {
            queryParameters['channel_id'] = requestParameters.channelId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/settings/storefront/seo`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SEOSettingsToJSON(requestParameters.sEOSettings),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Update storefront SEO settings.
     * Update SEO Settings
     */
    async settingsStorefrontSeoPut(requestParameters: SettingsStorefrontSeoPutRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.settingsStorefrontSeoPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

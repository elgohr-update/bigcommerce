/* tslint:disable */
/* eslint-disable */
/**
 * Pricing
 * Get product pricing.  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET /stores/{{STORE_HASH}}/v3/pricing/products host: api.bigcommerce.com Accept: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes | UI Name  | Permission | Parameter                     | |----------|------------|-------------------------------| | Products | read-only  | `store_v2_products_read_only` |
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PricingProductsItems,
    PricingProductsItemsFromJSON,
    PricingProductsItemsFromJSONTyped,
    PricingProductsItemsToJSON,
} from './';

/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * The channel context that pricing should be evaluated within. The default BC storefront is channel 1
     * @type {number}
     * @memberof InlineObject
     */
    channelId: number;
    /**
     * The currency of prices to be returned for this request
     * @type {string}
     * @memberof InlineObject
     */
    currencyCode: string;
    /**
     * The customer group relevant for any customer group pricing, tax values, etc.
     * @type {number}
     * @memberof InlineObject
     */
    customerGroupId: number;
    /**
     * The items to fetch prices for
     * @type {Array<PricingProductsItems>}
     * @memberof InlineObject
     */
    items: Array<PricingProductsItems>;
}

export function InlineObjectFromJSON(json: any): InlineObject {
    return InlineObjectFromJSONTyped(json, false);
}

export function InlineObjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): InlineObject {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'channelId': json['channel_id'],
        'currencyCode': json['currency_code'],
        'customerGroupId': json['customer_group_id'],
        'items': ((json['items'] as Array<any>).map(PricingProductsItemsFromJSON)),
    };
}

export function InlineObjectToJSON(value?: InlineObject | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'channel_id': value.channelId,
        'currency_code': value.currencyCode,
        'customer_group_id': value.customerGroupId,
        'items': ((value.items as Array<any>).map(PricingProductsItemsToJSON)),
    };
}



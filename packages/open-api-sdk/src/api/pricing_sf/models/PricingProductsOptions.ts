/* tslint:disable */
/* eslint-disable */
/**
 * Pricing
 * Get product pricing.  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET /stores/{{STORE_HASH}}/v3/pricing/products host: api.bigcommerce.com Accept: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes | UI Name  | Permission | Parameter                     | |----------|------------|-------------------------------| | Products | read-only  | `store_v2_products_read_only` |
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PricingProductsOptions
 */
export interface PricingProductsOptions {
    /**
     * The ID of the variant option or modifier option being configured for this product
     * @type {number}
     * @memberof PricingProductsOptions
     */
    optionId?: number;
    /**
     * The ID of the value matching the option being configured. Note: must be ID, not the value.
     * @type {number}
     * @memberof PricingProductsOptions
     */
    valueId?: number;
}

export function PricingProductsOptionsFromJSON(json: any): PricingProductsOptions {
    return PricingProductsOptionsFromJSONTyped(json, false);
}

export function PricingProductsOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PricingProductsOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'optionId': !exists(json, 'option_id') ? undefined : json['option_id'],
        'valueId': !exists(json, 'value_id') ? undefined : json['value_id'],
    };
}

export function PricingProductsOptionsToJSON(value?: PricingProductsOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'option_id': value.optionId,
        'value_id': value.valueId,
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Pricing
 * Get product pricing.  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET /stores/{{STORE_HASH}}/v3/pricing/products host: api.bigcommerce.com Accept: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes | UI Name  | Permission | Parameter                     | |----------|------------|-------------------------------| | Products | read-only  | `store_v2_products_read_only` |
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PricingResponseData,
    PricingResponseDataFromJSON,
    PricingResponseDataFromJSONTyped,
    PricingResponseDataToJSON,
} from './';

/**
 * 
 * @export
 * @interface PricingResponse
 */
export interface PricingResponse {
    /**
     * 
     * @type {Array<PricingResponseData>}
     * @memberof PricingResponse
     */
    data?: Array<PricingResponseData>;
    /**
     * 
     * @type {object}
     * @memberof PricingResponse
     */
    meta?: object;
}

export function PricingResponseFromJSON(json: any): PricingResponse {
    return PricingResponseFromJSONTyped(json, false);
}

export function PricingResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): PricingResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : ((json['data'] as Array<any>).map(PricingResponseDataFromJSON)),
        'meta': !exists(json, 'meta') ? undefined : json['meta'],
    };
}

export function PricingResponseToJSON(value?: PricingResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': value.data === undefined ? undefined : ((value.data as Array<any>).map(PricingResponseDataToJSON)),
        'meta': value.meta,
    };
}



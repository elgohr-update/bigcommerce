/* tslint:disable */
/* eslint-disable */
/**
 * Marketing
 * Manage coupons, banners, and gift certificates.  - [Authentication](#authentication) - [Subresources](#subresources)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Marketing | modify | `store_v2_marketing` | |  Marketing | read-only | `store_v2_marketing_read_only` |  ## Subresources  ### Coupons Category or product discounts that can be applied to orders for customers who enter a given code.  ### Banners Banners available to display on a store.  ### Gift Certificates Gift certificates available to offer to a store’s customers.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BannerBase
 */
export interface BannerBase {
    /**
     * Name of the banner.
     * @type {string}
     * @memberof BannerBase
     */
    name: string;
    /**
     * Contains the banner content. Returned as a string and includes HTML formatting.
     * @type {string}
     * @memberof BannerBase
     */
    content: string;
    /**
     * Page the Banner is located on.
     * @type {string}
     * @memberof BannerBase
     */
    page: BannerBasePageEnum;
    /**
     * Location on the page.
     * @type {string}
     * @memberof BannerBase
     */
    location: BannerBaseLocationEnum;
    /**
     * This specifies whether the banner should be visible during a specific date range.
     * @type {string}
     * @memberof BannerBase
     */
    dateType: BannerBaseDateTypeEnum;
    /**
     * If the datetype is set as 'custom’, this field specifies the date when the banner should become visible on the storefront.
     * @type {string}
     * @memberof BannerBase
     */
    dateFrom?: string;
    /**
     * If the datetype is set as 'custom’, this field specifies the date when the banner should stop being visible on the storefront.
     * @type {string}
     * @memberof BannerBase
     */
    dateTo?: string;
    /**
     * Integer value denoting whether or not the banner is visible on the storefront: 1 = visible; 0 = not visible
     * @type {string}
     * @memberof BannerBase
     */
    visible?: string;
}

/**
* @export
* @enum {string}
*/
export enum BannerBasePageEnum {
    HomePage = 'home_page',
    CategoryPage = 'category_page',
    BrandPage = 'brand_page',
    SearchPage = 'search_page'
}/**
* @export
* @enum {string}
*/
export enum BannerBaseLocationEnum {
    Top = 'top',
    Bottom = 'bottom'
}/**
* @export
* @enum {string}
*/
export enum BannerBaseDateTypeEnum {
    Always = 'always',
    Custom = 'custom'
}

export function BannerBaseFromJSON(json: any): BannerBase {
    return BannerBaseFromJSONTyped(json, false);
}

export function BannerBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): BannerBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'content': json['content'],
        'page': json['page'],
        'location': json['location'],
        'dateType': json['date_type'],
        'dateFrom': !exists(json, 'date_from') ? undefined : json['date_from'],
        'dateTo': !exists(json, 'date_to') ? undefined : json['date_to'],
        'visible': !exists(json, 'visible') ? undefined : json['visible'],
    };
}

export function BannerBaseToJSON(value?: BannerBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'content': value.content,
        'page': value.page,
        'location': value.location,
        'date_type': value.dateType,
        'date_from': value.dateFrom,
        'date_to': value.dateTo,
        'visible': value.visible,
    };
}



/* tslint:disable */
/* eslint-disable */
/**
 * Marketing
 * Manage coupons, banners, and gift certificates.  - [Authentication](#authentication) - [Subresources](#subresources)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Marketing | modify | `store_v2_marketing` | |  Marketing | read-only | `store_v2_marketing_read_only` |  ## Subresources  ### Coupons Category or product discounts that can be applied to orders for customers who enter a given code.  ### Banners Banners available to display on a store.  ### Gift Certificates Gift certificates available to offer to a storeâ€™s customers.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GiftCertificateBase
 */
export interface GiftCertificateBase {
    /**
     * Name of the recipient.
     * @type {string}
     * @memberof GiftCertificateBase
     */
    toName: string;
    /**
     * Email of the recipient.
     * @type {string}
     * @memberof GiftCertificateBase
     */
    toEmail: string;
    /**
     * Name of the customer who purchased the gift certificate.
     * @type {string}
     * @memberof GiftCertificateBase
     */
    fromName: string;
    /**
     * Email of the customer who purchased the gift certificate.
     * @type {string}
     * @memberof GiftCertificateBase
     */
    fromEmail: string;
    /**
     * Value of the gift certificate.
     * @type {string}
     * @memberof GiftCertificateBase
     */
    amount: string;
}

export function GiftCertificateBaseFromJSON(json: any): GiftCertificateBase {
    return GiftCertificateBaseFromJSONTyped(json, false);
}

export function GiftCertificateBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GiftCertificateBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'toName': json['to_name'],
        'toEmail': json['to_email'],
        'fromName': json['from_name'],
        'fromEmail': json['from_email'],
        'amount': json['amount'],
    };
}

export function GiftCertificateBaseToJSON(value?: GiftCertificateBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'to_name': value.toName,
        'to_email': value.toEmail,
        'from_name': value.fromName,
        'from_email': value.fromEmail,
        'amount': value.amount,
    };
}



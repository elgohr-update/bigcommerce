/* tslint:disable */
/* eslint-disable */
/**
 * Marketing
 * Manage coupons, banners, and gift certificates.  - [Authentication](#authentication) - [Subresources](#subresources)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Marketing | modify | `store_v2_marketing` | |  Marketing | read-only | `store_v2_marketing_read_only` |  ## Subresources  ### Coupons Category or product discounts that can be applied to orders for customers who enter a given code.  ### Banners Banners available to display on a store.  ### Gift Certificates Gift certificates available to offer to a storeâ€™s customers.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BannerBase,
    BannerBaseFromJSON,
    BannerBaseToJSON,
    BannerFull,
    BannerFullFromJSON,
    BannerFullToJSON,
    BannerPut,
    BannerPutFromJSON,
    BannerPutToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
} from '../models';

export interface CreateABannerRequest {
    accept: string;
    contentType: string;
    body: BannerBase;
}

export interface DeleteABannerRequest {
    accept: string;
    contentType: string;
    id: number;
}

export interface DeleteAllBannersRequest {
    accept: string;
    contentType: string;
}

export interface GetABannerRequest {
    id: number;
    accept: string;
    contentType: string;
}

export interface GetACountOfBannersRequest {
    accept: string;
    contentType: string;
}

export interface GetAllBannersRequest {
    accept: string;
    contentType: string;
    minId?: number;
    maxId?: number;
    page?: number;
    limit?: number;
}

export interface UpdateABannerRequest {
    id: number;
    accept: string;
    contentType: string;
    body: BannerPut;
}

/**
 * 
 */
export class BannersApi extends runtime.BaseAPI {

    /**
     * Creates a *Banner*.  **Required Fields** * name * content * page * location * date_type  **Read Only Fields** * date_created * id
     * Create a Banner
     */
    async createABannerRaw(requestParameters: CreateABannerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BannerFull>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling createABanner.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling createABanner.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createABanner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/banners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BannerBaseToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BannerFullFromJSON(jsonValue));
    }

    /**
     * Creates a *Banner*.  **Required Fields** * name * content * page * location * date_type  **Read Only Fields** * date_created * id
     * Create a Banner
     */
    async createABanner(requestParameters: CreateABannerRequest, initOverrides?: RequestInit): Promise<BannerFull> {
        const response = await this.createABannerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a *Banner*.
     * Delete a Banner
     */
    async deleteABannerRaw(requestParameters: DeleteABannerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteABanner.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteABanner.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteABanner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/banners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a *Banner*.
     * Delete a Banner
     */
    async deleteABanner(requestParameters: DeleteABannerRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteABannerRaw(requestParameters, initOverrides);
    }

    /**
     * By default, it deletes all *Banners*.
     * Delete All Banners
     */
    async deleteAllBannersRaw(requestParameters: DeleteAllBannersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteAllBanners.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteAllBanners.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/banners`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * By default, it deletes all *Banners*.
     * Delete All Banners
     */
    async deleteAllBanners(requestParameters: DeleteAllBannersRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAllBannersRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a single *Banner*
     * Get a Banner
     */
    async getABannerRaw(requestParameters: GetABannerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BannerFull>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getABanner.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getABanner.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getABanner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/banners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BannerFullFromJSON(jsonValue));
    }

    /**
     * Returns a single *Banner*
     * Get a Banner
     */
    async getABanner(requestParameters: GetABannerRequest, initOverrides?: RequestInit): Promise<BannerFull> {
        const response = await this.getABannerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a count of *Banners*.
     * Get a Count of Store Banners
     */
    async getACountOfBannersRaw(requestParameters: GetACountOfBannersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getACountOfBanners.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getACountOfBanners.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/banners/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns a count of *Banners*.
     * Get a Count of Store Banners
     */
    async getACountOfBanners(requestParameters: GetACountOfBannersRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.getACountOfBannersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of *Banners*. Default sorting is by banner id, from lowest to highest.
     * Get All Banners
     */
    async getAllBannersRaw(requestParameters: GetAllBannersRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<BannerFull>>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getAllBanners.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getAllBanners.');
        }

        const queryParameters: any = {};

        if (requestParameters.minId !== undefined) {
            queryParameters['min_id'] = requestParameters.minId;
        }

        if (requestParameters.maxId !== undefined) {
            queryParameters['max_id'] = requestParameters.maxId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/banners`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BannerFullFromJSON));
    }

    /**
     * Returns a list of *Banners*. Default sorting is by banner id, from lowest to highest.
     * Get All Banners
     */
    async getAllBanners(requestParameters: GetAllBannersRequest, initOverrides?: RequestInit): Promise<Array<BannerFull>> {
        const response = await this.getAllBannersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a *Banner*.  **Read Only Fields** * date_created * id
     * Update a Banner
     */
    async updateABannerRaw(requestParameters: UpdateABannerRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<BannerFull>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateABanner.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling updateABanner.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling updateABanner.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateABanner.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/banners/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BannerPutToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BannerFullFromJSON(jsonValue));
    }

    /**
     * Updates a *Banner*.  **Read Only Fields** * date_created * id
     * Update a Banner
     */
    async updateABanner(requestParameters: UpdateABannerRequest, initOverrides?: RequestInit): Promise<BannerFull> {
        const response = await this.updateABannerRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/* tslint:disable */
/* eslint-disable */
/**
 * Marketing
 * Manage coupons, banners, and gift certificates.  - [Authentication](#authentication) - [Subresources](#subresources)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Marketing | modify | `store_v2_marketing` | |  Marketing | read-only | `store_v2_marketing_read_only` |  ## Subresources  ### Coupons Category or product discounts that can be applied to orders for customers who enter a given code.  ### Banners Banners available to display on a store.  ### Gift Certificates Gift certificates available to offer to a storeâ€™s customers.
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CouponBase,
    CouponBaseFromJSON,
    CouponBaseToJSON,
    CouponFull,
    CouponFullFromJSON,
    CouponFullToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
} from '../models';

export interface CouponsPostRequest {
    accept: string;
    contentType: string;
    body: CouponBase;
}

export interface DeleteACouponRequest {
    accept: string;
    contentType: string;
    id: number;
}

export interface DeleteAllCouponsRequest {
    accept: string;
    contentType: string;
}

export interface GetACountOfCouponsRequest {
    accept: string;
    contentType: string;
}

export interface GetAllCouponsRequest {
    accept: string;
    contentType: string;
    id?: string;
    code?: string;
    name?: string;
    type?: string;
    minId?: number;
    maxId?: number;
    page?: number;
    limit?: number;
    excludeType?: string;
}

export interface UpdateACouponRequest {
    id: number;
    accept: string;
    contentType: string;
    body: CouponBase;
}

/**
 * 
 */
export class CouponsApi extends runtime.BaseAPI {

    /**
     * Creates a *Coupon*.  **Required Fields** *   `name` *   `code` *   `type` *   `amount` *   `applies_to`  **Read Only Fields** *   `id` *   `num_uses`  **Notes**  The coupon type can be one of the following:  *   `per_item_discount` *   `per_total_discount` *   `shipping_discount` *   `free_shipping` *   `percentage_discount`
     * Create a New Coupon
     */
    async couponsPostRaw(requestParameters: CouponsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CouponFull>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling couponsPost.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling couponsPost.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling couponsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/coupons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CouponBaseToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponFullFromJSON(jsonValue));
    }

    /**
     * Creates a *Coupon*.  **Required Fields** *   `name` *   `code` *   `type` *   `amount` *   `applies_to`  **Read Only Fields** *   `id` *   `num_uses`  **Notes**  The coupon type can be one of the following:  *   `per_item_discount` *   `per_total_discount` *   `shipping_discount` *   `free_shipping` *   `percentage_discount`
     * Create a New Coupon
     */
    async couponsPost(requestParameters: CouponsPostRequest, initOverrides?: RequestInit): Promise<CouponFull> {
        const response = await this.couponsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a *Coupon*.
     * Delete a Coupon
     */
    async deleteACouponRaw(requestParameters: DeleteACouponRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteACoupon.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteACoupon.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteACoupon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/coupons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a *Coupon*.
     * Delete a Coupon
     */
    async deleteACoupon(requestParameters: DeleteACouponRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteACouponRaw(requestParameters, initOverrides);
    }

    /**
     * By default, it deletes a page of *Coupons*.  ## Usage Notes * Deleting a coupon via this endpoint will delete the coupon but not the promotion it is attached to 
     * Delete All Coupons
     */
    async deleteAllCouponsRaw(requestParameters: DeleteAllCouponsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling deleteAllCoupons.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling deleteAllCoupons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/coupons`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * By default, it deletes a page of *Coupons*.  ## Usage Notes * Deleting a coupon via this endpoint will delete the coupon but not the promotion it is attached to 
     * Delete All Coupons
     */
    async deleteAllCoupons(requestParameters: DeleteAllCouponsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteAllCouponsRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a count of all *Coupons* in the store.
     * Get a Count of Coupons
     */
    async getACountOfCouponsRaw(requestParameters: GetACountOfCouponsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getACountOfCoupons.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getACountOfCoupons.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/coupons/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns a count of all *Coupons* in the store.
     * Get a Count of Coupons
     */
    async getACountOfCoupons(requestParameters: GetACountOfCouponsRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.getACountOfCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of *Coupons*. Default sorting is by coupon/discount id, from lowest to highest. Optional filter parameters can be passed in.  ## Usage Notes  Available types for `type` and `exclude_type` filters:  |Type| |-| |`per_item_discount`| |`percentage_discount`| |`per_total_discount`| |`shipping_discount`| |`free_shipping`| |`promotion`|  Coupons with `type=promotion` will not populate usable data for the following fields but instead be set to the following default values:  ```json ... amount : 0.0000 min_purchase: 0.0000 applies_to restricted_to: [] shipping_methods : null ... ```
     * Get All Coupons
     */
    async getAllCouponsRaw(requestParameters: GetAllCouponsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CouponFull>>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getAllCoupons.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getAllCoupons.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.minId !== undefined) {
            queryParameters['min_id'] = requestParameters.minId;
        }

        if (requestParameters.maxId !== undefined) {
            queryParameters['max_id'] = requestParameters.maxId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.excludeType !== undefined) {
            queryParameters['exclude_type'] = requestParameters.excludeType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/coupons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CouponFullFromJSON));
    }

    /**
     * Returns a list of *Coupons*. Default sorting is by coupon/discount id, from lowest to highest. Optional filter parameters can be passed in.  ## Usage Notes  Available types for `type` and `exclude_type` filters:  |Type| |-| |`per_item_discount`| |`percentage_discount`| |`per_total_discount`| |`shipping_discount`| |`free_shipping`| |`promotion`|  Coupons with `type=promotion` will not populate usable data for the following fields but instead be set to the following default values:  ```json ... amount : 0.0000 min_purchase: 0.0000 applies_to restricted_to: [] shipping_methods : null ... ```
     * Get All Coupons
     */
    async getAllCoupons(requestParameters: GetAllCouponsRequest, initOverrides?: RequestInit): Promise<Array<CouponFull>> {
        const response = await this.getAllCouponsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a *Coupon*.   **Read Only Fields**  * `id` * `num_uses` * `date_created`  **Notes**  If the `applies_to` value is cleared, you can restore it to the coupon by reapplying the `applies_to` value in a new `PUT` request.
     * Update a Coupon
     */
    async updateACouponRaw(requestParameters: UpdateACouponRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CouponFull>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateACoupon.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling updateACoupon.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling updateACoupon.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling updateACoupon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/coupons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CouponBaseToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CouponFullFromJSON(jsonValue));
    }

    /**
     * Updates a *Coupon*.   **Read Only Fields**  * `id` * `num_uses` * `date_created`  **Notes**  If the `applies_to` value is cleared, you can restore it to the coupon by reapplying the `applies_to` value in a new `PUT` request.
     * Update a Coupon
     */
    async updateACoupon(requestParameters: UpdateACouponRequest, initOverrides?: RequestInit): Promise<CouponFull> {
        const response = await this.updateACouponRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

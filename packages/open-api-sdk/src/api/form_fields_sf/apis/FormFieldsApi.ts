/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Form Fields (Beta)
 * Read form fields on a BigCommerce hosted storefront.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  > ### Note > * Breaking changes may be introduced to this endpoint while in beta.  </div> </div> </div>
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FormFieldGroups,
    FormFieldGroupsFromJSON,
    FormFieldGroupsToJSON,
} from '../models';

export interface FormFieldsGetRequest {
    filter?: FormFieldsGetFilterEnum;
}

/**
 * 
 */
export class FormFieldsApi extends runtime.BaseAPI {

    /**
     * Gets form fields.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">   > ### Note > The Send a Test Request feature is not currently supported for this endpoint.   </div> </div> </div>
     * Get Form Fields
     */
    async formFieldsGetRaw(requestParameters: FormFieldsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<FormFieldGroups>> {
        const queryParameters: any = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/form-fields`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFieldGroupsFromJSON(jsonValue));
    }

    /**
     * Gets form fields.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--info\"> <div class=\"HubBlock-content\">   > ### Note > The Send a Test Request feature is not currently supported for this endpoint.   </div> </div> </div>
     * Get Form Fields
     */
    async formFieldsGet(requestParameters: FormFieldsGetRequest, initOverrides?: RequestInit): Promise<FormFieldGroups> {
        const response = await this.formFieldsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum FormFieldsGetFilterEnum {
    CustomerAccount = 'customerAccount',
    ShippingAddress = 'shippingAddress',
    BillingAddress = 'billingAddress'
}

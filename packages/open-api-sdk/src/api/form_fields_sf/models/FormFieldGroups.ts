/* tslint:disable */
/* eslint-disable */
/**
 * Storefront Form Fields (Beta)
 * Read form fields on a BigCommerce hosted storefront.  <div class=\"HubBlock--callout\"> <div class=\"CalloutBlock--warning\"> <div class=\"HubBlock-content\">  > ### Note > * Breaking changes may be introduced to this endpoint while in beta.  </div> </div> </div>
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FormField,
    FormFieldFromJSON,
    FormFieldFromJSONTyped,
    FormFieldToJSON,
} from './';

/**
 * Group of form field groups
 * @export
 * @interface FormFieldGroups
 */
export interface FormFieldGroups {
    /**
     * List of form fields for the group
     * @type {Array<FormField>}
     * @memberof FormFieldGroups
     */
    customerAccount?: Array<FormField>;
    /**
     * List of form fields for the group
     * @type {Array<FormField>}
     * @memberof FormFieldGroups
     */
    shippingAddress?: Array<FormField>;
    /**
     * List of form fields for the group
     * @type {Array<FormField>}
     * @memberof FormFieldGroups
     */
    billingAddress?: Array<FormField>;
}

export function FormFieldGroupsFromJSON(json: any): FormFieldGroups {
    return FormFieldGroupsFromJSONTyped(json, false);
}

export function FormFieldGroupsFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormFieldGroups {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'customerAccount': !exists(json, 'customerAccount') ? undefined : ((json['customerAccount'] as Array<any>).map(FormFieldFromJSON)),
        'shippingAddress': !exists(json, 'shippingAddress') ? undefined : ((json['shippingAddress'] as Array<any>).map(FormFieldFromJSON)),
        'billingAddress': !exists(json, 'billingAddress') ? undefined : ((json['billingAddress'] as Array<any>).map(FormFieldFromJSON)),
    };
}

export function FormFieldGroupsToJSON(value?: FormFieldGroups | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'customerAccount': value.customerAccount === undefined ? undefined : ((value.customerAccount as Array<any>).map(FormFieldToJSON)),
        'shippingAddress': value.shippingAddress === undefined ? undefined : ((value.shippingAddress as Array<any>).map(FormFieldToJSON)),
        'billingAddress': value.billingAddress === undefined ? undefined : ((value.billingAddress as Array<any>).map(FormFieldToJSON)),
    };
}



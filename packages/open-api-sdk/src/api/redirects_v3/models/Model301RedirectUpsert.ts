/* tslint:disable */
/* eslint-disable */
/**
 * Redirects
 * Manage 301 redirects for one or more storefronts powered by a single BigCommerce back-end.  **On This Page** - [Authentication](#authentication) - [OAuth Scopes](#oauth-scopes) ---   ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RedirectTo,
    RedirectToFromJSON,
    RedirectToFromJSONTyped,
    RedirectToToJSON,
} from './';

/**
 * Data necessary to create or update a redirect. If there's a conflict on the from_path and site_id, the redirect will be overwritten with new data.
 * @export
 * @interface Model301RedirectUpsert
 */
export interface Model301RedirectUpsert {
    /**
     * 
     * @type {string}
     * @memberof Model301RedirectUpsert
     */
    fromPath: string;
    /**
     * 
     * @type {number}
     * @memberof Model301RedirectUpsert
     */
    siteId: number;
    /**
     * 
     * @type {RedirectTo}
     * @memberof Model301RedirectUpsert
     */
    to?: RedirectTo;
}

export function Model301RedirectUpsertFromJSON(json: any): Model301RedirectUpsert {
    return Model301RedirectUpsertFromJSONTyped(json, false);
}

export function Model301RedirectUpsertFromJSONTyped(json: any, ignoreDiscriminator: boolean): Model301RedirectUpsert {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fromPath': json['from_path'],
        'siteId': json['site_id'],
        'to': !exists(json, 'to') ? undefined : RedirectToFromJSON(json['to']),
    };
}

export function Model301RedirectUpsertToJSON(value?: Model301RedirectUpsert | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'from_path': value.fromPath,
        'site_id': value.siteId,
        'to': RedirectToToJSON(value.to),
    };
}



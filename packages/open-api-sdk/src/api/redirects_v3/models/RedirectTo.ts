/* tslint:disable */
/* eslint-disable */
/**
 * Redirects
 * Manage 301 redirects for one or more storefronts powered by a single BigCommerce back-end.  **On This Page** - [Authentication](#authentication) - [OAuth Scopes](#oauth-scopes) ---   ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RedirectTo
 */
export interface RedirectTo {
    /**
     * 
     * @type {string}
     * @memberof RedirectTo
     */
    type?: RedirectToTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof RedirectTo
     */
    entityId?: number;
    /**
     * 
     * @type {string}
     * @memberof RedirectTo
     */
    url?: string;
}

/**
* @export
* @enum {string}
*/
export enum RedirectToTypeEnum {
    Product = 'product',
    Brand = 'brand',
    Category = 'category',
    Page = 'page',
    Post = 'post',
    Url = 'url'
}

export function RedirectToFromJSON(json: any): RedirectTo {
    return RedirectToFromJSONTyped(json, false);
}

export function RedirectToFromJSONTyped(json: any, ignoreDiscriminator: boolean): RedirectTo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'entityId': !exists(json, 'entity_id') ? undefined : json['entity_id'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function RedirectToToJSON(value?: RedirectTo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'entity_id': value.entityId,
        'url': value.url,
    };
}



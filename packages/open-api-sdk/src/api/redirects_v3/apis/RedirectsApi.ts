/* tslint:disable */
/* eslint-disable */
/**
 * Redirects
 * Manage 301 redirects for one or more storefronts powered by a single BigCommerce back-end.  **On This Page** - [Authentication](#authentication) - [OAuth Scopes](#oauth-scopes) ---   ## Authentication  Requests can be authenticated by sending an `access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token `|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  For more information on Authenticating BigCommerce APIs, see: [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse201,
    InlineResponse201FromJSON,
    InlineResponse201ToJSON,
    Model301RedirectUpsert,
    Model301RedirectUpsertFromJSON,
    Model301RedirectUpsertToJSON,
} from '../models';

export interface DeleteRedirectsRequest {
    idin: Array<number>;
    siteId?: number;
}

export interface GetRedirectsRequest {
    siteId?: number;
    idin?: Array<string>;
    limit?: number;
    page?: number;
    sort?: GetRedirectsSortEnum;
    direction?: GetRedirectsDirectionEnum;
    include?: GetRedirectsIncludeEnum;
    keyword?: string;
}

export interface UpsertRedirectsRequest {
    body?: Array<Model301RedirectUpsert>;
}

/**
 * 
 */
export class RedirectsApi extends runtime.BaseAPI {

    /**
     * Deletes redirects.
     * Delete Redirects
     */
    async deleteRedirectsRaw(requestParameters: DeleteRedirectsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.idin === null || requestParameters.idin === undefined) {
            throw new runtime.RequiredError('idin','Required parameter requestParameters.idin was null or undefined when calling deleteRedirects.');
        }

        const queryParameters: any = {};

        if (requestParameters.idin) {
            queryParameters['id:in'] = requestParameters.idin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.siteId !== undefined) {
            queryParameters['site_id'] = requestParameters.siteId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/storefront/redirects`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes redirects.
     * Delete Redirects
     */
    async deleteRedirects(requestParameters: DeleteRedirectsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteRedirectsRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a collection of the store\'s 301 redirects across all sites.
     * Get Redirects
     */
    async getRedirectsRaw(requestParameters: GetRedirectsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.siteId !== undefined) {
            queryParameters['site_id'] = requestParameters.siteId;
        }

        if (requestParameters.idin) {
            queryParameters['id:in'] = requestParameters.idin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.include !== undefined) {
            queryParameters['include'] = requestParameters.include;
        }

        if (requestParameters.keyword !== undefined) {
            queryParameters['keyword'] = requestParameters.keyword;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/storefront/redirects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns a collection of the store\'s 301 redirects across all sites.
     * Get Redirects
     */
    async getRedirects(requestParameters: GetRedirectsRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.getRedirectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upserts new redirect data across all storefronts.
     * Upsert Redirects
     */
    async upsertRedirectsRaw(requestParameters: UpsertRedirectsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse201>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/storefront/redirects`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(Model301RedirectUpsertToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse201FromJSON(jsonValue));
    }

    /**
     * Upserts new redirect data across all storefronts.
     * Upsert Redirects
     */
    async upsertRedirects(requestParameters: UpsertRedirectsRequest, initOverrides?: RequestInit): Promise<InlineResponse201> {
        const response = await this.upsertRedirectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetRedirectsSortEnum {
    FromPath = 'from_path',
    Type = 'type',
    SiteId = 'site_id'
}
/**
    * @export
    * @enum {string}
    */
export enum GetRedirectsDirectionEnum {
    Asc = 'asc',
    Desc = 'desc'
}
/**
    * @export
    * @enum {string}
    */
export enum GetRedirectsIncludeEnum {
    ToUrl = 'to_url'
}

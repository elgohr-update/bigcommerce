/* tslint:disable */
/* eslint-disable */
/**
 * Payment Methods
 * Get a list of a store\'s enabled payment methods. For processing payments, see [Payment Processing API](/api-docs/payments/payments-api-overview).  - [Authentication](#authentication) - [Subresources](#subresources) - [Additional Resources](#additional-resources)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v2/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Information & Settings | read-only | `store_payments_methods_read` |
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaymentBase,
    PaymentBaseFromJSON,
    PaymentBaseToJSON,
} from '../models';

export interface PaymentsMethodsGetRequest {
    accept: string;
    contentType: string;
    page?: number;
    limit?: number;
}

/**
 * 
 */
export class PaymentMethodsApi extends runtime.BaseAPI {

    /**
     * Gets the list of enabled payment methods. Default sorting is by payment method, alphabetically from A to Z.   <div class=\\\"HubBlock--callout\\\"> <div class=\\\"CalloutBlock--info\\\"> <div class=\\\"HubBlock-content\\\">   ### Note: Avoid using this API operation if possible. It is not supported; therefore, all enabled providers may not appear.   </div>  </div>  </div>  
     * Get All Payment Methods
     */
    async paymentsMethodsGetRaw(requestParameters: PaymentsMethodsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PaymentBase>>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling paymentsMethodsGet.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling paymentsMethodsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/payments/methods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentBaseFromJSON));
    }

    /**
     * Gets the list of enabled payment methods. Default sorting is by payment method, alphabetically from A to Z.   <div class=\\\"HubBlock--callout\\\"> <div class=\\\"CalloutBlock--info\\\"> <div class=\\\"HubBlock-content\\\">   ### Note: Avoid using this API operation if possible. It is not supported; therefore, all enabled providers may not appear.   </div>  </div>  </div>  
     * Get All Payment Methods
     */
    async paymentsMethodsGet(requestParameters: PaymentsMethodsGetRequest, initOverrides?: RequestInit): Promise<Array<PaymentBase>> {
        const response = await this.paymentsMethodsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

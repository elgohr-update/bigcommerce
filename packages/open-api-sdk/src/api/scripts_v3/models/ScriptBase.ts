/* tslint:disable */
/* eslint-disable */
/**
 * Scripts
 * Inject client-side code onto a BigCommere storefront. To learn more about scripts, see [Scripts API](/api-docs/store-management/scripts).   - [OAuth Scopes](#oauth-scopes) - [Authentication](#authentication) - [Available Endpoints](#available-endpoints)  ## OAuth Scopes | UI Name                                      | Permission | Parameter                                     | |----------------------------------------------|------------|-----------------------------------------------| | Checkout Content<sup>1</sup>                             | modify     | `store_content_checkout`                      | | Checkout Content<sup>1</sup>                             | read-only  | `store_content_checkout_read_only`            | | Content                                       | modify     | `store_v2_content`                            | | Content                                       | read-only  | `store_v2_content_read_only`                  |  1. `Checkout Content` scopes are required to create or read scripts on the checkout page.  For more information on OAuth Scopes, see [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Authentication  Requests can be authenticated by sending an`access_token` via `X-Auth-Token` HTTP header:  ```http GET /stores/{$$.env.store_hash}/v3/catalog/summary host: api.bigcommerce.com Accept: application/json X-Auth-Token: {access_token} ```  |Header|Parameter|Description| |-|-|-| |`X-Auth-Token`|`access_token`|Obtained by creating an API account or installing an app in a BigCommerce control panel.|  For more information on Authenticating BigCommerce APIs, see [Authentication](https://developer.bigcommerce.com/api-docs/getting-started/authentication).  ## Available Endpoints | Resource / Endpoint                     | Description                                                             | |-----------------------------------------|-------------------------------------------------------------------------| | Scripts                                 | Add client-side code to a store                                         |
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Script properties common to `post`, `put`, and `get` requests.
 * @export
 * @interface ScriptBase
 */
export interface ScriptBase {
    /**
     * The user-friendly description.
     * @type {string}
     * @memberof ScriptBase
     */
    description?: string;
    /**
     * An html string containing exactly one `script` tag. Only present if `kind` is `script_tag`.
     * @type {string}
     * @memberof ScriptBase
     */
    html?: string;
    /**
     * The `src` attribute of the script to load. Only present if `kind` is `src`.
     * @type {string}
     * @memberof ScriptBase
     */
    src?: string;
    /**
     * It will enable automatic cleanup of the script when the single click app is uninstalled or OAuth token is revoked.
     * @type {boolean}
     * @memberof ScriptBase
     */
    autoUninstall?: boolean;
    /**
     * The load method to use for the script. Values are `default`, `async`, or `defer`. It determines how the script should be loaded into the page.
     * @type {string}
     * @memberof ScriptBase
     */
    loadMethod?: ScriptBaseLoadMethodEnum;
    /**
     * Where on the page to place the script. Values are `head` or `footer`.
     * @type {string}
     * @memberof ScriptBase
     */
    location?: ScriptBaseLocationEnum;
    /**
     * Which set of pages the script should load on. 
     * 
     * Please note that you need to have `Checkout content` scope to use `all_pages` and `checkout`.
     * 
     * - The current visibility options are `storefront`, `checkout`, `all_pages` and `order_confirmation`.
     * 
     *      `storefront`: All pages that are not `checkout` or `order_confirmation`.
     * 		 
     * For a list of all locations visit [Scripts Visibility](https://developer.bigcommerce.com/api-docs/storefront/scripts-overview#scripts_scripts-visibility).
     * @type {string}
     * @memberof ScriptBase
     */
    visibility?: ScriptBaseVisibilityEnum;
    /**
     * What type of script this is.
     * 
     * `src` - a `script` tag will be generated with its `src` attribute set to the value of `src`; For scripts that use the src url. By providing a path to the script, we can optimize and serve the script tag automatically for you.
     * 
     * `script_tag` - The value of `html` will be injected directly onto the page.
     * For scripts which include a raw HTML script_tag to be inserted into the page. The load_method must be default.
     * @type {string}
     * @memberof ScriptBase
     */
    kind?: ScriptBaseKindEnum;
    /**
     * The client id of the API user that created this script, or blank if created by other means.
     * @type {string}
     * @memberof ScriptBase
     */
    apiClientId?: string;
    /**
     * Consent category for GDPR and CCPA compliance. Defaults to `uknown` when not specified. Scripts with an `uknown` consent category do not display on stores with customer cookie consent banners enabled. 
     * @type {string}
     * @memberof ScriptBase
     */
    consentCategory?: ScriptBaseConsentCategoryEnum;
    /**
     * Indicates whether a script is enabled.
     * @type {boolean}
     * @memberof ScriptBase
     */
    enabled?: boolean;
}

/**
* @export
* @enum {string}
*/
export enum ScriptBaseLoadMethodEnum {
    Default = 'default',
    Async = 'async',
    Defer = 'defer'
}/**
* @export
* @enum {string}
*/
export enum ScriptBaseLocationEnum {
    Head = 'head',
    Footer = 'footer'
}/**
* @export
* @enum {string}
*/
export enum ScriptBaseVisibilityEnum {
    Storefront = 'storefront',
    AllPages = 'all_pages',
    Checkout = 'checkout',
    OrderConfirmation = 'order_confirmation'
}/**
* @export
* @enum {string}
*/
export enum ScriptBaseKindEnum {
    Src = 'src',
    ScriptTag = 'script_tag'
}/**
* @export
* @enum {string}
*/
export enum ScriptBaseConsentCategoryEnum {
    Essential = 'essential',
    Functional = 'functional',
    Analytics = 'analytics',
    Targeting = 'targeting'
}

export function ScriptBaseFromJSON(json: any): ScriptBase {
    return ScriptBaseFromJSONTyped(json, false);
}

export function ScriptBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScriptBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'description') ? undefined : json['description'],
        'html': !exists(json, 'html') ? undefined : json['html'],
        'src': !exists(json, 'src') ? undefined : json['src'],
        'autoUninstall': !exists(json, 'auto_uninstall') ? undefined : json['auto_uninstall'],
        'loadMethod': !exists(json, 'load_method') ? undefined : json['load_method'],
        'location': !exists(json, 'location') ? undefined : json['location'],
        'visibility': !exists(json, 'visibility') ? undefined : json['visibility'],
        'kind': !exists(json, 'kind') ? undefined : json['kind'],
        'apiClientId': !exists(json, 'api_client_id') ? undefined : json['api_client_id'],
        'consentCategory': !exists(json, 'consent_category') ? undefined : json['consent_category'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
    };
}

export function ScriptBaseToJSON(value?: ScriptBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'html': value.html,
        'src': value.src,
        'auto_uninstall': value.autoUninstall,
        'load_method': value.loadMethod,
        'location': value.location,
        'visibility': value.visibility,
        'kind': value.kind,
        'api_client_id': value.apiClientId,
        'consent_category': value.consentCategory,
        'enabled': value.enabled,
    };
}



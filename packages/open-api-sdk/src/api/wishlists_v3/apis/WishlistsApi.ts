/* tslint:disable */
/* eslint-disable */
/**
 * Wishlist
 * Create and manage customer [wishlists](https://support.bigcommerce.com/s/article/Wishlists).  - [Authentication](#authentication) - [Additional Information](#additional-information)  ## Authentication  [Authenticate](https://developer.bigcommerce.com/api-docs/getting-started/authentication) requests by including an OAuth `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth scopes |  **UI Name** | **Permission** | **Parameter** | | --- | --- | --- | |  Customers | modify | `store_v2_customers` | |  Customers | read-only | `store_v2_customers_read_only` |  For more information on OAuth scopes, see [Authenticating BigCommerce\'s REST APIs](https://developer.bigcommerce.com/api-docs/getting-started/authentication/rest-api-authentication#oauth-scopes).  ## Additional Information * [Wishlists](https://support.bigcommerce.com/s/article/Wishlists)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse201,
    InlineResponse201FromJSON,
    InlineResponse201ToJSON,
    WishlistPost,
    WishlistPostFromJSON,
    WishlistPostToJSON,
    WishlistPut,
    WishlistPutFromJSON,
    WishlistPutToJSON,
} from '../models';

export interface WishlistsByIdDeleteRequest {
    wishlistId: number;
    accept?: string;
    contentType?: string;
}

export interface WishlistsByIdGetRequest {
    wishlistId: number;
    accept?: string;
    contentType?: string;
}

export interface WishlistsByIdPutRequest {
    wishlistId: number;
    body: WishlistPut;
    accept?: string;
    contentType?: string;
}

export interface WishlistsGetRequest {
    customerId?: number;
    page?: number;
    limit?: number;
    accept?: string;
    contentType?: string;
}

export interface WishlistsPostRequest {
    body: WishlistPost;
    accept?: string;
    contentType?: string;
}

/**
 * 
 */
export class WishlistsApi extends runtime.BaseAPI {

    /**
     * Deletes a wishlist.
     * Delete a Wishlist
     */
    async wishlistsByIdDeleteRaw(requestParameters: WishlistsByIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling wishlistsByIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/wishlists/{wishlist_id}`.replace(`{${"wishlist_id"}}`, encodeURIComponent(String(requestParameters.wishlistId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a wishlist.
     * Delete a Wishlist
     */
    async wishlistsByIdDelete(requestParameters: WishlistsByIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.wishlistsByIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a single wishlist.
     * Get a Wishlist
     */
    async wishlistsByIdGetRaw(requestParameters: WishlistsByIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse201>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling wishlistsByIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/wishlists/{wishlist_id}`.replace(`{${"wishlist_id"}}`, encodeURIComponent(String(requestParameters.wishlistId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse201FromJSON(jsonValue));
    }

    /**
     * Returns a single wishlist.
     * Get a Wishlist
     */
    async wishlistsByIdGet(requestParameters: WishlistsByIdGetRequest, initOverrides?: RequestInit): Promise<InlineResponse201> {
        const response = await this.wishlistsByIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a wishlist.  Use this endpoint to update existing wishlist items, change the wishlist\'s name and whether the wishlist is available publicly. To add or delete a wishlist item, see [Wishlist Items](https://developer.bigcommerce.com/api-reference/store-management/wishlists/wishlists-items).
     * Update a Wishlist
     */
    async wishlistsByIdPutRaw(requestParameters: WishlistsByIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse201>> {
        if (requestParameters.wishlistId === null || requestParameters.wishlistId === undefined) {
            throw new runtime.RequiredError('wishlistId','Required parameter requestParameters.wishlistId was null or undefined when calling wishlistsByIdPut.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistsByIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/wishlists/{wishlist_id}`.replace(`{${"wishlist_id"}}`, encodeURIComponent(String(requestParameters.wishlistId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistPutToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse201FromJSON(jsonValue));
    }

    /**
     * Updates a wishlist.  Use this endpoint to update existing wishlist items, change the wishlist\'s name and whether the wishlist is available publicly. To add or delete a wishlist item, see [Wishlist Items](https://developer.bigcommerce.com/api-reference/store-management/wishlists/wishlists-items).
     * Update a Wishlist
     */
    async wishlistsByIdPut(requestParameters: WishlistsByIdPutRequest, initOverrides?: RequestInit): Promise<InlineResponse201> {
        const response = await this.wishlistsByIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of wishlists. Optional filter parameters can be passed in.
     * Get All Wishlists
     */
    async wishlistsGetRaw(requestParameters: WishlistsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.customerId !== undefined) {
            queryParameters['customer_id'] = requestParameters.customerId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/wishlists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns a list of wishlists. Optional filter parameters can be passed in.
     * Get All Wishlists
     */
    async wishlistsGet(requestParameters: WishlistsGetRequest, initOverrides?: RequestInit): Promise<InlineResponse200> {
        const response = await this.wishlistsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a wishlist and wishlist item. More than one item can be added in the POST.  **Required Fields** * name * customer_id
     * Create a Wishlist
     */
    async wishlistsPostRaw(requestParameters: WishlistsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse201>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling wishlistsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/wishlists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WishlistPostToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse201FromJSON(jsonValue));
    }

    /**
     * Creates a wishlist and wishlist item. More than one item can be added in the POST.  **Required Fields** * name * customer_id
     * Create a Wishlist
     */
    async wishlistsPost(requestParameters: WishlistsPostRequest, initOverrides?: RequestInit): Promise<InlineResponse201> {
        const response = await this.wishlistsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

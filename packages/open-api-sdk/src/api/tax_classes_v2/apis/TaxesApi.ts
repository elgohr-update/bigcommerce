/* tslint:disable */
/* eslint-disable */
/**
 * Tax Classes
 * Manage tax calculations applied to sales. Tax classes are used to apply different tax rates for specific types of products and orders. This API is read only. Classes must be set using the [Control Panel](https://forum.bigcommerce.com/s/article/Taxes-Video#).
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TaxClassFull,
    TaxClassFullFromJSON,
    TaxClassFullToJSON,
} from '../models';

export interface GetATaxClassRequest {
    id: number;
    accept: string;
    contentType: string;
}

export interface GetAllTaxClassesRequest {
    accept: string;
    contentType: string;
    page?: number;
    limit?: number;
}

/**
 * 
 */
export class TaxesApi extends runtime.BaseAPI {

    /**
     * Returns a single *Tax Class*.
     * Get a Tax Class
     */
    async getATaxClassRaw(requestParameters: GetATaxClassRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TaxClassFull>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getATaxClass.');
        }

        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getATaxClass.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getATaxClass.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/tax_classes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaxClassFullFromJSON(jsonValue));
    }

    /**
     * Returns a single *Tax Class*.
     * Get a Tax Class
     */
    async getATaxClass(requestParameters: GetATaxClassRequest, initOverrides?: RequestInit): Promise<TaxClassFull> {
        const response = await this.getATaxClassRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of all *Tax Classes* in a store.  Default sorting is by tax-class id, from lowest to highest.
     * Get All Tax Classes
     */
    async getAllTaxClassesRaw(requestParameters: GetAllTaxClassesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<TaxClassFull>>> {
        if (requestParameters.accept === null || requestParameters.accept === undefined) {
            throw new runtime.RequiredError('accept','Required parameter requestParameters.accept was null or undefined when calling getAllTaxClasses.');
        }

        if (requestParameters.contentType === null || requestParameters.contentType === undefined) {
            throw new runtime.RequiredError('contentType','Required parameter requestParameters.contentType was null or undefined when calling getAllTaxClasses.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/tax_classes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaxClassFullFromJSON));
    }

    /**
     * Returns a list of all *Tax Classes* in a store.  Default sorting is by tax-class id, from lowest to highest.
     * Get All Tax Classes
     */
    async getAllTaxClasses(requestParameters: GetAllTaxClassesRequest, initOverrides?: RequestInit): Promise<Array<TaxClassFull>> {
        const response = await this.getAllTaxClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

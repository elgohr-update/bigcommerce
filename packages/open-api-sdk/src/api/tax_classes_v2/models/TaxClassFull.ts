/* tslint:disable */
/* eslint-disable */
/**
 * Tax Classes
 * Manage tax calculations applied to sales. Tax classes are used to apply different tax rates for specific types of products and orders. This API is read only. Classes must be set using the [Control Panel](https://forum.bigcommerce.com/s/article/Taxes-Video#).
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TaxClassFull
 */
export interface TaxClassFull {
    /**
     * The unique numerical ID of the tax class. A read-only value which is automatically assigned and increments sequentially.
     * @type {string}
     * @memberof TaxClassFull
     */
    id?: string;
    /**
     * The name of the tax class.
     * @type {string}
     * @memberof TaxClassFull
     */
    name?: string;
    /**
     * Date and time of the tax class' creation. Read-Only.
     * @type {Date}
     * @memberof TaxClassFull
     */
    createdAt?: Date;
    /**
     * Date and time when the tax class was last updated. Read-Only.
     * @type {Date}
     * @memberof TaxClassFull
     */
    updatedAt?: Date;
}

export function TaxClassFullFromJSON(json: any): TaxClassFull {
    return TaxClassFullFromJSONTyped(json, false);
}

export function TaxClassFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): TaxClassFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
    };
}

export function TaxClassFullToJSON(value?: TaxClassFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
    };
}



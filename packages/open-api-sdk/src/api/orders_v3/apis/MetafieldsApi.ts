/* tslint:disable */
/* eslint-disable */
/**
 * Orders V3
 * Surfaces endpoints related to payment processing. The `/orders/{id}/transactions` endpoint returns transaction details for the specified order. To programmatically create, update, and delete orders themselves, see [Orders v2](https://developer.bigcommerce.com/api-reference/store-management/orders). To process payments, see [Payment Processing](https://developer.bigcommerce.com/api-reference/payments/payments-process-payments).  - [Authentication](#authentication) - [Order Transactions](#order-transactions) - [Payment Actions](#payment-actions) - [Resources](#resources)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  | UI Name| Permission |Parameter| |----------------------------------------------|------------|----------| | Order Transactions|modify|`store_v2_transactions`| | Order Transactions|read-only  |`store_v2_transactions_read_only`| | Orders| modify|`store_v2_orders`| | Orders| read-only|`store_v2_orders_read_only`|  ## Order Transactions The `/orders/{id}/transactions` endpoint returns details about the payment instruments used to pay for an order. Depending on the payment method used, different details will be available. Not all credit card payment gateways return full card or fraud details. Transactions endpoints are primarily used to get detailed gateway response information for credit card transactions; however they will also return any available information about digital wallet and offline payments.  **Note**: transactions are not created for the following payment methods: * Test Payment Gateway * PayPal Express * Amazon Pay  ## Payment Actions ### Capture and Void Capture or void the payment for and order.  ### Order Refunds The Order API refund endpoints allow developers to process refunds against orders with settled payments. Refund endpoints are useful when building order management or payment integrations. They make embedding refund functionality directly into the application possible without requiring merchants to return to their BigCommerce Control Panel.  ## Resources * [Orders Overview](https://developer.bigcommerce.com/api-docs/orders/orders-overview) * [Orders V2](https://developer.bigcommerce.com/api-reference/store-management/orders)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MetaFieldCollectionResponse,
    MetaFieldCollectionResponseFromJSON,
    MetaFieldCollectionResponseToJSON,
    MetafieldPost,
    MetafieldPostFromJSON,
    MetafieldPostToJSON,
    MetafieldPut,
    MetafieldPutFromJSON,
    MetafieldPutToJSON,
    MetafieldResponse,
    MetafieldResponseFromJSON,
    MetafieldResponseToJSON,
    NotFound,
    NotFoundFromJSON,
    NotFoundToJSON,
} from '../models';

export interface CreateOrderMetafieldRequest {
    orderId: number;
    metafield: MetafieldPost;
}

export interface DeleteOrderMetafieldByIdRequest {
    orderId: number;
    metafieldId: number;
}

export interface GetOrderMetafieldByOrderIdAndMetafieldIdRequest {
    orderId: number;
    metafieldId: number;
}

export interface GetOrderMetafieldsByOrderIdRequest {
    orderId: number;
    page?: number;
    limit?: number;
    key?: string;
    namespace?: string;
    direction?: GetOrderMetafieldsByOrderIdDirectionEnum;
}

export interface UpdateOrderMetafieldRequest {
    orderId: number;
    metafieldId: number;
    metafield: MetafieldPut;
}

/**
 * 
 */
export class MetafieldsApi extends runtime.BaseAPI {

    /**
     * Creates an order `Metafield`.
     * Create Metafields
     */
    async createOrderMetafieldRaw(requestParameters: CreateOrderMetafieldRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MetafieldResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createOrderMetafield.');
        }

        if (requestParameters.metafield === null || requestParameters.metafield === undefined) {
            throw new runtime.RequiredError('metafield','Required parameter requestParameters.metafield was null or undefined when calling createOrderMetafield.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/metafields`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetafieldPostToJSON(requestParameters.metafield),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetafieldResponseFromJSON(jsonValue));
    }

    /**
     * Creates an order `Metafield`.
     * Create Metafields
     */
    async createOrderMetafield(requestParameters: CreateOrderMetafieldRequest, initOverrides?: RequestInit): Promise<MetafieldResponse> {
        const response = await this.createOrderMetafieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a `Metafield`. 
     * Delete a Metafield
     */
    async deleteOrderMetafieldByIdRaw(requestParameters: DeleteOrderMetafieldByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling deleteOrderMetafieldById.');
        }

        if (requestParameters.metafieldId === null || requestParameters.metafieldId === undefined) {
            throw new runtime.RequiredError('metafieldId','Required parameter requestParameters.metafieldId was null or undefined when calling deleteOrderMetafieldById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/metafields/{metafield_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"metafield_id"}}`, encodeURIComponent(String(requestParameters.metafieldId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a `Metafield`. 
     * Delete a Metafield
     */
    async deleteOrderMetafieldById(requestParameters: DeleteOrderMetafieldByIdRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteOrderMetafieldByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Gets a `Metafield`, by `order_id`. 
     * Get a Metafield
     */
    async getOrderMetafieldByOrderIdAndMetafieldIdRaw(requestParameters: GetOrderMetafieldByOrderIdAndMetafieldIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MetafieldResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderMetafieldByOrderIdAndMetafieldId.');
        }

        if (requestParameters.metafieldId === null || requestParameters.metafieldId === undefined) {
            throw new runtime.RequiredError('metafieldId','Required parameter requestParameters.metafieldId was null or undefined when calling getOrderMetafieldByOrderIdAndMetafieldId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/metafields/{metafield_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"metafield_id"}}`, encodeURIComponent(String(requestParameters.metafieldId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetafieldResponseFromJSON(jsonValue));
    }

    /**
     * Gets a `Metafield`, by `order_id`. 
     * Get a Metafield
     */
    async getOrderMetafieldByOrderIdAndMetafieldId(requestParameters: GetOrderMetafieldByOrderIdAndMetafieldIdRequest, initOverrides?: RequestInit): Promise<MetafieldResponse> {
        const response = await this.getOrderMetafieldByOrderIdAndMetafieldIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets a `Metafield` object list, by `order_id`. 
     * Get Metafields
     */
    async getOrderMetafieldsByOrderIdRaw(requestParameters: GetOrderMetafieldsByOrderIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MetaFieldCollectionResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderMetafieldsByOrderId.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.namespace !== undefined) {
            queryParameters['namespace'] = requestParameters.namespace;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/metafields`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaFieldCollectionResponseFromJSON(jsonValue));
    }

    /**
     * Gets a `Metafield` object list, by `order_id`. 
     * Get Metafields
     */
    async getOrderMetafieldsByOrderId(requestParameters: GetOrderMetafieldsByOrderIdRequest, initOverrides?: RequestInit): Promise<MetaFieldCollectionResponse> {
        const response = await this.getOrderMetafieldsByOrderIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a `Metafield` object.
     * Update a Metafield
     */
    async updateOrderMetafieldRaw(requestParameters: UpdateOrderMetafieldRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<MetafieldResponse>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderMetafield.');
        }

        if (requestParameters.metafieldId === null || requestParameters.metafieldId === undefined) {
            throw new runtime.RequiredError('metafieldId','Required parameter requestParameters.metafieldId was null or undefined when calling updateOrderMetafield.');
        }

        if (requestParameters.metafield === null || requestParameters.metafield === undefined) {
            throw new runtime.RequiredError('metafield','Required parameter requestParameters.metafield was null or undefined when calling updateOrderMetafield.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/metafields/{metafield_id}`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"metafield_id"}}`, encodeURIComponent(String(requestParameters.metafieldId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MetafieldPutToJSON(requestParameters.metafield),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MetafieldResponseFromJSON(jsonValue));
    }

    /**
     * Updates a `Metafield` object.
     * Update a Metafield
     */
    async updateOrderMetafield(requestParameters: UpdateOrderMetafieldRequest, initOverrides?: RequestInit): Promise<MetafieldResponse> {
        const response = await this.updateOrderMetafieldRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetOrderMetafieldsByOrderIdDirectionEnum {
    Asc = 'asc',
    Desc = 'desc'
}

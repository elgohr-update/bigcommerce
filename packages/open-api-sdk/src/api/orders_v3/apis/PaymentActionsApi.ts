/* tslint:disable */
/* eslint-disable */
/**
 * Orders V3
 * Surfaces endpoints related to payment processing. The `/orders/{id}/transactions` endpoint returns transaction details for the specified order. To programmatically create, update, and delete orders themselves, see [Orders v2](https://developer.bigcommerce.com/api-reference/store-management/orders). To process payments, see [Payment Processing](https://developer.bigcommerce.com/api-reference/payments/payments-process-payments).  - [Authentication](#authentication) - [Order Transactions](#order-transactions) - [Payment Actions](#payment-actions) - [Resources](#resources)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  | UI Name| Permission |Parameter| |----------------------------------------------|------------|----------| | Order Transactions|modify|`store_v2_transactions`| | Order Transactions|read-only  |`store_v2_transactions_read_only`| | Orders| modify|`store_v2_orders`| | Orders| read-only|`store_v2_orders_read_only`|  ## Order Transactions The `/orders/{id}/transactions` endpoint returns details about the payment instruments used to pay for an order. Depending on the payment method used, different details will be available. Not all credit card payment gateways return full card or fraud details. Transactions endpoints are primarily used to get detailed gateway response information for credit card transactions; however they will also return any available information about digital wallet and offline payments.  **Note**: transactions are not created for the following payment methods: * Test Payment Gateway * PayPal Express * Amazon Pay  ## Payment Actions ### Capture and Void Capture or void the payment for and order.  ### Order Refunds The Order API refund endpoints allow developers to process refunds against orders with settled payments. Refund endpoints are useful when building order management or payment integrations. They make embedding refund functionality directly into the application possible without requiring merchants to return to their BigCommerce Control Panel.  ## Resources * [Orders Overview](https://developer.bigcommerce.com/api-docs/orders/orders-overview) * [Orders V2](https://developer.bigcommerce.com/api-reference/store-management/orders)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorBase,
    ErrorBaseFromJSON,
    ErrorBaseToJSON,
    ErrorDetailedFull,
    ErrorDetailedFullFromJSON,
    ErrorDetailedFullToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse201,
    InlineResponse201FromJSON,
    InlineResponse201ToJSON,
    InlineResponse2011,
    InlineResponse2011FromJSON,
    InlineResponse2011ToJSON,
    InlineResponse2012,
    InlineResponse2012FromJSON,
    InlineResponse2012ToJSON,
    InlineResponse2013,
    InlineResponse2013FromJSON,
    InlineResponse2013ToJSON,
    InlineResponse422,
    InlineResponse422FromJSON,
    InlineResponse422ToJSON,
    InlineResponse503,
    InlineResponse503FromJSON,
    InlineResponse503ToJSON,
    RefundQuotePost,
    RefundQuotePostFromJSON,
    RefundQuotePostToJSON,
    RefundRequestPost,
    RefundRequestPostFromJSON,
    RefundRequestPostToJSON,
} from '../models';

export interface GetorderrefundsRequest {
    orderId: string;
    accept?: string;
    contentType?: string;
}

export interface GetrefundsRequest {
    orderIdin?: Array<number>;
    idin?: Array<number>;
    accept?: string;
    contentType?: string;
    createdmin?: Date;
    createdmax?: Date;
    page?: number;
    limit?: number;
}

export interface PaymentactioncaptureRequest {
    orderId: number;
    accept?: string;
    contentType?: string;
}

export interface PaymentactionvoidRequest {
    orderId: number;
    accept?: string;
    contentType?: string;
}

export interface PostrefundRequest {
    orderId: number;
    body: RefundRequestPost;
    accept?: string;
    contentType?: string;
}

export interface PostrefundquoteRequest {
    orderId: number;
    body: RefundQuotePost;
    accept?: string;
    contentType?: string;
}

export interface PostrefundquotesRequest {
    body: Array<RefundQuotePost>;
    accept?: string;
    contentType?: string;
}

export interface PostrefundsRequest {
    body: Array<RefundRequestPost>;
    accept?: string;
    contentType?: string;
}

/**
 * 
 */
export class PaymentActionsApi extends runtime.BaseAPI {

    /**
     * Returns a list of refunds ordered by refund ID in ascending order for the given order.  Requires at least one of the following scopes: * `store_v2_transactions_read_only` * `store_v2_transactions` * `store_v2_orders_read_only` * `store_v2_orders`
     * Get Refunds for Order
     */
    async getorderrefundsRaw(requestParameters: GetorderrefundsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getorderrefunds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/payment_actions/refunds`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Returns a list of refunds ordered by refund ID in ascending order for the given order.  Requires at least one of the following scopes: * `store_v2_transactions_read_only` * `store_v2_transactions` * `store_v2_orders_read_only` * `store_v2_orders`
     * Get Refunds for Order
     */
    async getorderrefunds(requestParameters: GetorderrefundsRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.getorderrefundsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of refunds ordered by refund ID in ascending order.  Requires at least one of the following scopes: * `store_v2_transactions_read_only` * `store_v2_transactions` * `store_v2_orders_read_only` * `store_v2_orders`
     * Get All Refunds
     */
    async getrefundsRaw(requestParameters: GetrefundsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: any = {};

        if (requestParameters.orderIdin) {
            queryParameters['order_id:in'] = requestParameters.orderIdin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.idin) {
            queryParameters['id:in'] = requestParameters.idin.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.createdmin !== undefined) {
            queryParameters['created:min'] = (requestParameters.createdmin as any).toISOString();
        }

        if (requestParameters.createdmax !== undefined) {
            queryParameters['created:max'] = (requestParameters.createdmax as any).toISOString();
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/payment_actions/refunds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Returns a list of refunds ordered by refund ID in ascending order.  Requires at least one of the following scopes: * `store_v2_transactions_read_only` * `store_v2_transactions` * `store_v2_orders_read_only` * `store_v2_orders`
     * Get All Refunds
     */
    async getrefunds(requestParameters: GetrefundsRequest, initOverrides?: RequestInit): Promise<InlineResponse2001> {
        const response = await this.getrefundsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Capture the payment for an order updating the `payment_status` to `capture pending`.  Requires at least one of the following scopes: * `store_v2_orders` * `store_v2_transactions`
     * Capture
     */
    async paymentactioncaptureRaw(requestParameters: PaymentactioncaptureRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling paymentactioncapture.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/payment_actions/capture`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Capture the payment for an order updating the `payment_status` to `capture pending`.  Requires at least one of the following scopes: * `store_v2_orders` * `store_v2_transactions`
     * Capture
     */
    async paymentactioncapture(requestParameters: PaymentactioncaptureRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.paymentactioncaptureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Void the payment for an order updating the `payment_status` to `void pending`.  Requires at least one of the following scopes: * `store_v2_orders` * `store_v2_transactions`
     * Void
     */
    async paymentactionvoidRaw(requestParameters: PaymentactionvoidRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling paymentactionvoid.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/payment_actions/void`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Void the payment for an order updating the `payment_status` to `void pending`.  Requires at least one of the following scopes: * `store_v2_orders` * `store_v2_transactions`
     * Void
     */
    async paymentactionvoid(requestParameters: PaymentactionvoidRequest, initOverrides?: RequestInit): Promise<object> {
        const response = await this.paymentactionvoidRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a refund.  Requires at least one of the following scopes: * `store_v2_orders` * `store_v2_transactions`
     * Create a Refund
     */
    async postrefundRaw(requestParameters: PostrefundRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2011>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling postrefund.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postrefund.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/payment_actions/refunds`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefundRequestPostToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2011FromJSON(jsonValue));
    }

    /**
     * Creates a refund.  Requires at least one of the following scopes: * `store_v2_orders` * `store_v2_transactions`
     * Create a Refund
     */
    async postrefund(requestParameters: PostrefundRequest, initOverrides?: RequestInit): Promise<InlineResponse2011> {
        const response = await this.postrefundRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Calculate the tax amount, total refund amount and get available payment options for an order refund by providing items and costs or quantities to refund.  Requires at least one of the following scopes: * `store_v2_orders` * `store_v2_transactions`
     * Create a Refund Quote
     */
    async postrefundquoteRaw(requestParameters: PostrefundquoteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse201>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling postrefundquote.');
        }

        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postrefundquote.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/{order_id}/payment_actions/refund_quotes`.replace(`{${"order_id"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefundQuotePostToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse201FromJSON(jsonValue));
    }

    /**
     * Calculate the tax amount, total refund amount and get available payment options for an order refund by providing items and costs or quantities to refund.  Requires at least one of the following scopes: * `store_v2_orders` * `store_v2_transactions`
     * Create a Refund Quote
     */
    async postrefundquote(requestParameters: PostrefundquoteRequest, initOverrides?: RequestInit): Promise<InlineResponse201> {
        const response = await this.postrefundquoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Calculate the tax amount, total refund amount and get availble payment options for an order refund by providing items and costs or quantities to refund.  This endpoint will accept a batch of one or more.  Requires at least one of the following scopes: * `store_v2_orders` * `store_v2_transactions`
     * Create Refund Quotes - BATCH
     */
    async postrefundquotesRaw(requestParameters: PostrefundquotesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2012>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postrefundquotes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/payment_actions/refund_quotes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(RefundQuotePostToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2012FromJSON(jsonValue));
    }

    /**
     * Calculate the tax amount, total refund amount and get availble payment options for an order refund by providing items and costs or quantities to refund.  This endpoint will accept a batch of one or more.  Requires at least one of the following scopes: * `store_v2_orders` * `store_v2_transactions`
     * Create Refund Quotes - BATCH
     */
    async postrefundquotes(requestParameters: PostrefundquotesRequest, initOverrides?: RequestInit): Promise<InlineResponse2012> {
        const response = await this.postrefundquotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a refund.  This endpoint will accept a batch of one or more.  Requires at least one of the following scopes: * `store_v2_orders` * `store_v2_transactions`
     * Create Refunds - BATCH
     */
    async postrefundsRaw(requestParameters: PostrefundsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<InlineResponse2013>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling postrefunds.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (requestParameters.contentType !== undefined && requestParameters.contentType !== null) {
            headerParameters['Content-Type'] = String(requestParameters.contentType);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-Auth-Token"] = this.configuration.apiKey("X-Auth-Token"); // X-Auth-Token authentication
        }

        const response = await this.request({
            path: `/orders/payment_actions/refunds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body.map(RefundRequestPostToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2013FromJSON(jsonValue));
    }

    /**
     * Creates a refund.  This endpoint will accept a batch of one or more.  Requires at least one of the following scopes: * `store_v2_orders` * `store_v2_transactions`
     * Create Refunds - BATCH
     */
    async postrefunds(requestParameters: PostrefundsRequest, initOverrides?: RequestInit): Promise<InlineResponse2013> {
        const response = await this.postrefundsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

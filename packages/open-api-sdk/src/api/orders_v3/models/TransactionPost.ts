/* tslint:disable */
/* eslint-disable */
/**
 * Orders V3
 * Surfaces endpoints related to payment processing. The `/orders/{id}/transactions` endpoint returns transaction details for the specified order. To programmatically create, update, and delete orders themselves, see [Orders v2](https://developer.bigcommerce.com/api-reference/store-management/orders). To process payments, see [Payment Processing](https://developer.bigcommerce.com/api-reference/payments/payments-process-payments).  - [Authentication](#authentication) - [Order Transactions](#order-transactions) - [Payment Actions](#payment-actions) - [Resources](#resources)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  | UI Name| Permission |Parameter| |----------------------------------------------|------------|----------| | Order Transactions|modify|`store_v2_transactions`| | Order Transactions|read-only  |`store_v2_transactions_read_only`| | Orders| modify|`store_v2_orders`| | Orders| read-only|`store_v2_orders_read_only`|  ## Order Transactions The `/orders/{id}/transactions` endpoint returns details about the payment instruments used to pay for an order. Depending on the payment method used, different details will be available. Not all credit card payment gateways return full card or fraud details. Transactions endpoints are primarily used to get detailed gateway response information for credit card transactions; however they will also return any available information about digital wallet and offline payments.  **Note**: transactions are not created for the following payment methods: * Test Payment Gateway * PayPal Express * Amazon Pay  ## Payment Actions ### Capture and Void Capture or void the payment for and order.  ### Order Refunds The Order API refund endpoints allow developers to process refunds against orders with settled payments. Refund endpoints are useful when building order management or payment integrations. They make embedding refund functionality directly into the application possible without requiring merchants to return to their BigCommerce Control Panel.  ## Resources * [Orders Overview](https://developer.bigcommerce.com/api-docs/orders/orders-overview) * [Orders V2](https://developer.bigcommerce.com/api-reference/store-management/orders)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Custom,
    CustomFromJSON,
    CustomFromJSONTyped,
    CustomToJSON,
    Offline,
    OfflineFromJSON,
    OfflineFromJSONTyped,
    OfflineToJSON,
} from './';

/**
 * 
 * @export
 * @interface TransactionPost
 */
export interface TransactionPost {
    /**
     * Store event that created the transaction.
     * @type {string}
     * @memberof TransactionPost
     */
    event: TransactionPostEventEnum;
    /**
     * The payment method: `credit_card` - a credit-card transaction; `electronic_wallet` - an online wallet; `store_credit` - a transaction using store credit; `gift_certificate` - a transaction using a gift certificate; `custom` - manual payment methods; `token` - payment token; `nonce` - temporary payment token; `offsite` - online payment off the site (e.g., PayPal); `offline` - payment method that takes place offline.
     * @type {string}
     * @memberof TransactionPost
     */
    method: TransactionPostMethodEnum;
    /**
     * Amount of money in the transaction.
     * @type {number}
     * @memberof TransactionPost
     */
    amount: number;
    /**
     * Currency used for the transaction.
     * @type {string}
     * @memberof TransactionPost
     */
    currency: string;
    /**
     * The payment gateway, where applicable.
     * @type {string}
     * @memberof TransactionPost
     */
    gateway: TransactionPostGatewayEnum;
    /**
     * The transaction ID returned by the payment gateway for this transaction item.
     * @type {string}
     * @memberof TransactionPost
     */
    gatewayTransactionId?: string;
    /**
     * The datetime of the transaction.
     * @type {Date}
     * @memberof TransactionPost
     */
    dateCreated?: Date;
    /**
     * True if the transaction performed was a test, or if the gateway is in test mode.
     * @type {boolean}
     * @memberof TransactionPost
     */
    test?: boolean;
    /**
     * Status of the transaction.
     * @type {string}
     * @memberof TransactionPost
     */
    status?: TransactionPostStatusEnum;
    /**
     * Result of gateway fraud review, if any. Default is `false`.
     * @type {boolean}
     * @memberof TransactionPost
     */
    fraudReview?: boolean;
    /**
     * Identifier for an existing transaction upon which this transaction acts.
     * @type {number}
     * @memberof TransactionPost
     */
    referenceTransactionId?: number;
    /**
     * 
     * @type {Offline}
     * @memberof TransactionPost
     */
    offline?: Offline;
    /**
     * 
     * @type {Custom}
     * @memberof TransactionPost
     */
    custom?: Custom;
}

/**
* @export
* @enum {string}
*/
export enum TransactionPostEventEnum {
    Purchase = 'purchase',
    Authorization = 'authorization',
    Capture = 'capture',
    Refund = 'refund',
    Void = 'void',
    Pending = 'pending',
    Settled = 'settled'
}/**
* @export
* @enum {string}
*/
export enum TransactionPostMethodEnum {
    CreditCard = 'credit_card',
    ElectronicWallet = 'electronic_wallet',
    GiftCertificate = 'gift_certificate',
    StoreCredit = 'store_credit',
    ApplePayCard = 'apple_pay_card',
    ApplePayToken = 'apple_pay_token',
    Token = 'token',
    Custom = 'custom',
    Offsite = 'offsite',
    Offline = 'offline',
    Nonce = 'nonce'
}/**
* @export
* @enum {string}
*/
export enum TransactionPostGatewayEnum {
    _2checkout = '2checkout',
    Adyen = 'adyen',
    Amazon = 'amazon',
    Authorizenet = 'authorizenet',
    Bankdeposit = 'bankdeposit',
    Braintree = 'braintree',
    Cheque = 'cheque',
    Cod = 'cod',
    Custom = 'custom',
    Firstdatagge4 = 'firstdatagge4',
    Giftcertificate = 'giftcertificate',
    Hps = 'hps',
    Instore = 'instore',
    Klarna = 'klarna',
    Migs = 'migs',
    Moneyorder = 'moneyorder',
    Nmi = 'nmi',
    Paypalexpress = 'paypalexpress',
    Paypalpaymentsprous = 'paypalpaymentsprous',
    Paypalpaymentsprouk = 'paypalpaymentsprouk',
    Plugnpay = 'plugnpay',
    Qbmsv2 = 'qbmsv2',
    Securenet = 'securenet',
    Square = 'square',
    Storecredit = 'storecredit',
    Stripe = 'stripe',
    Testgateway = 'testgateway',
    Usaepay = 'usaepay'
}/**
* @export
* @enum {string}
*/
export enum TransactionPostStatusEnum {
    Ok = 'ok',
    Error = 'error'
}

export function TransactionPostFromJSON(json: any): TransactionPost {
    return TransactionPostFromJSONTyped(json, false);
}

export function TransactionPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionPost {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'event': json['event'],
        'method': json['method'],
        'amount': json['amount'],
        'currency': json['currency'],
        'gateway': json['gateway'],
        'gatewayTransactionId': !exists(json, 'gateway_transaction_id') ? undefined : json['gateway_transaction_id'],
        'dateCreated': !exists(json, 'date_created') ? undefined : (new Date(json['date_created'])),
        'test': !exists(json, 'test') ? undefined : json['test'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'fraudReview': !exists(json, 'fraud_review') ? undefined : json['fraud_review'],
        'referenceTransactionId': !exists(json, 'reference_transaction_id') ? undefined : json['reference_transaction_id'],
        'offline': !exists(json, 'offline') ? undefined : OfflineFromJSON(json['offline']),
        'custom': !exists(json, 'custom') ? undefined : CustomFromJSON(json['custom']),
    };
}

export function TransactionPostToJSON(value?: TransactionPost | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'event': value.event,
        'method': value.method,
        'amount': value.amount,
        'currency': value.currency,
        'gateway': value.gateway,
        'gateway_transaction_id': value.gatewayTransactionId,
        'date_created': value.dateCreated === undefined ? undefined : (value.dateCreated.toISOString()),
        'test': value.test,
        'status': value.status,
        'fraud_review': value.fraudReview,
        'reference_transaction_id': value.referenceTransactionId,
        'offline': OfflineToJSON(value.offline),
        'custom': CustomToJSON(value.custom),
    };
}



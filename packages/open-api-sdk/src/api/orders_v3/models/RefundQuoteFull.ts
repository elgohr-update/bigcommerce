/* tslint:disable */
/* eslint-disable */
/**
 * Orders V3
 * Surfaces endpoints related to payment processing. The `/orders/{id}/transactions` endpoint returns transaction details for the specified order. To programmatically create, update, and delete orders themselves, see [Orders v2](https://developer.bigcommerce.com/api-reference/store-management/orders). To process payments, see [Payment Processing](https://developer.bigcommerce.com/api-reference/payments/payments-process-payments).  - [Authentication](#authentication) - [Order Transactions](#order-transactions) - [Payment Actions](#payment-actions) - [Resources](#resources)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  | UI Name| Permission |Parameter| |----------------------------------------------|------------|----------| | Order Transactions|modify|`store_v2_transactions`| | Order Transactions|read-only  |`store_v2_transactions_read_only`| | Orders| modify|`store_v2_orders`| | Orders| read-only|`store_v2_orders_read_only`|  ## Order Transactions The `/orders/{id}/transactions` endpoint returns details about the payment instruments used to pay for an order. Depending on the payment method used, different details will be available. Not all credit card payment gateways return full card or fraud details. Transactions endpoints are primarily used to get detailed gateway response information for credit card transactions; however they will also return any available information about digital wallet and offline payments.  **Note**: transactions are not created for the following payment methods: * Test Payment Gateway * PayPal Express * Amazon Pay  ## Payment Actions ### Capture and Void Capture or void the payment for and order.  ### Order Refunds The Order API refund endpoints allow developers to process refunds against orders with settled payments. Refund endpoints are useful when building order management or payment integrations. They make embedding refund functionality directly into the application possible without requiring merchants to return to their BigCommerce Control Panel.  ## Resources * [Orders Overview](https://developer.bigcommerce.com/api-docs/orders/orders-overview) * [Orders V2](https://developer.bigcommerce.com/api-reference/store-management/orders)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PaymentOption,
    PaymentOptionFromJSON,
    PaymentOptionFromJSONTyped,
    PaymentOptionToJSON,
} from './';

/**
 * 
 * @export
 * @interface RefundQuoteFull
 */
export interface RefundQuoteFull {
    /**
     * ID of the order to be refunded
     * @type {number}
     * @memberof RefundQuoteFull
     */
    orderId?: number;
    /**
     * A non-negative 2 decimal place rounded value that represents the amount that can be charged/refunded via payment providers.
     * @type {number}
     * @memberof RefundQuoteFull
     */
    totalRefundAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof RefundQuoteFull
     */
    totalRefundTaxAmount?: number;
    /**
     * Indicates rounding value to bring refund_total to an amount refundable via payment providers (in this case to 2 decimal places)
     * @type {number}
     * @memberof RefundQuoteFull
     */
    rounding?: number;
    /**
     * A negative or positive 2 decimal place rounded value that represents the difference between the refund amount requested in the refund quote and the actual amount that is refundable on the order. This value is negative when the refund amount requested in the refund quote is more than the total refundable amount. This value is positive when the total refundable amount has increased, e.g. as a result of rounding.
     * @type {number}
     * @memberof RefundQuoteFull
     */
    adjustment?: number;
    /**
     * Indicate if total_refund_amount includes tax amount
     * @type {boolean}
     * @memberof RefundQuoteFull
     */
    taxInclusive?: boolean;
    /**
     * An array of available refund methods.
     * 
     * Note that `refund_methods` is an array of refund methods, with each refund method being an array of payment options.
     * 
     * For example, if the order was placed by a combination of store credit and bank deposit the refund methods would be:
     * ```json
     * {
     *   "refund_methods": [
     *     [
     *       {
     *         "provider_id": "storecredit",
     *         "provider_description": "Store Credit",
     *         "amount": 119.35,
     *         "offline": false,
     *         "offline_provider": false,
     *         "offline_reason": ""
     *       }
     *     ],
     *     [
     *       {
     *         "provider_id": "custom",
     *         "provider_description": "Custom",
     *         "amount": 119.35,
     *         "offline": true,
     *         "offline_provider": true,
     *         "offline_reason": "This is an offline payment provider."
     *       }
     *     ],
     *     [
     *       {
     *         "provider_id": "bankdeposit",
     *         "provider_description": "Bank Deposit",
     *         "amount": 80.35,
     *         "offline": true,
     *         "offline_provider": true,
     *         "offline_reason": "This is an offline payment provider."
     *       },
     *       {
     *         "provider_id": "storecredit",
     *         "provider_description": "Store Credit",
     *         "amount": 39,
     *         "offline": false,
     *         "offline_provider": false,
     *         "offline_reason": ""
     *       }
     *     ]
     *   ]
     * }
     * ```
     * 
     * In this case there are three refund methods available to the merchant:
     * 1. Refund up to the entire order amount to store credit.
     * 2. Mark an amount up to the full order amount as refunded externally, through a provider or means not represented directly in BC ("custom").
     * 3. Refund the amount paid by store credit to store credit, and the amount paid by bank deposit via a manual refund, which will be recorded as being refunded against the bank deposit.
     * 
     * >
     * @type {Array<Array<PaymentOption>>}
     * @memberof RefundQuoteFull
     */
    refundMethods?: Array<Array<PaymentOption>>;
}

export function RefundQuoteFullFromJSON(json: any): RefundQuoteFull {
    return RefundQuoteFullFromJSONTyped(json, false);
}

export function RefundQuoteFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefundQuoteFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'orderId': !exists(json, 'order_id') ? undefined : json['order_id'],
        'totalRefundAmount': !exists(json, 'total_refund_amount') ? undefined : json['total_refund_amount'],
        'totalRefundTaxAmount': !exists(json, 'total_refund_tax_amount') ? undefined : json['total_refund_tax_amount'],
        'rounding': !exists(json, 'rounding') ? undefined : json['rounding'],
        'adjustment': !exists(json, 'adjustment') ? undefined : json['adjustment'],
        'taxInclusive': !exists(json, 'tax_inclusive') ? undefined : json['tax_inclusive'],
        'refundMethods': !exists(json, 'refund_methods') ? undefined : json['refund_methods'],
    };
}

export function RefundQuoteFullToJSON(value?: RefundQuoteFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'order_id': value.orderId,
        'total_refund_amount': value.totalRefundAmount,
        'total_refund_tax_amount': value.totalRefundTaxAmount,
        'rounding': value.rounding,
        'adjustment': value.adjustment,
        'tax_inclusive': value.taxInclusive,
        'refund_methods': value.refundMethods,
    };
}



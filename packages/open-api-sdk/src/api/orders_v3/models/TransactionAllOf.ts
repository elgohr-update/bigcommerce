/* tslint:disable */
/* eslint-disable */
/**
 * Orders V3
 * Surfaces endpoints related to payment processing. The `/orders/{id}/transactions` endpoint returns transaction details for the specified order. To programmatically create, update, and delete orders themselves, see [Orders v2](https://developer.bigcommerce.com/api-reference/store-management/orders). To process payments, see [Payment Processing](https://developer.bigcommerce.com/api-reference/payments/payments-process-payments).  - [Authentication](#authentication) - [Order Transactions](#order-transactions) - [Payment Actions](#payment-actions) - [Resources](#resources)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  | UI Name| Permission |Parameter| |----------------------------------------------|------------|----------| | Order Transactions|modify|`store_v2_transactions`| | Order Transactions|read-only  |`store_v2_transactions_read_only`| | Orders| modify|`store_v2_orders`| | Orders| read-only|`store_v2_orders_read_only`|  ## Order Transactions The `/orders/{id}/transactions` endpoint returns details about the payment instruments used to pay for an order. Depending on the payment method used, different details will be available. Not all credit card payment gateways return full card or fraud details. Transactions endpoints are primarily used to get detailed gateway response information for credit card transactions; however they will also return any available information about digital wallet and offline payments.  **Note**: transactions are not created for the following payment methods: * Test Payment Gateway * PayPal Express * Amazon Pay  ## Payment Actions ### Capture and Void Capture or void the payment for and order.  ### Order Refunds The Order API refund endpoints allow developers to process refunds against orders with settled payments. Refund endpoints are useful when building order management or payment integrations. They make embedding refund functionality directly into the application possible without requiring merchants to return to their BigCommerce Control Panel.  ## Resources * [Orders Overview](https://developer.bigcommerce.com/api-docs/orders/orders-overview) * [Orders V2](https://developer.bigcommerce.com/api-reference/store-management/orders)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AVSResults,
    AVSResultsFromJSON,
    AVSResultsFromJSONTyped,
    AVSResultsToJSON,
    CVVResult,
    CVVResultFromJSON,
    CVVResultFromJSONTyped,
    CVVResultToJSON,
    CreditCard,
    CreditCardFromJSON,
    CreditCardFromJSONTyped,
    CreditCardToJSON,
    GiftCertificate,
    GiftCertificateFromJSON,
    GiftCertificateFromJSONTyped,
    GiftCertificateToJSON,
    TransactionAllOfStoreCredit,
    TransactionAllOfStoreCreditFromJSON,
    TransactionAllOfStoreCreditFromJSONTyped,
    TransactionAllOfStoreCreditToJSON,
} from './';

/**
 * 
 * @export
 * @interface TransactionAllOf
 */
export interface TransactionAllOf {
    /**
     * Unique identifier for the transaction.
     * @type {number}
     * @memberof TransactionAllOf
     */
    id?: number;
    /**
     * Identifier for the BigCommerce Order with which this transaction is associated.
     * @type {string}
     * @memberof TransactionAllOf
     */
    orderId?: string;
    /**
     * The datetime of the transaction.
     * @type {Date}
     * @memberof TransactionAllOf
     */
    dateCreated?: Date;
    /**
     * This field contains internal BigPay token for stored card that is then mapped to the actual third-party token. We currently do not offer a way to get third party tokens.These tokens are read-only and do not return any information about the payment.
     * @type {string}
     * @memberof TransactionAllOf
     */
    paymentInstrumentToken?: string;
    /**
     * 
     * @type {AVSResults}
     * @memberof TransactionAllOf
     */
    avsResult?: AVSResults;
    /**
     * 
     * @type {CVVResult}
     * @memberof TransactionAllOf
     */
    cvvResult?: CVVResult;
    /**
     * 
     * @type {CreditCard}
     * @memberof TransactionAllOf
     */
    creditCard?: CreditCard;
    /**
     * 
     * @type {GiftCertificate}
     * @memberof TransactionAllOf
     */
    giftCertificate?: GiftCertificate;
    /**
     * 
     * @type {TransactionAllOfStoreCredit}
     * @memberof TransactionAllOf
     */
    storeCredit?: TransactionAllOfStoreCredit;
}

export function TransactionAllOfFromJSON(json: any): TransactionAllOf {
    return TransactionAllOfFromJSONTyped(json, false);
}

export function TransactionAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'orderId': !exists(json, 'order_id') ? undefined : json['order_id'],
        'dateCreated': !exists(json, 'date_created') ? undefined : (new Date(json['date_created'])),
        'paymentInstrumentToken': !exists(json, 'payment_instrument_token') ? undefined : json['payment_instrument_token'],
        'avsResult': !exists(json, 'avs_result') ? undefined : AVSResultsFromJSON(json['avs_result']),
        'cvvResult': !exists(json, 'cvv_result') ? undefined : CVVResultFromJSON(json['cvv_result']),
        'creditCard': !exists(json, 'credit_card') ? undefined : CreditCardFromJSON(json['credit_card']),
        'giftCertificate': !exists(json, 'gift_certificate') ? undefined : GiftCertificateFromJSON(json['gift_certificate']),
        'storeCredit': !exists(json, 'store_credit') ? undefined : TransactionAllOfStoreCreditFromJSON(json['store_credit']),
    };
}

export function TransactionAllOfToJSON(value?: TransactionAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'order_id': value.orderId,
        'date_created': value.dateCreated === undefined ? undefined : (value.dateCreated.toISOString()),
        'payment_instrument_token': value.paymentInstrumentToken,
        'avs_result': AVSResultsToJSON(value.avsResult),
        'cvv_result': CVVResultToJSON(value.cvvResult),
        'credit_card': CreditCardToJSON(value.creditCard),
        'gift_certificate': GiftCertificateToJSON(value.giftCertificate),
        'store_credit': TransactionAllOfStoreCreditToJSON(value.storeCredit),
    };
}



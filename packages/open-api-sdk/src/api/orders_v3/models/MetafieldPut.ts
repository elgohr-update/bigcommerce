/* tslint:disable */
/* eslint-disable */
/**
 * Orders V3
 * Surfaces endpoints related to payment processing. The `/orders/{id}/transactions` endpoint returns transaction details for the specified order. To programmatically create, update, and delete orders themselves, see [Orders v2](https://developer.bigcommerce.com/api-reference/store-management/orders). To process payments, see [Payment Processing](https://developer.bigcommerce.com/api-reference/payments/payments-process-payments).  - [Authentication](#authentication) - [Order Transactions](#order-transactions) - [Payment Actions](#payment-actions) - [Resources](#resources)  ## Authentication  Authenticate requests by including an [OAuth](https://developer.bigcommerce.com/api-docs/getting-started/authentication) `access_token` in the request header.  ```http GET https://api.bigcommerce.com/stores/{{STORE_HASH}}/v3/{{ENDPOINT}} Content-Type: application/json X-Auth-Token: {{ACCESS_TOKEN}} ```  ### OAuth Scopes  | UI Name| Permission |Parameter| |----------------------------------------------|------------|----------| | Order Transactions|modify|`store_v2_transactions`| | Order Transactions|read-only  |`store_v2_transactions_read_only`| | Orders| modify|`store_v2_orders`| | Orders| read-only|`store_v2_orders_read_only`|  ## Order Transactions The `/orders/{id}/transactions` endpoint returns details about the payment instruments used to pay for an order. Depending on the payment method used, different details will be available. Not all credit card payment gateways return full card or fraud details. Transactions endpoints are primarily used to get detailed gateway response information for credit card transactions; however they will also return any available information about digital wallet and offline payments.  **Note**: transactions are not created for the following payment methods: * Test Payment Gateway * PayPal Express * Amazon Pay  ## Payment Actions ### Capture and Void Capture or void the payment for and order.  ### Order Refunds The Order API refund endpoints allow developers to process refunds against orders with settled payments. Refund endpoints are useful when building order management or payment integrations. They make embedding refund functionality directly into the application possible without requiring merchants to return to their BigCommerce Control Panel.  ## Resources * [Orders Overview](https://developer.bigcommerce.com/api-docs/orders/orders-overview) * [Orders V2](https://developer.bigcommerce.com/api-reference/store-management/orders)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MetafieldBase,
    MetafieldBaseFromJSON,
    MetafieldBaseFromJSONTyped,
    MetafieldBaseToJSON,
    MetafieldPutAllOf,
    MetafieldPutAllOfFromJSON,
    MetafieldPutAllOfFromJSONTyped,
    MetafieldPutAllOfToJSON,
} from './';

/**
 * The model for a PUT to update metafield.
 * @export
 * @interface MetafieldPut
 */
export interface MetafieldPut {
    /**
     * Determines the visibility and writeability of the field by other API consumers.
     * 
     * |Value|Description
     * |-|-|
     * |`app_only`|Private to the app that owns the field|
     * |`read`|Visible to other API consumers|
     * |`write`|Open for reading and writing by other API consumers|
     * |`read_and_sf_access`|Visible to other API consumers, including on storefront|
     * |`write_and_sf_access`|Open for reading and writing by other API consumers, including on storefront|
     * @type {string}
     * @memberof MetafieldPut
     */
    permissionSet: MetafieldPutPermissionSetEnum;
    /**
     * Namespace for the metafield, for organizational purposes.
     * @type {string}
     * @memberof MetafieldPut
     */
    namespace?: string;
    /**
     * The name of the field, for example: `location_id`, `color`.
     * @type {string}
     * @memberof MetafieldPut
     */
    key?: string;
    /**
     * The value of the field, for example: `1`, `blue`.
     * @type {string}
     * @memberof MetafieldPut
     */
    value?: string;
    /**
     * Description for the metafields.
     * @type {string}
     * @memberof MetafieldPut
     */
    description?: string;
    /**
     * The type of resource with which the metafield is associated.
     * @type {string}
     * @memberof MetafieldPut
     */
    resourceType?: MetafieldPutResourceTypeEnum;
    /**
     * The unique identifier for the resource with which the metafield is associated.
     * @type {number}
     * @memberof MetafieldPut
     */
    resourceId?: number;
    /**
     * The unique identifier for the metafields.
     * @type {number}
     * @memberof MetafieldPut
     */
    id?: number;
}

/**
* @export
* @enum {string}
*/
export enum MetafieldPutPermissionSetEnum {
    AppOnly = 'app_only',
    Read = 'read',
    Write = 'write',
    ReadAndSfAccess = 'read_and_sf_access',
    WriteAndSfAccess = 'write_and_sf_access'
}/**
* @export
* @enum {string}
*/
export enum MetafieldPutResourceTypeEnum {
    Category = 'category',
    Brand = 'brand',
    Product = 'product',
    Variant = 'variant'
}

export function MetafieldPutFromJSON(json: any): MetafieldPut {
    return MetafieldPutFromJSONTyped(json, false);
}

export function MetafieldPutFromJSONTyped(json: any, ignoreDiscriminator: boolean): MetafieldPut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'permissionSet': json['permission_set'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'key': !exists(json, 'key') ? undefined : json['key'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'resourceType': !exists(json, 'resource_type') ? undefined : json['resource_type'],
        'resourceId': !exists(json, 'resource_id') ? undefined : json['resource_id'],
        'id': !exists(json, 'id') ? undefined : json['id'],
    };
}

export function MetafieldPutToJSON(value?: MetafieldPut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'permission_set': value.permissionSet,
        'namespace': value.namespace,
        'key': value.key,
        'value': value.value,
        'description': value.description,
        'resource_type': value.resourceType,
        'resource_id': value.resourceId,
        'id': value.id,
    };
}



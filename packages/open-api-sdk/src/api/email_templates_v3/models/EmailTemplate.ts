/* tslint:disable */
/* eslint-disable */
/**
 * Email Templates
 * Manage Handlebars-based email templates globally and create channel-specific overrides.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LocaleObject,
    LocaleObjectFromJSON,
    LocaleObjectFromJSONTyped,
    LocaleObjectToJSON,
} from './';

/**
 * Data for a particular email template
 * @export
 * @interface EmailTemplate
 */
export interface EmailTemplate {
    /**
     * 
     * @type {string}
     * @memberof EmailTemplate
     */
    typeId?: EmailTemplateTypeIdEnum;
    /**
     * 
     * @type {string}
     * @memberof EmailTemplate
     */
    body?: string;
    /**
     * A collection of locale translations for the static language.
     * @type {Array<LocaleObject>}
     * @memberof EmailTemplate
     */
    translations?: Array<LocaleObject>;
    /**
     * 
     * @type {string}
     * @memberof EmailTemplate
     */
    subject?: string;
}

/**
* @export
* @enum {string}
*/
export enum EmailTemplateTypeIdEnum {
    AbandonedCartEmail = 'abandoned_cart_email',
    AccountDetailsChangedEmail = 'account_details_changed_email',
    CombinedOrderStatusEmail = 'combined_order_status_email',
    CreateaccountEmail = 'createaccount_email',
    CreateguestaccountEmail = 'createguestaccount_email',
    GiftcertificateEmail = 'giftcertificate_email',
    InvoiceEmail = 'invoice_email',
    OrdermessageNotification = 'ordermessage_notification',
    ReturnConfirmationEmail = 'return_confirmation_email',
    ReturnStatuschangeEmail = 'return_statuschange_email',
    ProductReviewEmail = 'product_review_email',
    AccountResetPasswordEmail = 'account_reset_password_email'
}

export function EmailTemplateFromJSON(json: any): EmailTemplate {
    return EmailTemplateFromJSONTyped(json, false);
}

export function EmailTemplateFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailTemplate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'typeId': !exists(json, 'type_id') ? undefined : json['type_id'],
        'body': !exists(json, 'body') ? undefined : json['body'],
        'translations': !exists(json, 'translations') ? undefined : ((json['translations'] as Array<any>).map(LocaleObjectFromJSON)),
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
    };
}

export function EmailTemplateToJSON(value?: EmailTemplate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type_id': value.typeId,
        'body': value.body,
        'translations': value.translations === undefined ? undefined : ((value.translations as Array<any>).map(LocaleObjectToJSON)),
        'subject': value.subject,
    };
}


